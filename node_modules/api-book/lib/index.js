'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _tools = require('./tools');

var _error = require('./error');

var _error2 = _interopRequireDefault(_error);

var _validation = require('./validation');

var Validation = _interopRequireWildcard(_validation);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _mustache = require('mustache');

var _mustache2 = _interopRequireDefault(_mustache);

require('whatwg-fetch');

var _immutable = require('immutable');

var _immutable2 = _interopRequireDefault(_immutable);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ApiCreator = function () {
  function ApiCreator(book, options) {
    _classCallCheck(this, ApiCreator);

    this.setMethods(book);
    this.options = options;
  }

  _createClass(ApiCreator, [{
    key: 'setMethods',
    value: function setMethods(book) {
      var _this = this;

      _lodash2.default.mapKeys(book, function (chapter, key) {
        if (Validation.isChapterConfigRequireFieldsAllDone(chapter)) {
          _this[key] = _this.getFetchObject.bind(_this, chapter);
        }
      });
    }
  }, {
    key: 'getFetchURL',
    value: function getFetchURL(injectedChapter) {
      var fetchURL = injectedChapter.url;
      if (this.options && this.options.hasOwnProperty('host')) {
        fetchURL = this.options.host + fetchURL;
      }
      if (injectedChapter.payload && injectedChapter.payload.hasOwnProperty('query') && injectedChapter.payload.query) {
        fetchURL = fetchURL + (0, _tools.jsonToQueryString)(injectedChapter.payload.query);
      }
      return fetchURL;
    }
  }, {
    key: 'getFetchInit',
    value: function getFetchInit(injectedChapter) {
      var init = _extends({
        method: injectedChapter.method,
        headers: injectedChapter.headers
      }, injectedChapter.options);
      if (injectedChapter.payload && injectedChapter.payload.hasOwnProperty('body') && injectedChapter.payload.body) {
        init.body = JSON.stringify(injectedChapter.payload.body);
      }
      return init;
    }
  }, {
    key: 'setMiddleware',
    value: function setMiddleware(fetchPromiseObject) {
      var funcs = Object.create(this.options.fetchAndThen);
      while (funcs.length > 0) {
        var func = funcs.shift();
        fetchPromiseObject = fetchPromiseObject.then(func);
      }
      return fetchPromiseObject;
    }
  }, {
    key: 'getFetchObject',
    value: function getFetchObject(chapter, parameters) {
      var injectedChapter = this.getInjectedChapter(chapter, parameters);
      var fetchURL = this.getFetchURL(injectedChapter);
      var fetchInit = this.getFetchInit(injectedChapter);
      var fetchPromiseObject = fetch(fetchURL, fetchInit);
      if (this.options && this.options.hasOwnProperty('fetchAndThen')) {
        fetchPromiseObject = this.setMiddleware(fetchPromiseObject);
      }
      return fetchPromiseObject;
    }
  }, {
    key: 'getInjectedChapter',
    value: function getInjectedChapter(chapter, parameters) {
      if (Validation.isChapterConfigRequireFieldsAllDone(chapter) && Validation.isParametersTypeRight(parameters) && Validation.isParametersMatchChapterConfig(chapter, parameters)) {
        var injectObjectToChapter = this.getObjectInjectedChapter(chapter, parameters);
        var stringifyChapter = JSON.stringify(injectObjectToChapter);
        var injectedStringifyChapter = _mustache2.default.render(stringifyChapter, parameters);
        var injectedChapter = JSON.parse(injectedStringifyChapter);
        return injectedChapter;
      }
    }
  }, {
    key: 'getObjectInjectedChapter',
    value: function getObjectInjectedChapter(chapter, parameters) {
      var _this2 = this;

      var newChapter = _immutable2.default.fromJS(chapter).toObject();
      _lodash2.default.map(parameters, function (parametersValue, parametersKey) {
        if ((typeof parametersValue === 'undefined' ? 'undefined' : _typeof(parametersValue)) === 'object') {
          var findId = '{{' + parametersKey + '}}';
          var replaceObj = parametersValue;
          if (newChapter.payload) {
            _this2.findStringAndInject(newChapter.payload, findId, replaceObj);
          }
        }
      });
      return newChapter;
    }
  }, {
    key: 'findStringAndInject',
    value: function findStringAndInject(obj, findId, replaceObj) {
      var _this3 = this;

      _lodash2.default.map(obj, function (value, key) {
        if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
          _this3.findStringAndInject(value, findId, replaceObj);
        } else if (typeof value === 'string' && value === findId) {
          obj[key] = replaceObj;
        }
      });
    }
  }]);

  return ApiCreator;
}();

module.exports = {
  ApiCreator: ApiCreator
};