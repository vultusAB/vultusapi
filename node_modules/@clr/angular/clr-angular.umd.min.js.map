{
  "version": 3,
  "file": "clr-angular.umd.min.js",
  "sources": [
    "ng://@clr/angular/node_modules/tslib/tslib.es6.js",
    "ng://@clr/angular/out/icon/icon.ts",
    "ng://@clr/angular/out/icon/icon.module.ts",
    "ng://@clr/angular/out/popover/common/popover.ts",
    "ng://@clr/angular/out/popover/common/popover-old.directive.ts",
    "ng://@clr/angular/out/popover/common/index.ts",
    "ng://@clr/angular/out/popover/common/popover.module.ts",
    "ng://@clr/angular/out/utils/loading/loading-listener.ts",
    "ng://@clr/angular/out/button/providers/button-in-group.service.ts",
    "ng://@clr/angular/out/button/button-group/button.ts",
    "ng://@clr/angular/out/popover/dropdown/menu-positions.ts",
    "ng://@clr/angular/out/button/button-group/button-group.ts",
    "ng://@clr/angular/out/button/button-group/button-group.module.ts",
    "ng://@clr/angular/out/utils/loading/loading.ts",
    "ng://@clr/angular/out/utils/loading/loading.module.ts",
    "ng://@clr/angular/out/button/button-loading/loading-button.ts",
    "ng://@clr/angular/out/button/button-loading/loading-button.module.ts",
    "ng://@clr/angular/out/button/button.module.ts",
    "ng://@clr/angular/out/code/syntax-highlight/syntax-highlight.ts",
    "ng://@clr/angular/out/code/syntax-highlight/syntax-highlight.module.ts",
    "ng://@clr/angular/out/code/code.module.ts",
    "ng://@clr/angular/out/utils/conditional/if-active.service.ts",
    "ng://@clr/angular/out/utils/conditional/if-active.directive.ts",
    "ng://@clr/angular/out/utils/conditional/if-open.service.ts",
    "ng://@clr/angular/out/utils/conditional/if-open.directive.ts",
    "ng://@clr/angular/out/utils/conditional/index.ts",
    "ng://@clr/angular/out/utils/conditional/conditional.module.ts",
    "ng://@clr/angular/out/utils/focus-trap/focus-trap-tracker.service.ts",
    "ng://@clr/angular/out/utils/focus-trap/focus-trap.directive.ts",
    "ng://@clr/angular/out/utils/focus-trap/index.ts",
    "ng://@clr/angular/out/utils/focus-trap/focus-trap.module.ts",
    "ng://@clr/angular/out/utils/host-wrapping/empty-anchor.ts",
    "ng://@clr/angular/out/utils/host-wrapping/host-wrapping.module.ts",
    "ng://@clr/angular/out/utils/key-codes/key-codes.ts",
    "ng://@clr/angular/out/forms/datepicker/utils/constants.ts",
    "ng://@clr/angular/out/forms/datepicker/utils/date-utils.ts",
    "ng://@clr/angular/out/forms/datepicker/model/day-view.model.ts",
    "ng://@clr/angular/out/forms/datepicker/model/calendar.model.ts",
    "ng://@clr/angular/out/forms/datepicker/model/day.model.ts",
    "ng://@clr/angular/out/forms/datepicker/model/calendar-view.model.ts",
    "ng://@clr/angular/out/forms/datepicker/providers/date-navigation.service.ts",
    "ng://@clr/angular/out/forms/datepicker/providers/datepicker-focus.service.ts",
    "ng://@clr/angular/out/forms/datepicker/providers/locale-helper.service.ts",
    "ng://@clr/angular/out/forms/datepicker/calendar.ts",
    "ng://@clr/angular/out/forms/common/form-control.service.ts",
    "ng://@clr/angular/out/forms/datepicker/providers/date-form-control.service.ts",
    "ng://@clr/angular/out/forms/datepicker/providers/date-io.service.ts",
    "ng://@clr/angular/out/utils/breakpoints/breakpoints.ts",
    "ng://@clr/angular/out/forms/datepicker/providers/datepicker-enabled.service.ts",
    "ng://@clr/angular/out/forms/datepicker/date-container.ts",
    "ng://@clr/angular/out/utils/host-wrapping/host-wrapper.ts",
    "ng://@clr/angular/out/forms/common/wrapped-form-control.ts",
    "ng://@clr/angular/out/forms/datepicker/date-input.ts",
    "ng://@clr/angular/out/popover/common/abstract-popover.ts",
    "ng://@clr/angular/out/forms/datepicker/providers/view-manager.service.ts",
    "ng://@clr/angular/out/forms/datepicker/datepicker-view-manager.ts",
    "ng://@clr/angular/out/forms/datepicker/day.ts",
    "ng://@clr/angular/out/forms/datepicker/daypicker.ts",
    "ng://@clr/angular/out/forms/datepicker/monthpicker.ts",
    "ng://@clr/angular/out/forms/datepicker/model/year-range.model.ts",
    "ng://@clr/angular/out/forms/datepicker/yearpicker.ts",
    "ng://@clr/angular/out/forms/datepicker/datepicker.module.ts",
    "ng://@clr/angular/out/forms-deprecated/checkbox/checkbox.ts",
    "ng://@clr/angular/out/forms-deprecated/checkbox/checkbox.module.ts",
    "ng://@clr/angular/out/forms-deprecated/forms.module.ts",
    "ng://@clr/angular/out/utils/expand/providers/expand.ts",
    "ng://@clr/angular/out/utils/expand/if-expanded.ts",
    "ng://@clr/angular/out/utils/expand/index.ts",
    "ng://@clr/angular/out/utils/expand/if-expand.module.ts",
    "ng://@clr/angular/out/utils/outside-click/outside-click.ts",
    "ng://@clr/angular/out/utils/outside-click/index.ts",
    "ng://@clr/angular/out/utils/outside-click/outside-click.module.ts",
    "ng://@clr/angular/out/data/datagrid/render/dom-adapter.ts",
    "ng://@clr/angular/out/data/datagrid/render/render-organizer.ts",
    "ng://@clr/angular/out/data/datagrid/animation-hack/row-expand-animation.ts",
    "ng://@clr/angular/out/data/datagrid/providers/custom-filter.ts",
    "ng://@clr/angular/out/data/datagrid/providers/state-debouncer.provider.ts",
    "ng://@clr/angular/out/data/datagrid/providers/page.ts",
    "ng://@clr/angular/out/data/datagrid/providers/filters.ts",
    "ng://@clr/angular/out/data/datagrid/utils/datagrid-filter-registrar.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid-filter.ts",
    "ng://@clr/angular/out/data/datagrid/built-in/filters/datagrid-string-filter-impl.ts",
    "ng://@clr/angular/out/data/datagrid/built-in/filters/datagrid-string-filter.ts",
    "ng://@clr/angular/out/utils/chocolate/oompa-loompa.ts",
    "ng://@clr/angular/out/data/datagrid/providers/row-action-service.ts",
    "ng://@clr/angular/out/utils/chocolate/willy-wonka.ts",
    "ng://@clr/angular/out/data/datagrid/chocolate/datagrid-willy-wonka.ts",
    "ng://@clr/angular/out/data/datagrid/chocolate/actionable-oompa-loompa.ts",
    "ng://@clr/angular/out/data/datagrid/providers/global-expandable-rows.ts",
    "ng://@clr/angular/out/data/datagrid/chocolate/expandable-oompa-loompa.ts",
    "ng://@clr/angular/out/data/datagrid/built-in/nested-property.ts",
    "ng://@clr/angular/out/data/datagrid/built-in/comparators/datagrid-property-comparator.ts",
    "ng://@clr/angular/out/data/datagrid/built-in/filters/datagrid-property-string-filter.ts",
    "ng://@clr/angular/out/data/datagrid/providers/drag-dispatcher.ts",
    "ng://@clr/angular/out/data/datagrid/providers/sort.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid-column.ts",
    "ng://@clr/angular/out/data/datagrid/providers/items.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid-items.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid-placeholder.ts",
    "ng://@clr/angular/out/popover/common/popover-host-anchor.token.ts",
    "ng://@clr/angular/out/popover/signpost/signpost-trigger.ts",
    "ng://@clr/angular/out/popover/signpost/signpost.ts",
    "ng://@clr/angular/out/data/datagrid/providers/hideable-column.service.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid-cell.ts",
    "ng://@clr/angular/out/data/datagrid/providers/selection.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid-row.ts",
    "ng://@clr/angular/out/data/datagrid/providers/column-toggle-buttons.service.ts",
    "ng://@clr/angular/out/data/datagrid/providers/state.provider.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid-action-bar.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid-action-overflow.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid-column-toggle-button.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid-column-toggle-title.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid-column-toggle.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid-detail-registerer.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid-footer.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid-hideable-column.model.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid-hideable-column.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid-items-trackby.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid-pagination.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid-row-detail.ts",
    "ng://@clr/angular/out/data/datagrid/render/body-renderer.ts",
    "ng://@clr/angular/out/data/datagrid/render/constants.ts",
    "ng://@clr/angular/out/data/datagrid/render/cell-renderer.ts",
    "ng://@clr/angular/out/data/datagrid/render/column-resizer.ts",
    "ng://@clr/angular/out/data/datagrid/render/head-renderer.ts",
    "ng://@clr/angular/out/data/datagrid/render/header-renderer.ts",
    "ng://@clr/angular/out/data/datagrid/render/noop-dom-adapter.ts",
    "ng://@clr/angular/out/data/datagrid/render/main-renderer.ts",
    "ng://@clr/angular/out/data/datagrid/render/row-renderer.ts",
    "ng://@clr/angular/out/data/datagrid/render/table-renderer.ts",
    "ng://@clr/angular/out/data/datagrid/datagrid.module.ts",
    "ng://@clr/angular/out/data/stack-view/stack-block.ts",
    "ng://@clr/angular/out/data/stack-view/stack-view.ts",
    "ng://@clr/angular/out/data/stack-view/stack-header.ts",
    "ng://@clr/angular/out/data/stack-view/stack-control.ts",
    "ng://@clr/angular/out/data/stack-view/stack-input.ts",
    "ng://@clr/angular/out/data/stack-view/stack-select.ts",
    "ng://@clr/angular/out/data/stack-view/stack-view-custom-tags.ts",
    "ng://@clr/angular/out/data/stack-view/stack-view.module.ts",
    "ng://@clr/angular/out/utils/id-generator/id-generator.service.ts",
    "ng://@clr/angular/out/data/tree-view/abstract-tree-selection.ts",
    "ng://@clr/angular/out/data/tree-view/providers/tree-selection.service.ts",
    "ng://@clr/angular/out/data/tree-view/providers/tree-selection.provider.ts",
    "ng://@clr/angular/out/data/tree-view/tree-node.ts",
    "ng://@clr/angular/out/data/tree-view/tree-view.module.ts",
    "ng://@clr/angular/out/data/data.module.ts",
    "ng://@clr/angular/out/popover/dropdown/providers/dropdown.service.ts",
    "ng://@clr/angular/out/popover/dropdown/dropdown.ts",
    "ng://@clr/angular/out/popover/dropdown/dropdown-item.ts",
    "ng://@clr/angular/out/popover/dropdown/dropdown-menu.ts",
    "ng://@clr/angular/out/popover/dropdown/dropdown-trigger.ts",
    "ng://@clr/angular/out/popover/dropdown/dropdown.module.ts",
    "ng://@clr/angular/out/emphasis/alert/utils/alert-types.ts",
    "ng://@clr/angular/out/emphasis/alert/providers/icon-and-types.service.ts",
    "ng://@clr/angular/out/emphasis/alert/providers/multi-alert.service.ts",
    "ng://@clr/angular/out/emphasis/alert/alert.ts",
    "ng://@clr/angular/out/emphasis/alert/alert-item.ts",
    "ng://@clr/angular/out/emphasis/alert/alerts.ts",
    "ng://@clr/angular/out/emphasis/alert/alerts-pager.ts",
    "ng://@clr/angular/out/emphasis/alert/alert.module.ts",
    "ng://@clr/angular/out/emphasis/emphasis.module.ts",
    "ng://@clr/angular/out/layout/nav/responsive-nav-codes.ts",
    "ng://@clr/angular/out/layout/nav/responsive-nav-control-message.ts",
    "ng://@clr/angular/out/layout/nav/providers/responsive-navigation.service.ts",
    "ng://@clr/angular/out/layout/main-container/main-container.ts",
    "ng://@clr/angular/out/layout/main-container/main-container.module.ts",
    "ng://@clr/angular/out/layout/nav/chocolate/main-container-willy-wonka.ts",
    "ng://@clr/angular/out/layout/nav/chocolate/nav-detection-oompa-loompa.ts",
    "ng://@clr/angular/out/layout/nav/header.ts",
    "ng://@clr/angular/out/layout/nav/nav-level.ts",
    "ng://@clr/angular/out/layout/nav/providers/responsive-navigation.provider.ts",
    "ng://@clr/angular/out/layout/nav/navigation.module.ts",
    "ng://@clr/angular/out/utils/template-ref/template-ref-container.ts",
    "ng://@clr/angular/out/utils/template-ref/index.ts",
    "ng://@clr/angular/out/utils/template-ref/template-ref.module.ts",
    "ng://@clr/angular/out/layout/tabs/chocolate/tabs-willy-wonka.ts",
    "ng://@clr/angular/out/layout/tabs/chocolate/active-oompa-loompa.ts",
    "ng://@clr/angular/out/layout/tabs/providers/aria.service.ts",
    "ng://@clr/angular/out/layout/tabs/providers/tabs.service.ts",
    "ng://@clr/angular/out/layout/tabs/tab-content.ts",
    "ng://@clr/angular/out/layout/tabs/tabs-id.provider.ts",
    "ng://@clr/angular/out/layout/tabs/tab-link.directive.ts",
    "ng://@clr/angular/out/layout/tabs/tab.ts",
    "ng://@clr/angular/out/layout/tabs/tab-overflow-content.ts",
    "ng://@clr/angular/out/layout/tabs/tabs.ts",
    "ng://@clr/angular/out/layout/tabs/tabs.module.ts",
    "ng://@clr/angular/out/layout/vertical-nav/providers/vertical-nav-group-registration.service.ts",
    "ng://@clr/angular/out/layout/vertical-nav/providers/vertical-nav-icon.service.ts",
    "ng://@clr/angular/out/layout/vertical-nav/providers/vertical-nav.service.ts",
    "ng://@clr/angular/out/layout/vertical-nav/vertical-nav.ts",
    "ng://@clr/angular/out/layout/vertical-nav/providers/vertical-nav-group.service.ts",
    "ng://@clr/angular/out/layout/vertical-nav/vertical-nav-group.ts",
    "ng://@clr/angular/out/layout/vertical-nav/vertical-nav-group-children.ts",
    "ng://@clr/angular/out/layout/vertical-nav/vertical-nav-icon.ts",
    "ng://@clr/angular/out/layout/vertical-nav/vertical-nav-link.ts",
    "ng://@clr/angular/out/layout/vertical-nav/vertical-nav.module.ts",
    "ng://@clr/angular/out/layout/layout.module.ts",
    "ng://@clr/angular/out/utils/scrolling/scrolling-service.ts",
    "ng://@clr/angular/out/modal/utils/ghost-page-animations.ts",
    "ng://@clr/angular/out/modal/modal.ts",
    "ng://@clr/angular/out/modal/modal.module.ts",
    "ng://@clr/angular/out/popover/signpost/signpost-positions.ts",
    "ng://@clr/angular/out/popover/signpost/signpost-content.ts",
    "ng://@clr/angular/out/popover/signpost/signpost.module.ts",
    "ng://@clr/angular/out/popover/tooltip/tooltip.ts",
    "ng://@clr/angular/out/popover/tooltip/tooltip-content.ts",
    "ng://@clr/angular/out/popover/tooltip/tooltip-trigger.ts",
    "ng://@clr/angular/out/popover/tooltip/tooltip.module.ts",
    "ng://@clr/angular/out/popover/popover.module.ts",
    "ng://@clr/angular/out/wizard/providers/button-hub.service.ts",
    "ng://@clr/angular/out/wizard/providers/page-collection.service.ts",
    "ng://@clr/angular/out/wizard/providers/wizard-navigation.service.ts",
    "ng://@clr/angular/out/wizard/providers/header-actions.service.ts",
    "ng://@clr/angular/out/wizard/wizard-header-action.ts",
    "ng://@clr/angular/out/wizard/wizard-page-buttons.ts",
    "ng://@clr/angular/out/wizard/wizard-page-header-actions.ts",
    "ng://@clr/angular/out/wizard/wizard-page-navtitle.ts",
    "ng://@clr/angular/out/wizard/wizard-page-title.ts",
    "ng://@clr/angular/out/wizard/wizard-page.ts",
    "ng://@clr/angular/out/wizard/wizard.ts",
    "ng://@clr/angular/out/wizard/wizard-button.ts",
    "ng://@clr/angular/out/wizard/wizard-custom-tags.ts",
    "ng://@clr/angular/out/wizard/wizard-stepnav.ts",
    "ng://@clr/angular/out/wizard/wizard-stepnav-item.ts",
    "ng://@clr/angular/out/wizard/wizard.module.ts",
    "ng://@clr/angular/out/clr-angular.module.ts",
    "ng://@clr/angular/out/forms/common/label.ts",
    "ng://@clr/angular/out/forms/common/common.module.ts",
    "ng://@clr/angular/out/forms/checkbox/checkbox-container.ts",
    "ng://@clr/angular/out/forms/checkbox/checkbox.ts",
    "ng://@clr/angular/out/forms/checkbox/checkbox.module.ts",
    "ng://@clr/angular/out/forms/radio/radio-container.ts",
    "ng://@clr/angular/out/forms/radio/radio.ts",
    "ng://@clr/angular/out/forms/radio/radio.module.ts",
    "ng://@clr/angular/out/forms/forms.module.ts",
    "ng://@clr/angular/out/utils/animations/collapse/collapse.ts",
    "ng://@clr/angular/out/utils/animations/fade/fade.ts",
    "ng://@clr/angular/out/utils/animations/fade-slide/fade-slide.ts",
    "ng://@clr/angular/out/utils/animations/slide/slide.ts"
  ],
  "sourcesContent": [
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive} from \"@angular/core\";\n\n@Directive({selector: \"clr-icon\"})\nexport class ClrIconCustomTag {\n    // No behavior\n    // The only purpose is to \"declare\" the tag in Angular\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule, Type} from \"@angular/core\";\nimport {ClrIconCustomTag} from \"./icon\";\n\nexport const CLR_ICON_DIRECTIVES: Type<any>[] = [ClrIconCustomTag];\n\n@NgModule({imports: [CommonModule], declarations: [CLR_ICON_DIRECTIVES], exports: [CLR_ICON_DIRECTIVES]})\nexport class ClrIconModule {}\n\n/* tslint:disable variable-name */\n/** @deprecated since 0.11 */\nexport interface IconCustomTag extends ClrIconCustomTag {}\n/** @deprecated since 0.11 */\nexport const IconCustomTag = ClrIconCustomTag;\n/* tslint:enable variable-name */\n/** @deprecated since 0.11 */\nexport const ICON_DIRECTIVES = CLR_ICON_DIRECTIVES;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Do NOT Angular this up. It assumes we're in the DOM, plays with native elements, ...\n * It could potentially be used as part of @clr/ui as a vanilla Javascript helper.\n */\n\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\nimport {PopoverOptions} from \"./popover-options.interface\";\nexport enum Point {\n    RIGHT_CENTER,\n    RIGHT_TOP,\n    RIGHT_BOTTOM,\n    TOP_CENTER,\n    TOP_RIGHT,\n    TOP_LEFT,\n    BOTTOM_CENTER,\n    BOTTOM_RIGHT,\n    BOTTOM_LEFT,\n    LEFT_CENTER,\n    LEFT_TOP,\n    LEFT_BOTTOM,\n}\n\nconst POSITION_RELATIVE = \"relative\";\nconst POSITION_ABSOLUTE = \"absolute\";\nconst POSITION_FIXED = \"fixed\";\n\nconst OVERFLOW_SCROLL = \"scroll\";\nconst OVERFLOW_AUTO = \"auto\";\n\nexport class Popover {\n    private _scroll: Subject<void>;\n\n    constructor(private element: any) {\n        // Browsers don't agree with what to do if some of these are not specified, so we set them all to be safe.\n        element.style.position = POSITION_ABSOLUTE;\n        element.style.top = 0;\n        element.style.bottom = \"auto\";\n        element.style.left = 0;\n        element.style.right = \"auto\";\n    }\n\n    // TODO: need a way to account for parameters that change dynamically (positioning).\n    public anchor(anchor: any, anchorAlign: Point, popoverAlign: Point,\n                  {offsetX = 0, offsetY = 0, useAnchorParent = false}: PopoverOptions = {}): Observable<any> {\n        // TODO: we are assuming here that the popover is inside or next to the anchor.\n        // We'd need to go up the popover tree too otherwise\n\n        this.addScrollEventListeners(anchor);\n        if (useAnchorParent) {\n            anchor = anchor.parentNode;\n        }\n        // explicitly override anchor's style to static\n        anchor.style.position = \"static\";\n\n        const anchorRect = anchor.getBoundingClientRect();\n        const popoverRect = this.element.getBoundingClientRect();\n\n        // position of left top corner of anchor + the offset\n        let leftDiff: number = anchorRect.left - popoverRect.left + offsetX;\n        let topDiff: number = anchorRect.top - popoverRect.top + offsetY;\n\n        // first, adjust positioning based on anchor's align point\n        switch (anchorAlign) {\n            case Point.LEFT_TOP:\n            case Point.TOP_LEFT:\n                break;\n            case Point.TOP_CENTER:\n                leftDiff += anchorRect.width / 2;\n                break;\n            case Point.TOP_RIGHT:\n                leftDiff += anchorRect.width;\n                break;\n            case Point.RIGHT_TOP:\n                leftDiff += anchorRect.width;\n                break;\n            case Point.LEFT_BOTTOM:\n                topDiff += anchorRect.height;\n                break;\n            case Point.BOTTOM_LEFT:\n                topDiff += anchorRect.height;\n                break;\n            case Point.BOTTOM_CENTER:\n                topDiff += anchorRect.height;\n                leftDiff += anchorRect.width / 2;\n                break;\n            case Point.BOTTOM_RIGHT:\n                topDiff += anchorRect.height;\n                leftDiff += anchorRect.width;\n                break;\n            case Point.RIGHT_BOTTOM:\n                topDiff += anchorRect.height;\n                leftDiff += anchorRect.width;\n                break;\n            case Point.LEFT_CENTER:\n                topDiff += anchorRect.height / 2;\n                break;\n            case Point.RIGHT_CENTER:\n                topDiff += anchorRect.height / 2;\n                leftDiff += anchorRect.width;\n                break;\n            default:\n        }\n\n        // second, adjust positioning based on popover's align point\n        switch (popoverAlign) {\n            case Point.LEFT_TOP:\n            case Point.TOP_LEFT:\n                break;\n            case Point.TOP_CENTER:\n                leftDiff -= popoverRect.width / 2;\n                break;\n            case Point.TOP_RIGHT:\n                leftDiff -= popoverRect.width;\n                break;\n            case Point.RIGHT_TOP:\n                leftDiff -= popoverRect.width;\n                break;\n            case Point.LEFT_BOTTOM:\n                topDiff -= popoverRect.height;\n                break;\n            case Point.BOTTOM_LEFT:\n                topDiff -= popoverRect.height;\n                break;\n            case Point.BOTTOM_CENTER:\n                topDiff -= popoverRect.height;\n                leftDiff -= popoverRect.width / 2;\n                break;\n            case Point.BOTTOM_RIGHT:\n                topDiff -= popoverRect.height;\n                leftDiff -= popoverRect.width;\n                break;\n            case Point.RIGHT_BOTTOM:\n                topDiff -= popoverRect.height;\n                leftDiff -= popoverRect.width;\n                break;\n            case Point.LEFT_CENTER:\n                topDiff -= popoverRect.height / 2;\n                break;\n            case Point.RIGHT_CENTER:\n                topDiff -= popoverRect.height / 2;\n                leftDiff -= popoverRect.width;\n                break;\n            default:\n        }\n\n        // Third, adjust with popover's margins based on the two align points.\n        // Here, we make an assumption that popover is primarily positioned outside the\n        // anchor with minor offset. Without this assumption, it's impossible to apply\n        // the popover's margins in a predictable way. For example, assume that a popover\n        // and its anchor are exactly the same size. if a popover is positioned inside the\n        // anchor (which is technically possible), then it becomes impossible to know what to do\n        // if the popover has a non-zero margin value all around (because applying the margin in\n        // all four directions will result in no margin visually, which isn't what we want).\n        // Therefore, our logic makes assumptions about margins of interest given the points,\n        // and only covers the cases where popover is outside the anchor.\n\n        const popoverComputedStyle = getComputedStyle(this.element);\n        const marginLeft = parseInt(popoverComputedStyle.marginLeft, 10);\n        const marginRight = parseInt(popoverComputedStyle.marginRight, 10);\n        const marginTop = parseInt(popoverComputedStyle.marginTop, 10);\n        const marginBottom = parseInt(popoverComputedStyle.marginBottom, 10);\n\n        switch (anchorAlign) {\n            case Point.LEFT_TOP:\n            case Point.TOP_LEFT:\n            case Point.TOP_RIGHT:\n            case Point.RIGHT_TOP:\n                if (popoverAlign === Point.BOTTOM_RIGHT || popoverAlign === Point.RIGHT_BOTTOM) {\n                    topDiff -= marginBottom;\n                    leftDiff -= marginRight;\n                }\n                if (popoverAlign === Point.BOTTOM_LEFT || popoverAlign === Point.LEFT_BOTTOM) {\n                    topDiff -= marginTop;\n                    leftDiff += marginLeft;\n                }\n                if (popoverAlign === Point.TOP_LEFT || popoverAlign === Point.LEFT_TOP) {\n                    topDiff += marginTop;\n                    leftDiff += marginLeft;\n                }\n                if (popoverAlign === Point.TOP_RIGHT || popoverAlign === Point.RIGHT_TOP) {\n                    topDiff += marginTop;\n                    leftDiff -= marginRight;\n                }\n                break;\n            case Point.LEFT_BOTTOM:\n            case Point.BOTTOM_LEFT:\n            case Point.BOTTOM_RIGHT:\n            case Point.RIGHT_BOTTOM:\n                if (popoverAlign === Point.BOTTOM_LEFT || popoverAlign === Point.LEFT_BOTTOM) {\n                    topDiff -= marginBottom;\n                    leftDiff += marginLeft;\n                }\n                if (popoverAlign === Point.BOTTOM_RIGHT || popoverAlign === Point.RIGHT_BOTTOM) {\n                    topDiff -= marginBottom;\n                    leftDiff -= marginRight;\n                }\n                if (popoverAlign === Point.TOP_LEFT || popoverAlign === Point.LEFT_TOP) {\n                    topDiff += marginTop;\n                    leftDiff += marginLeft;\n                }\n                if (popoverAlign === Point.TOP_RIGHT || popoverAlign === Point.RIGHT_TOP) {\n                    topDiff += marginTop;\n                    leftDiff -= marginRight;\n                }\n                break;\n            case Point.TOP_CENTER:\n                topDiff -= marginBottom;\n                leftDiff += marginLeft;\n                leftDiff -= marginRight;\n                break;\n            case Point.BOTTOM_CENTER:\n                topDiff += marginTop;\n                leftDiff += marginLeft;\n                leftDiff -= marginRight;\n                break;\n            case Point.LEFT_CENTER:\n                topDiff += marginTop;\n                topDiff -= marginBottom;\n                leftDiff -= marginRight;\n                break;\n            case Point.RIGHT_CENTER:\n                topDiff += marginTop;\n                topDiff -= marginBottom;\n                leftDiff += marginLeft;\n                break;\n            default:\n        }\n\n        this.element.style.transform = `translateX(${leftDiff}px) translateY(${topDiff}px)`;\n        return this._scroll.asObservable();\n    }\n\n    public release() {\n        this.element.style.transform = \"\";\n        this.removeScrollEventListeners();\n    }\n\n    private isPositioned(container: any) {\n        const position = getComputedStyle(container).position;\n        return position === POSITION_RELATIVE || position === POSITION_ABSOLUTE || position === POSITION_FIXED;\n    }\n\n    /*\n     * Containers up to the first positioned one will have an event on scroll\n     */\n\n    private scrollableElements: HTMLElement[] = [];\n\n    private emitScrollEvent() {\n        this._scroll.next();\n    }\n\n    private boundOnScrollListener: any = this.emitScrollEvent.bind(this);\n\n    private addScrollEventListeners(e: any) {\n        this._scroll = new Subject<void>();\n        const anchor: any = e;\n        let current: any = e;\n        while (current && current !== document) {\n            if (this.scrolls(current)) {\n                current.addEventListener(\"scroll\", this.boundOnScrollListener);\n                this.scrollableElements.push(current);\n            }\n            if (current !== anchor && this.isPositioned(current)) {\n                break;\n            }\n            current = current.parentNode;\n        }\n    }\n\n    private removeScrollEventListeners() {\n        for (const elem of this.scrollableElements) {\n            elem.removeEventListener(\"scroll\", this.boundOnScrollListener);\n        }\n        this.scrollableElements.length = 0;\n        if (this._scroll) {\n            this._scroll.complete();\n            delete this._scroll;\n        }\n    }\n\n    private scrolls(container: any): boolean {\n        const computedStyles = getComputedStyle(container);\n        return computedStyles.overflowX === OVERFLOW_SCROLL || computedStyles.overflowX === OVERFLOW_AUTO ||\n            computedStyles.overflowY === OVERFLOW_SCROLL || computedStyles.overflowY === OVERFLOW_AUTO;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, EmbeddedViewRef, EventEmitter, Input, Output, TemplateRef, ViewContainerRef} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {Point, Popover} from \"./popover\";\nimport {PopoverOptions} from \"./popover-options.interface\";\n\nlet openCount: number = 0;\nconst waiting: Array<() => void> = [];  // pending create functions\n\n@Directive({selector: \"[clrPopoverOld]\"})\nexport class PopoverDirectiveOld {\n    private _popoverInstance: Popover;\n    private _subscription: Subscription;\n\n    @Input(\"clrPopoverOldAnchor\") anchorElem: any;\n    @Input(\"clrPopoverOldAnchorPoint\") anchorPoint: Point;\n    @Input(\"clrPopoverOldPopoverPoint\") popoverPoint: Point;\n    @Input(\"clrPopoverOldOptions\") popoverOptions: PopoverOptions = {};\n    @Output(\"clrPopoverOldChange\") clrPopoverOldChange = new EventEmitter<boolean>(false);\n\n\n    constructor(private templateRef: TemplateRef<any>, private viewContainer: ViewContainerRef) {}\n\n    @Input()\n    set clrPopoverOld(open: boolean) {\n        if (open) {\n            if (this.popoverOptions.allowMultipleOpen) {\n                this.createPopover();\n            } else {\n                if (openCount === 0) {\n                    this.createPopover();\n                } else {\n                    waiting.push(() => {\n                        this.createPopover();\n                    });\n                }\n            }\n        } else {\n            this.viewContainer.clear();\n            this.destroyPopover();\n\n            if (!this.popoverOptions.allowMultipleOpen) {\n                if (waiting.length > 0) {\n                    const createPopoverFn = waiting.shift();\n                    createPopoverFn();\n                }\n            }\n        }\n    }\n\n    createPopover() {\n        const embeddedViewRef: EmbeddedViewRef<any> =\n            <EmbeddedViewRef<any>>this.viewContainer.createEmbeddedView(this.templateRef);\n\n        // TODO: Not sure of the risks associated with using this. Find an alternative.\n        // Needed for find the correct height and width of dynamically created views\n        // inside of the popover. For Eg: Button Groups\n        embeddedViewRef.detectChanges();\n\n        // filter out other nodes in the view ref so we are only left with element nodes\n        const elementNodes: HTMLElement[] = embeddedViewRef.rootNodes.filter((node: any) => {\n            return node.nodeType === 1;\n        });\n\n        // we take the first element node in the embedded view; usually there should only be one anyways\n        this._popoverInstance = new Popover(elementNodes[0]);\n        this._subscription =\n            this._popoverInstance.anchor(this.anchorElem, this.anchorPoint, this.popoverPoint, this.popoverOptions)\n                .subscribe(() => {\n                    this.clrPopoverOldChange.emit(false);\n                });\n        openCount++;\n    }\n\n    destroyPopover() {\n        if (this._popoverInstance) {\n            this._subscription.unsubscribe();\n            this._popoverInstance.release();\n            delete this._popoverInstance;\n            openCount--;\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyPopover();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Type} from \"@angular/core\";\nimport {PopoverDirectiveOld} from \"./popover-old.directive\";\n\nexport * from \"./popover-options.interface\";\nexport * from \"./popover-old.directive\";\n\nexport const POPOVER_DIRECTIVES: Type<any>[] = [PopoverDirectiveOld];\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\n\nimport {POPOVER_DIRECTIVES} from \"./index\";\n\n@NgModule({imports: [CommonModule], declarations: [POPOVER_DIRECTIVES], exports: [POPOVER_DIRECTIVES]})\nexport class ClrCommonPopoverModule {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * This is an abstract class because we need it to still be a valid token for dependency injection after transpiling.\n * This does not mean you should extend it, simply implementing it is fine.\n */\nexport abstract class LoadingListener {\n    abstract startLoading(): void;\n\n    abstract doneLoading(): void;\n}",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\n\nimport {ClrButton} from \"../button-group/button\";\n\n@Injectable()\nexport class ButtonInGroupService {\n    private _changes: Subject<ClrButton> = new Subject<ClrButton>();\n\n    get changes(): Observable<ClrButton> {\n        return this._changes.asObservable();\n    }\n\n    updateButtonGroup(button: ClrButton): void {\n        this._changes.next(button);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nimport {Component, EventEmitter, Input, Optional, Output, SkipSelf, TemplateRef, ViewChild} from \"@angular/core\";\n\nimport {LoadingListener} from \"../../utils/loading/loading-listener\";\nimport {ButtonInGroupService} from \"../providers/button-in-group.service\";\n\n@Component({\n    selector: \"clr-button\",\n    template: `\n        <ng-template #buttonProjectedRef>\n            <button \n                [class]=\"classNames\" \n                (click)=\"emitClick()\"\n                [attr.type]=\"type\"\n                [attr.name]=\"name\"\n                [attr.disabled]=\"disabled\">\n                <span class=\"spinner spinner-inline\" *ngIf=\"loading\"></span>\n                <ng-content></ng-content>\n            </button>\n        </ng-template>\n    `,\n    providers: [{provide: LoadingListener, useExisting: ClrButton}]\n})\nexport class ClrButton implements LoadingListener {\n    private _enableService: boolean = false;\n\n    @ViewChild(\"buttonProjectedRef\") templateRef: TemplateRef<ClrButton>;\n\n    constructor(@SkipSelf() @Optional() public buttonInGroupService: ButtonInGroupService) {}\n\n    private _inMenu: boolean = false;\n\n    get inMenu(): boolean {\n        return this._inMenu;\n    }\n\n    @Input(\"clrInMenu\")\n    set inMenu(value: boolean) {\n        value = !!value;\n        if (this._inMenu !== value) {\n            this._inMenu = value;\n            // We check if the service flag is enabled\n            // and if the service exists because the service is optional\n            if (this._enableService && this.buttonInGroupService) {\n                this.buttonInGroupService.updateButtonGroup(this);\n            }\n        }\n    }\n\n    private _classNames: string = \"btn\";\n\n    get classNames(): string {\n        return this._classNames;\n    }\n\n    @Input(\"class\")\n    set classNames(value: string) {\n        if (typeof value === \"string\") {\n            const classNames: string[] = value.split(\" \");\n            if (classNames.indexOf(\"btn\") === -1) {\n                classNames.push(\"btn\");\n            }\n            this._classNames = classNames.join(\" \");\n        }\n    }\n\n    private _name: string = null;\n\n    get name(): string {\n        return this._name;\n    }\n\n    @Input(\"name\")\n    set name(value: string) {\n        if (typeof value === \"string\") {\n            this._name = value;\n        }\n    }\n\n    private _type: string = null;\n\n    get type(): string {\n        return this._type;\n    }\n\n    @Input(\"type\")\n    set type(value: string) {\n        if (typeof value === \"string\") {\n            this._type = value;\n        }\n    }\n\n    private _disabled: any = null;\n\n    get disabled(): any {\n        return this._disabled;\n    }\n\n    @Input(\"disabled\")\n    set disabled(value: any) {\n        if (value !== null && value !== false) {\n            this._disabled = \"\";\n        } else {\n            this._disabled = null;\n        }\n    }\n\n    public loading: boolean;\n\n    startLoading(): void {\n        this.loading = true;\n    }\n\n    doneLoading(): void {\n        this.loading = false;\n    }\n\n    @Output(\"click\") _click: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n    emitClick(): void {\n        this._click.emit(true);\n    }\n\n    ngAfterViewInit() {\n        this._enableService = true;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nexport const CLR_MENU_POSITIONS: string[] =\n    [\"bottom-left\", \"bottom-right\", \"top-left\", \"top-right\", \"left-bottom\", \"left-top\", \"right-bottom\", \"right-top\"];\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Component, ContentChildren, ElementRef, HostListener, Input, QueryList} from \"@angular/core\";\n\nimport {Point} from \"../../popover/common/popover\";\nimport {CLR_MENU_POSITIONS} from \"../../popover/dropdown/menu-positions\";\nimport {ButtonInGroupService} from \"../providers/button-in-group.service\";\n\nimport {ClrButton} from \"./button\";\n\n@Component({\n    selector: \"clr-button-group\",\n    template: `<!--\n  ~ Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<ng-container *ngFor=\"let inlineButton of inlineButtons\">\n    <ng-template [ngTemplateOutlet]=\"inlineButton.templateRef\"></ng-template>\n</ng-container>\n<ng-container *ngIf=\"menuButtons.length > 0\">\n    <div\n        class=\"btn-group-overflow open\"\n        [ngClass]=\"menuPosition\"\n        #anchor>\n        <button\n            class=\"btn dropdown-toggle\"\n            (click)=\"toggleMenu()\">\n            <clr-icon shape=\"ellipsis-horizontal\"></clr-icon>\n        </button>\n        <div\n            class=\"dropdown-menu\"\n            *clrPopoverOld=\"openMenu; anchor: anchor; anchorPoint: anchorPoint; popoverPoint: popoverPoint;\">\n            <ng-template [ngTemplateOutlet]=\"ref\"></ng-template>\n        </div>\n    </div>\n</ng-container>\n<ng-template #ref>\n    <ng-container *ngFor=\"let menuButton of menuButtons\">\n        <ng-template [ngTemplateOutlet]=\"menuButton.templateRef\"></ng-template>\n    </ng-container>\n</ng-template>\n`,\n    providers: [ButtonInGroupService],\n    host: {\"[class.btn-group]\": \"true\"}\n})\nexport class ClrButtonGroup {\n    @ContentChildren(ClrButton) buttons: QueryList<ClrButton>;\n\n    constructor(public buttonGroupNewService: ButtonInGroupService, private elementRef: ElementRef) {}\n\n    inlineButtons: ClrButton[] = [];\n    menuButtons: ClrButton[] = [];\n\n    /**\n     * 1. Initializes the initial Button Group View\n     * 2. Subscribes to changes on the ContentChildren\n     *    in case the user content projection changes\n     */\n    ngAfterContentInit() {\n        this.initializeButtons();\n        this.buttonGroupNewService.changes.subscribe(button => this.rearrangeButton(button));\n        this.buttons.changes.subscribe(() => {\n            this.initializeButtons();\n        });\n    }\n\n    /**\n     * Moves the button into the other ViewContainer\n     * when an update is received.\n     *\n     * @param button\n     */\n    rearrangeButton(button: ClrButton): void {\n        let fromView: ClrButton[];\n        let toView: ClrButton[];\n        if (button.inMenu) {\n            fromView = this.inlineButtons;\n            toView = this.menuButtons;\n        } else {\n            fromView = this.menuButtons;\n            toView = this.inlineButtons;\n        }\n        const index: number = fromView.indexOf(button);\n        if (index > -1) {\n            fromView.splice(index, 1);\n            const moveIndex = this.getMoveIndex(button);\n            if (moveIndex <= toView.length) {\n                toView.splice(moveIndex, 0, button);\n            }\n        }\n    }\n\n    /**\n     * Author: Eudes\n     *\n     * Finds the order of a button w.r.t other buttons\n     *\n     * @param buttonToMove\n     * @returns\n     */\n    getMoveIndex(buttonToMove: ClrButton): number {\n        const tempArr: ClrButton[] = this.buttons.filter(button => (button.inMenu === buttonToMove.inMenu));\n        return tempArr.indexOf(buttonToMove);\n    }\n\n    initializeButtons(): void {\n        const tempInlineButtons: ClrButton[] = [];\n        const tempInMenuButtons: ClrButton[] = [];\n        this.buttons.forEach((button) => {\n            if (button.inMenu) {\n                tempInMenuButtons.push(button);\n            } else {\n                tempInlineButtons.push(button);\n            }\n        });\n        this.inlineButtons = tempInlineButtons;\n        this.menuButtons = tempInMenuButtons;\n    }\n\n    /**\n     * Overflow Menu\n     *\n     */\n\n    // Indicates the position of the overflow menu\n    private _menuPosition: string;\n\n    get menuPosition(): string {\n        return this._menuPosition;\n    }\n\n    @Input(\"clrMenuPosition\")\n    set menuPosition(pos: string) {\n        if (pos && (CLR_MENU_POSITIONS.indexOf(pos) > -1)) {\n            this._menuPosition = pos;\n        } else {\n            this._menuPosition = \"bottom-left\";\n        }\n        // set the popover values based on menu position\n        switch (this._menuPosition) {\n            case (\"top-right\"):\n                this.anchorPoint = Point.TOP_RIGHT;\n                this.popoverPoint = Point.RIGHT_BOTTOM;\n                break;\n            case (\"top-left\"):\n                this.anchorPoint = Point.TOP_LEFT;\n                this.popoverPoint = Point.LEFT_BOTTOM;\n                break;\n            case (\"bottom-right\"):\n                this.anchorPoint = Point.BOTTOM_RIGHT;\n                this.popoverPoint = Point.RIGHT_TOP;\n                break;\n            case (\"bottom-left\"):\n                this.anchorPoint = Point.BOTTOM_LEFT;\n                this.popoverPoint = Point.LEFT_TOP;\n                break;\n            case (\"right-top\"):\n                this.anchorPoint = Point.RIGHT_TOP;\n                this.popoverPoint = Point.LEFT_TOP;\n                break;\n            case (\"right-bottom\"):\n                this.anchorPoint = Point.RIGHT_BOTTOM;\n                this.popoverPoint = Point.LEFT_BOTTOM;\n                break;\n            case (\"left-top\"):\n                this.anchorPoint = Point.LEFT_TOP;\n                this.popoverPoint = Point.RIGHT_TOP;\n                break;\n            case (\"left-bottom\"):\n                this.anchorPoint = Point.LEFT_BOTTOM;\n                this.popoverPoint = Point.RIGHT_BOTTOM;\n                break;\n            default:\n                this.anchorPoint = Point.BOTTOM_LEFT;\n                this.popoverPoint = Point.LEFT_TOP;\n                break;\n        }\n    }\n\n    private _openMenu: boolean = false;\n\n    get openMenu(): boolean {\n        return this._openMenu;\n    }\n\n    set openMenu(value: boolean) {\n        this._openMenu = value;\n    }\n\n    public anchorPoint: Point = Point.BOTTOM_LEFT;  // default if menuPosition isn't set\n    public popoverPoint: Point = Point.LEFT_TOP;    // default if menuPosition isn't set\n\n    /**\n     * Toggle the ClrDropdown Menu when the ClrDropdown Toggle is\n     * clicked. Also set a flag that indicates that the toggle\n     * was clicked so that we don't traverse the DOM to find the\n     * location of the click.\n     */\n    toggleMenu(): void {\n        this.openMenu = !this.openMenu;\n        this._overflowMenuToggleClicked = true;\n    }\n\n    /**\n     * Flag with indicates if the overflow menu toggle was clicked.\n     * If true, this can save us traversing the DOM to find\n     * whether the click was withing the button group toggle\n     * or menu in the onMouseClick method\n     */\n    private _overflowMenuToggleClicked: boolean = false;\n\n    // TODO: Generic Directive to handle this\n    /**\n     * Called on mouse clicks anywhere in the DOM.\n     * Checks to see if the mouseclick happened on the host or outside\n     */\n    @HostListener(\"document:click\", [\"$event.target\"])\n    onMouseClick(target: any): void {\n        if (this.openMenu && !this._overflowMenuToggleClicked) {\n            // Reset the overflow menu toggle clicked flag\n            this._overflowMenuToggleClicked = false;\n            let current: any = target;  // Get the element in the DOM on which the mouse was clicked\n            const host: any = this.elementRef.nativeElement;  // Current Button Group\n\n            if (current.classList.contains(\"dropdown-menu\")) {\n                current = current.parentNode;\n                while (current) {\n                    if (current === document) {\n                        this.openMenu = false;\n                        return;\n                    }\n\n                    // If clicked on dropdown menu and menu is in host\n                    // do nothing\n                    if (current === host) {\n                        return;\n                    }\n                    current = current.parentNode;\n                }\n            }\n            this.openMenu = false;\n        }\n        this._overflowMenuToggleClicked = false;  // Reset the overflow menu toggle clicked flag\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule, Type} from \"@angular/core\";\n\nimport {ClrIconModule} from \"../../icon/icon.module\";\nimport {ClrCommonPopoverModule} from \"../../popover/common/popover.module\";\n\nimport {ClrButton} from \"./button\";\nimport {ClrButtonGroup} from \"./button-group\";\n\nexport const CLR_BUTTON_GROUP_DIRECTIVES: Type<any>[] = [ClrButton, ClrButtonGroup];\n\n@NgModule({\n    imports: [CommonModule, ClrIconModule, ClrCommonPopoverModule],\n    declarations: [CLR_BUTTON_GROUP_DIRECTIVES],\n    exports: [CLR_BUTTON_GROUP_DIRECTIVES]\n})\nexport class ClrButtonGroupModule {}\n\n/* tslint:disable variable-name */\n/** @deprecated since 0.11 */\nexport interface Button extends ClrButton {}\n/** @deprecated since 0.11 */\nexport const Button = ClrButton;\n/** @deprecated since 0.11 */\nexport interface ButtonGroup extends ClrButtonGroup {}\n/** @deprecated since 0.11 */\nexport const ButtonGroup = ClrButtonGroup;\n/* tslint:enable variable-name */\n/** @deprecated since 0.11 */\nexport const BUTTON_GROUP_DIRECTIVES = CLR_BUTTON_GROUP_DIRECTIVES;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, Input, OnDestroy, Optional} from \"@angular/core\";\n\nimport {LoadingListener} from \"./loading-listener\";\n\n@Directive({selector: \"[clrLoading]\"})\nexport class ClrLoading implements OnDestroy {\n    // We find the first parent that handles something loading\n    constructor(@Optional() private listener: LoadingListener) {}\n\n    private _loading = false;\n    public get loading() {\n        return this._loading;\n    }\n    @Input(\"clrLoading\")\n    public set loading(value: boolean) {\n        value = !!value;\n        if (value === this._loading) {\n            return;\n        }\n        this._loading = value;\n        if (this.listener) {\n            if (value) {\n                this.listener.startLoading();\n            } else {\n                this.listener.doneLoading();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.loading = false;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule, Type} from \"@angular/core\";\n\nimport {ClrLoading} from \"./loading\";\n\nexport const CLR_LOADING_DIRECTIVES: Type<any>[] = [ClrLoading];\n\n@NgModule({imports: [CommonModule], declarations: [CLR_LOADING_DIRECTIVES], exports: [CLR_LOADING_DIRECTIVES]})\nexport class ClrLoadingModule {}\n\n/* tslint:disable variable-name */\n/** @deprecated since 0.11 */\nexport interface Loading extends ClrLoading {}\n/** @deprecated since 0.11 */\nexport const Loading = ClrLoading;\n/* tslint:enable variable-name */\n/** @deprecated since 0.11 */\nexport const LOADING_DIRECTIVES = CLR_LOADING_DIRECTIVES;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nimport {Component} from \"@angular/core\";\nimport {LoadingListener} from \"../../utils/loading/loading-listener\";\n\n\n@Component({\n    selector: \"button[clrLoading]\",\n    template: `\n        <span class=\"spinner spinner-inline\" *ngIf=\"loading\"></span>\n        <ng-content></ng-content>\n    `,\n    providers: [{provide: LoadingListener, useExisting: ClrLoadingButton}]\n})\nexport class ClrLoadingButton implements LoadingListener {\n    public loading: Boolean;\n\n    startLoading(): void {\n        this.loading = true;\n    }\n\n    doneLoading(): void {\n        this.loading = false;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule, Type} from \"@angular/core\";\n\nimport {ClrLoadingModule} from \"../../utils/loading/loading.module\";\nimport {ClrLoadingButton} from \"./loading-button\";\n\nexport const CLR_LOADING_BUTTON_DIRECTIVES: Type<any>[] = [ClrLoadingButton];\n\n@NgModule({\n    imports: [CommonModule, ClrLoadingModule],\n    declarations: [CLR_LOADING_BUTTON_DIRECTIVES],\n    exports: [CLR_LOADING_BUTTON_DIRECTIVES, ClrLoadingModule]\n})\nexport class ClrLoadingButtonModule {}\n\n/* tslint:disable variable-name */\n/** @deprecated since 0.11 */\nexport interface LoadingButton extends ClrLoadingButton {}\n/** @deprecated since 0.11 */\nexport const LoadingButton = ClrLoadingButton;\n/* tslint:enable variable-name */\n/** @deprecated since 0.11 */\nexport const LOADING_BUTTON_DIRECTIVES = CLR_LOADING_BUTTON_DIRECTIVES;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {NgModule} from \"@angular/core\";\n\nimport {ClrButtonGroupModule} from \"./button-group/button-group.module\";\nimport {ClrLoadingButtonModule} from \"./button-loading/loading-button.module\";\n\n@NgModule({\n    exports: [\n        ClrLoadingButtonModule,\n        ClrButtonGroupModule,\n    ]\n})\nexport class ClrButtonModule {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {isPlatformBrowser} from \"@angular/common\";\nimport {Directive, ElementRef, Inject, Input, PLATFORM_ID, Renderer2} from \"@angular/core\";\n\ndeclare var Prism: any;\n\n@Directive({selector: \"code[clr-code-highlight]\"})\nexport class ClrCodeHighlight {\n    private _highlight: string = \"\";\n\n    // Had to use renderer because I wanted to add to existing classes on the code block\n    // Didn't want to override them completely\n    constructor(private _el: ElementRef, private renderer: Renderer2, @Inject(PLATFORM_ID) private platformId: Object) {\n    }\n\n    ngAfterContentInit(): void {\n        this.redraw();\n    }\n\n    public redraw() {\n        // Only run Prism in browser engines\n        if (this._el && this._el.nativeElement && isPlatformBrowser(this.platformId)) {\n            Prism.highlightElement(this._el.nativeElement);\n        }\n    }\n\n\n    @Input(\"clr-code-highlight\")\n    set highlight(val: string) {\n        if (val && val.trim() !== \"\") {\n            this._highlight = val;\n            this.renderer.addClass(this._el.nativeElement, this._highlight);\n        }\n    }\n\n    get highlight(): string {\n        return this._highlight;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule, Type} from \"@angular/core\";\nimport {ClrCodeHighlight} from \"./syntax-highlight\";\n\nexport const CLR_CODE_HIGHLIGHT_DIRECTIVES: Type<any>[] = [ClrCodeHighlight];\n\n@NgModule(\n    {imports: [CommonModule], declarations: [CLR_CODE_HIGHLIGHT_DIRECTIVES], exports: [CLR_CODE_HIGHLIGHT_DIRECTIVES]})\nexport class ClrSyntaxHighlightModule {}\n\n/* tslint:disable variable-name */\n/** @deprecated since 0.11 */\nexport interface CodeHighlight extends ClrCodeHighlight {}\n/** @deprecated since 0.11 */\nexport const CodeHighlight = ClrCodeHighlight;\n/* tslint:enable variable-name */\n/** @deprecated since 0.11 */\nexport const CODE_HIGHLIGHT_DIRECTIVES = CLR_CODE_HIGHLIGHT_DIRECTIVES;",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nimport {NgModule} from \"@angular/core\";\nimport {ClrSyntaxHighlightModule} from \"./syntax-highlight/syntax-highlight.module\";\n\n@NgModule({exports: [ClrSyntaxHighlightModule]})\nexport class ClrCodeModule {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Injectable, InjectionToken} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\n\nlet activeCounter = 0;\n\nexport const IF_ACTIVE_ID = new InjectionToken<number>(\"IF_ACTIVE_ID\");\n\nexport function tokenFactory() {\n    return ++activeCounter;\n}\n\nexport const IF_ACTIVE_ID_PROVIDER = {\n    provide: IF_ACTIVE_ID,\n    useFactory: tokenFactory\n};\n\n@Injectable()\n\n/*********\n * @class IfActiveService\n *\n * @description\n * An injectable service used by IfActive structural directives and the components that implement IfActive in their\n * templates. It holds the value of the current state and provides an Observable that both the directive and the\n * implementing component can subscribe to in order to take action on current value changes.\n *\n */\nexport class IfActiveService {\n    /********\n     * @property _currentChange\n     *\n     * @description\n     * A RXJS Subject that updates and provides subscriptions to for the current current state of a component template\n     * implemting the IfActive structural directive.\n     *\n     */\n    private _currentChange: Subject<number> = new Subject<number>();\n\n    /*********\n     * @property _current\n     *\n     * @description\n     * A property holding the current value for current/closed state of an IfActive structural directive.\n     */\n    private _current: number;\n\n    /*********\n     *\n     * @description\n     * A getter function that provides an observable for the _current Subject.\n     *\n     */\n    public get currentChange(): Observable<number> {\n        return this._currentChange.asObservable();\n    }\n\n    /*********\n     *\n     * @description\n     * A setter function that updates the current state of _current for this instance of IfActive structural directive.\n     * And, broadcasts the new value to all subscribers.\n     *\n     * @param value\n     */\n    public set current(value: number) {\n        if (this._current !== value) {\n            this._current = value;\n            this._currentChange.next(value);\n        }\n    }\n\n    /*********\n     *\n     * @description\n     * A getter that returns the current value of this IfActive instance.\n     * @returns\n     */\n    public get current(): number {\n        return this._current;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, EventEmitter, Inject, Input, OnDestroy, Output, TemplateRef, ViewContainerRef} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {IF_ACTIVE_ID, IfActiveService} from \"./if-active.service\";\n\n@Directive({selector: \"[clrIfActive]\"})\n\n/**********\n *\n * @class IfActiveDirective\n *\n * @description\n * A structural directive that controls whether or not the associated TemplateRef is instantiated or not.\n * It makes use of a Component instance level service: IfActiveService to maintain state between itself and\n * the component using it in the component template.\n *\n */\nexport class IfActiveDirective implements OnDestroy {\n    private subscription: Subscription;\n    private wasActive: boolean = false;\n\n    constructor(private ifActiveService: IfActiveService, @Inject(IF_ACTIVE_ID) private id: number,\n                private template: TemplateRef<any>, private container: ViewContainerRef) {\n        this.checkAndUpdateView(ifActiveService.current);\n\n        this.subscription = this.ifActiveService.currentChange.subscribe((newCurrentId) => {\n            this.checkAndUpdateView(newCurrentId);\n        });\n    }\n\n    private checkAndUpdateView(currentId: number) {\n        const isNowActive = currentId === this.id;\n        // only emit if the new active state is changed since last time.\n        if (isNowActive !== this.wasActive) {\n            this.updateView(isNowActive);\n            this.activeChange.emit(isNowActive);\n            this.wasActive = isNowActive;\n        }\n    }\n\n    /*********\n     *\n     * @description\n     * A setter that updates IfActiveService.active with value.\n     *\n     * @param value\n     */\n    @Input(\"clrIfActive\")\n    public set active(value: boolean) {\n        if (value) {\n            this.ifActiveService.current = this.id;\n        }\n    }\n\n    /**********\n     * @property activeChange\n     *\n     * @description\n     * An event emitter that emits when the active property is set to allow for 2way binding when the directive is\n     * used with de-structured / de-sugared syntax.\n     *\n     */\n    @Output(\"clrIfActiveChange\") activeChange: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n    /********\n     *\n     * @description\n     * A getter that returns the current IfActiveService.active value.\n     */\n    public get active() {\n        return this.ifActiveService.current === this.id;\n    }\n\n    /*********\n     *\n     * @description\n     * Function that takes a any value and either created an embedded view for the associated ViewContainerRef or,\n     * Clears all views from the ViewContainerRef\n     * @param value\n     */\n    public updateView(value: boolean) {\n        if (value) {\n            this.container.createEmbeddedView(this.template);\n        } else {\n            this.container.clear();\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\n\n@Injectable()\n\n/*********\n * @class IfOpenService\n *\n * @description\n * An injectable service used by IfOpen structural directives and the components that implemnt IfOpen in their\n * templates. It holds the value of the open state and provides an Observable that both the directive and the\n * implementing component can subscribe to in order to take action on open value changes.\n *\n */\nexport class IfOpenService {\n    /********\n     * @property _openChange\n     *\n     * @description\n     * A RXJS Subject that updates and provides subscriptions to for the current open state of a component template\n     * implemting the IfOpen structural directive.\n     */\n    private _openChange: Subject<boolean> = new Subject<boolean>();\n\n    /*********\n     * @property _open\n     *\n     * @description\n     * A property holding the current value for open/closed state of an IfOpen structural directive.\n     *\n     */\n    private _open: boolean;\n\n    /*********\n     *\n     * @description\n     * A getter function that provides an observable for the _opened Subject.\n     *\n     */\n    public get openChange(): Observable<boolean> {\n        return this._openChange.asObservable();\n    }\n\n    /*********\n     *\n     * @description\n     * A setter function that updates the current state of _open for this instance of IfOpen structural directive. And,\n     * broadcasts the new value to all subscribers.\n     *\n     * @param value\n     */\n    public set open(value: boolean) {\n        value = !!value;\n        if (this._open !== value) {\n            this._open = value;\n            this._openChange.next(value);\n        }\n    }\n\n    /*********\n     *\n     * @description\n     * A getter that returns the current value of this IfOpen instance.\n     *\n     */\n    public get open(): boolean {\n        return this._open;\n    }\n\n    /**\n     * Sometimes, we need to remember the event that triggered the toggling to avoid loops.\n     * This is for instance the case of components that open on a click, but close on a click outside.\n     */\n    public originalEvent: any;\n    public toggleWithEvent(event: any) {\n        this.originalEvent = event;\n        this.open = !this.open;\n        delete this.originalEvent;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, EventEmitter, Input, OnDestroy, Output, TemplateRef, ViewContainerRef} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {IfOpenService} from \"./if-open.service\";\n\n@Directive({selector: \"[clrIfOpen]\"})\n\n/**********\n *\n * @class IfOpenDirective\n *\n * @description\n * A structural directive that controls whether or not the associated TemplateRef is instantiated or not.\n * It makes use of a Component instance level service: IfOpenService to maintain state between itself and the component\n * using it in the component template.\n *\n */\nexport class IfOpenDirective implements OnDestroy {\n    private subscription: Subscription;\n\n    /*********\n     *\n     * @description\n     * A setter that updates IfOpenService.open with value.\n     *\n     * @param value\n     */\n    @Input(\"clrIfOpen\")\n    public set open(value: boolean) {\n        this.ifOpenService.open = value;\n    }\n\n    /**********\n     * @property openChange\n     *\n     * @description\n     * An event emitter that emits when the open property is set to allow for 2way binding when the directive is\n     * used with de-structured / de-sugared syntax.\n     */\n    @Output(\"clrIfOpenChange\") openChange: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n    /********\n     *\n     * @description\n     * A getter that returns the current IfOpenService.open value.\n     *\n     */\n    public get open() {\n        return this.ifOpenService.open;\n    }\n\n    constructor(private ifOpenService: IfOpenService, private template: TemplateRef<any>,\n                private container: ViewContainerRef) {\n        this.subscription = this.ifOpenService.openChange.subscribe((change) => {\n            this.updateView(change);\n            this.openChange.emit(change);\n        });\n    }\n\n    /*********\n     *\n     * @description\n     * Function that takes a boolean value and either created an embedded view for the associated ViewContainerRef or,\n     * Clears all views from the ViewContainerRef\n     * @param value\n     */\n    public updateView(value: boolean) {\n        if (value) {\n            this.container.createEmbeddedView(this.template);\n        } else {\n            this.container.clear();\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Type} from \"@angular/core\";\nimport {IfActiveDirective} from \"./if-active.directive\";\nimport {IfOpenDirective} from \"./if-open.directive\";\n\nexport * from \"./if-active.directive\";\nexport * from \"./if-open.directive\";\n\nexport const CONDITIONAL_DIRECTIVES: Type<any>[] = [IfActiveDirective, IfOpenDirective];\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\n\nimport {CONDITIONAL_DIRECTIVES} from \"./index\";\n\n@NgModule({imports: [CommonModule], declarations: [CONDITIONAL_DIRECTIVES], exports: [CONDITIONAL_DIRECTIVES]})\nexport class ClrConditionalModule {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Injectable} from \"@angular/core\";\nimport {FocusTrapDirective} from \"./focus-trap.directive\";\n\n@Injectable()\nexport class FocusTrapTracker {\n    private _previousFocusTraps: FocusTrapDirective[] = [];\n    private _current: FocusTrapDirective;\n\n    get current(): FocusTrapDirective {\n        return this._current;\n    }\n\n    set current(value: FocusTrapDirective) {\n        this._previousFocusTraps.push(this._current);\n        this._current = value;\n    }\n\n    activatePreviousTrapper() {\n        this._current = this._previousFocusTraps.pop();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {DOCUMENT, isPlatformBrowser} from \"@angular/common\";\nimport {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    HostListener,\n    Inject,\n    Injector,\n    OnDestroy,\n    PLATFORM_ID\n} from \"@angular/core\";\n\nimport {FocusTrapTracker} from \"./focus-trap-tracker.service\";\n\n@Directive({selector: \"[clrFocusTrap]\"})\nexport class FocusTrapDirective implements AfterViewInit, OnDestroy {\n    private _previousActiveElement: HTMLElement;\n    private document: Document;\n\n    constructor(public elementRef: ElementRef, injector: Injector, private focusTrapsTracker: FocusTrapTracker,\n                @Inject(PLATFORM_ID) private platformId: Object) {\n        this.document = injector.get(DOCUMENT);\n        this.focusTrapsTracker.current = this;\n    }\n\n    @HostListener(\"document:focusin\", [\"$event\"])\n    onFocusIn(event: any) {\n        const nativeElement: HTMLElement = this.elementRef.nativeElement;\n\n        if (this.focusTrapsTracker.current === this && !nativeElement.contains(event.target)) {\n            nativeElement.focus();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (isPlatformBrowser(this.platformId)) {\n            this._previousActiveElement = <HTMLElement>document.activeElement;\n            const nativeElement: HTMLElement = this.elementRef.nativeElement;\n            nativeElement.setAttribute(\"tabindex\", \"0\");\n        }\n    }\n\n    public setPreviousFocus(): void {\n        if (this._previousActiveElement && this._previousActiveElement.focus) {\n            this._previousActiveElement.focus();\n        }\n    }\n\n    ngOnDestroy() {\n        this.setPreviousFocus();\n        this.focusTrapsTracker.activatePreviousTrapper();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Type} from \"@angular/core\";\nimport {FocusTrapDirective} from \"./focus-trap.directive\";\n\nexport const FOCUS_TRAP_DIRECTIVES: Type<any>[] = [FocusTrapDirective];\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\nimport {FocusTrapTracker} from \"./focus-trap-tracker.service\";\n\nimport {FOCUS_TRAP_DIRECTIVES} from \"./index\";\n\n@NgModule({\n    imports: [CommonModule],\n    providers: [FocusTrapTracker],\n    declarations: [FOCUS_TRAP_DIRECTIVES],\n    exports: [FOCUS_TRAP_DIRECTIVES]\n})\nexport class ClrFocusTrapModule {}\n",
    "/**\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Component} from \"@angular/core\";\n\n@Component({\n    template: \"\",\n})\nexport class EmptyAnchor {}\n",
    "/**\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {NgModule} from \"@angular/core\";\n\nimport {EmptyAnchor} from \"./empty-anchor\";\n\n\n/**\n * Internal module, please do not export!\n */\n@NgModule({declarations: [EmptyAnchor], exports: [EmptyAnchor], entryComponents: [EmptyAnchor]})\nexport class ClrHostWrappingModule {}\n",
    "/*\n * Copyright (c) 2017 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nexport const UP_ARROW: number = 38;\nexport const DOWN_ARROW: number = 40;\nexport const RIGHT_ARROW: number = 39;\nexport const LEFT_ARROW: number = 37;\nexport const ENTER: number = 13;\nexport const SPACE: number = 32;\nexport const TAB: number = 9;\nexport const ESC: number = 27;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * This is the en-001 short locale date format. Setting as default.\n */\nexport const DEFAULT_LOCALE_FORMAT: string = \"dd/MM/y\";\n\n// https://en.wikipedia.org/wiki/Date_format_by_country\nexport const LITTLE_ENDIAN_REGEX: RegExp = /d+.+m+.+y+/i;\nexport const MIDDLE_ENDIAN_REGEX: RegExp = /m+.+d+.+y+/i;\n// No need for BIG_ENDIAN_REGEX because anything that doesn't satisfy the above 2\n// is automatically BIG_ENDIAN\n\nexport const DELIMITER_REGEX: RegExp = /d+|m+|y+/i;\n\nexport const USER_INPUT_REGEX: RegExp = /\\d+/g;\n\nexport const MOBILE_USERAGENT_REGEX: RegExp = /Mobi/i;\n\nexport const RTL_REGEX: RegExp = /\\u200f/g;\n\nexport const YEAR: string = \"YYYY\";\nexport const MONTH: string = \"MM\";\nexport const DATE: string = \"DD\";\n\nexport type FormatType = \"LITTLE_ENDIAN\"|\"MIDDLE_ENDIAN\"|\"BIG_ENDIAN\";\n\nexport type InputDateDisplayFormat = {\n    readonly name: FormatType; readonly format: [string, string, string]\n};\n\nexport const LITTLE_ENDIAN: InputDateDisplayFormat = {\n    name: \"LITTLE_ENDIAN\",\n    format: [DATE, MONTH, YEAR]\n};\n\nexport const MIDDLE_ENDIAN: InputDateDisplayFormat = {\n    name: \"MIDDLE_ENDIAN\",\n    format: [MONTH, DATE, YEAR]\n};\n\nexport const BIG_ENDIAN: InputDateDisplayFormat = {\n    name: \"BIG_ENDIAN\",\n    format: [YEAR, MONTH, DATE]\n};\n\nexport const NO_OF_DAYS_IN_A_WEEK: number = 7;\nexport const NO_OF_ROWS_IN_CALENDAR_VIEW: number = 6;\nexport const TOTAL_DAYS_IN_DAYS_VIEW: number = NO_OF_DAYS_IN_A_WEEK * NO_OF_ROWS_IN_CALENDAR_VIEW;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {WeekDay} from \"@angular/common\";\n\n/**\n * Returns the number of days in a month.\n */\nexport function getNumberOfDaysInTheMonth(year: number, month: number): number {\n    // If we go to the next month, but use a day of 0, it returns the last day from the previous month\n    return (new Date(year, month + 1, 0)).getDate();\n}\n\n/**\n * Returns the day for the corresponding date where 0 represents Sunday.\n */\nexport function getDay(year: number, month: number, date: number): WeekDay {\n    return (new Date(year, month, date)).getDay();\n}\n\n/**\n * Takes in a year and if it is a 2 digit year, returns the corresponding 4 digit year.\n * Window of 80 years before and 20 years after the present year.\n * Credit: https://github.com/globalizejs/globalize/blob/e1b31cd6a4f1cff75b185b68b7a32220aac5196f/src/date/parse.js\n */\nexport function parseToFourDigitYear(year: number): number {\n    if (year > 9999 || (year > 100 && year < 999) || year < 10) {\n        return -1;\n    }\n    if (year > 999) {\n        return year;\n    }\n    const currYear: number = (new Date()).getFullYear();\n    const century: number = Math.floor(currYear / 100) * 100;\n    let result: number = year + century;\n    if (result > currYear + 20) {\n        result = result - 100;\n    }\n    return result;\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {DayModel} from \"./day.model\";\n\nexport class DayViewModel {\n    constructor(public dayModel: DayModel, public isTodaysDate: boolean = false, public isDisabled: boolean = false,\n                public isSelected: boolean = false, public isFocusable: boolean = false) {}\n\n    /**\n     * Gets the tab index based on the isFocusable flag.\n     */\n    get tabIndex(): number {\n        return this.isFocusable ? 0 : -1;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {getNumberOfDaysInTheMonth} from \"../utils/date-utils\";\n\nimport {DayModel} from \"./day.model\";\n\nexport class CalendarModel {\n    constructor(public readonly year: number, public readonly month: number) {\n        this.initializeDaysInCalendar();\n    }\n\n    days: DayModel[];\n\n    /**\n     * Populates the days array with the DayModels in the current Calendar.\n     */\n    private initializeDaysInCalendar(): void {\n        const noOfDaysInCalendar: number = getNumberOfDaysInTheMonth(this.year, this.month);\n        this.days = Array(noOfDaysInCalendar).fill(null).map((date, index) => {\n            return new DayModel(this.year, this.month, index + 1);\n        });\n    }\n\n    /**\n     * Checks if the calendar passed is equal to the current calendar.\n     */\n    isEqual(calendar: CalendarModel) {\n        if (calendar) {\n            return this.year === calendar.year && this.month === calendar.month;\n        }\n        return false;\n    }\n\n    /**\n     * Checks if a DayModel is in the Calendar\n     */\n    isDayInCalendar(day: DayModel): boolean {\n        if (day) {\n            return (this.year === day.year && this.month === day.month);\n        }\n        return false;\n    }\n\n    /**\n     * Returns CalendarModel of the previous month.\n     */\n    previousMonth(): CalendarModel {\n        if (this.month === 0) {\n            return new CalendarModel(this.year - 1, 11);\n        } else {\n            return new CalendarModel(this.year, this.month - 1);\n        }\n    }\n\n    /**\n     * Returns CalendarModel of the next month.\n     */\n    nextMonth(): CalendarModel {\n        if (this.month === 11) {\n            return new CalendarModel(this.year + 1, 0);\n        } else {\n            return new CalendarModel(this.year, this.month + 1);\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CalendarModel} from \"./calendar.model\";\n\nexport class DayModel {\n    constructor(public readonly year: number, public readonly month: number, public readonly date: number) {}\n\n    /**\n     * Returns the Calendar for the current DayModel.\n     */\n    get calendar(): CalendarModel {\n        return new CalendarModel(this.year, this.month);\n    }\n\n    /**\n     * Checks if the passed CalendarDate is equal to itself.\n     */\n    isEqual(day: DayModel) {\n        if (day) {\n            return ((this.year === day.year) && (this.month === day.month) && (this.date === day.date));\n        }\n        return false;\n    }\n\n    /**\n     * Converts the CalendarDate into the Javascript Date object.\n     */\n    toDate(): Date {\n        return new Date(this.year, this.month, this.date);\n    }\n\n    /**\n     * Returns a new DayModel which is incremented based on the value passed.\n     */\n    incrementBy(value: number): DayModel {\n        // Creating new Javascript Date object to increment because\n        // it will automatically take care of switching to next or previous\n        // months & years without we having to worry about it.\n        const date: Date = new Date(this.year, this.month, this.date + value);\n        return new DayModel(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n\n    /**\n     * Clones the current day model.\n     */\n    clone(): DayModel {\n        return new DayModel(this.year, this.month, this.date);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {NO_OF_DAYS_IN_A_WEEK, NO_OF_ROWS_IN_CALENDAR_VIEW, TOTAL_DAYS_IN_DAYS_VIEW} from \"../utils/constants\";\nimport {getDay} from \"../utils/date-utils\";\n\nimport {CalendarModel} from \"./calendar.model\";\nimport {DayViewModel} from \"./day-view.model\";\nimport {DayModel} from \"./day.model\";\n\nexport class CalendarViewModel {\n    constructor(public calendar: CalendarModel, private selectedDay: DayModel, private focusableDay: DayModel,\n                private today: DayModel, public firstDayOfWeek: number) {\n        this.initializeCalendarView();\n    }\n\n    private currMonthDayViews: DayViewModel[] = [];\n\n    private _calendarView: DayViewModel[][];\n\n    /**\n     * DayViewModel matrix. Size 6x7\n     */\n    get calendarView(): DayViewModel[][] {\n        return this._calendarView;\n    }\n\n    /**\n     * Generates a 6x7 matrix of DayViewModel based on the Calendar.\n     * The 6x7 matrix is structured according to the first day of the week.\n     * 6 rows to accommodate months which might have dates spanning over 6 weeks.\n     * 7 columns because there are 7 days in a week :P :D\n     */\n    private initializeCalendarView(): void {\n        // Generate prev and next month calendar models.\n        const prevMonthCalendar: CalendarModel = this.calendar.previousMonth();\n        const nextMonthCalendar: CalendarModel = this.calendar.nextMonth();\n\n        // Get no of days from prev and next months.\n        const daysFromPrevMonthInCalView: number =\n            this.numDaysFromPrevMonthInCalView(this.calendar.year, this.calendar.month);\n        const daysFromNextMonthInCalView: number =\n            TOTAL_DAYS_IN_DAYS_VIEW - (this.calendar.days.length + daysFromPrevMonthInCalView);\n\n        // Generate prev, curr and next day view models\n        let prevMonthDayViews: DayViewModel[] = [];\n        let nextMonthDayViews: DayViewModel[] = [];\n\n        if (daysFromPrevMonthInCalView > 0) {\n            prevMonthDayViews =\n                this.generateDayViewModels(prevMonthCalendar.days.slice(-1 * daysFromPrevMonthInCalView), true, false);\n        }\n\n        this.currMonthDayViews = this.generateDayViewModels(this.calendar.days, false, true);\n\n        if (daysFromNextMonthInCalView > 0) {\n            nextMonthDayViews =\n                this.generateDayViewModels(nextMonthCalendar.days.slice(0, daysFromNextMonthInCalView), true, false);\n        }\n\n        // Generate calendar view and initialize flags\n        this._calendarView = this.generateCalendarView(prevMonthDayViews, this.currMonthDayViews, nextMonthDayViews);\n        this.initializeSelectedDay();\n        this.initializeFocusableDay();\n    }\n\n    /**\n     * Generates a DayViewModel array based on the DayModel passed\n     */\n    private generateDayViewModels(days: DayModel[], isDisabled: boolean, isCurrentCalendar: boolean): DayViewModel[] {\n        const dayViews: DayViewModel[] = days.map((day) => {\n            return new DayViewModel(day, false, isDisabled, false, false);\n        });\n        if (isCurrentCalendar && this.calendar.isDayInCalendar(this.today)) {\n            dayViews[this.today.date - 1].isTodaysDate = true;\n        }\n        return dayViews;\n    }\n\n    /**\n     * Gets the first day of the current month to figure out how many dates of previous month\n     * are needed to complete the Calendar View based on the first day of the week.\n     * eg: Assuming locale en-US, the first day of the week is Sunday,\n     * if first day of the current month lands on Wednesday, then\n     * (this.getDay function would return 3 since\n     * first day of the week is 0), we need the 3 days from the previous month.\n     */\n    private numDaysFromPrevMonthInCalView(currentYear: number, currentMonth: number): number {\n        const firstDayOfCurrMonth: number = getDay(currentYear, currentMonth, 1);\n\n        if (firstDayOfCurrMonth >= this.firstDayOfWeek) {\n            return firstDayOfCurrMonth - this.firstDayOfWeek;\n        } else {\n            return NO_OF_DAYS_IN_A_WEEK + firstDayOfCurrMonth - this.firstDayOfWeek;\n        }\n    }\n\n    /**\n     * Checks if the Day passed is in the CalendarView.\n     */\n    private isDayInCalendarView(day: DayModel): boolean {\n        if (!this.calendar.isDayInCalendar(day)) {\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Using the DayViewModels from the previous, current and next month, this function\n     * generates the CalendarView.\n     */\n    private generateCalendarView(prev: DayViewModel[], curr: DayViewModel[], next: DayViewModel[]): DayViewModel[][] {\n        const combinationArr: DayViewModel[] = [...prev, ...curr, ...next];\n\n        const calendarView: DayViewModel[][] = [];\n        for (let i = 0; i < NO_OF_ROWS_IN_CALENDAR_VIEW; i++) {\n            calendarView[i] = combinationArr.slice(i * NO_OF_DAYS_IN_A_WEEK, (i + 1) * NO_OF_DAYS_IN_A_WEEK);\n        }\n        return calendarView;\n    }\n\n    /**\n     * Initialize the selected day if the day is in the calendar.\n     */\n    private initializeSelectedDay(): void {\n        if (this.selectedDay && this.isDayInCalendarView(this.selectedDay)) {\n            this.currMonthDayViews[this.selectedDay.date - 1].isSelected = true;\n        }\n    }\n\n    /**\n     * Initializes the focusable day if the day is in the calendar. If focusable day is not set, then\n     * we check for the selected day. If selected day is not set then check if today is in the current\n     * calendar. If not then just set the 15th of the current calendar month.\n     */\n    private initializeFocusableDay(): void {\n        if (this.focusableDay && this.isDayInCalendarView(this.focusableDay)) {\n            this.setFocusableFlag(this.focusableDay, true);\n        } else if (this.selectedDay && this.isDayInCalendarView(this.selectedDay)) {\n            this.setFocusableFlag(this.selectedDay, true);\n            this.focusableDay = this.selectedDay.clone();\n        } else if (this.isDayInCalendarView(this.today)) {\n            this.setFocusableFlag(this.today, true);\n            this.focusableDay = this.today.clone();\n        } else {\n            this.focusableDay = new DayModel(this.calendar.year, this.calendar.month, 15);\n            this.setFocusableFlag(this.focusableDay, true);\n        }\n    }\n\n    private setFocusableFlag(day: DayModel, flag: boolean): void {\n        if (day) {\n            this.currMonthDayViews[day.date - 1].isFocusable = flag;\n        }\n    }\n\n    /**\n     * Updates the focusable day in the calendar.\n     */\n    updateFocusableDay(day: DayModel): void {\n        this.setFocusableFlag(this.focusableDay, false);\n        this.setFocusableFlag(day, true);\n        this.focusableDay = day;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\nimport {CalendarModel} from \"../model/calendar.model\";\nimport {DayModel} from \"../model/day.model\";\n\n/**\n * This service is responsible for:\n * 1. Initializing the displayed calendar.\n * 2. Moving the calendar to the next, previous or current months\n * 3. Managing the focused and selected day models.\n */\n@Injectable()\nexport class DateNavigationService {\n    private _displayedCalendar: CalendarModel;\n\n    get displayedCalendar(): CalendarModel {\n        return this._displayedCalendar;\n    }\n\n    // not a setter because i want this to remain private\n    private setDisplayedCalendar(value: CalendarModel) {\n        if (!this._displayedCalendar.isEqual(value)) {\n            this._displayedCalendar = value;\n            this._displayedCalendarChange.next();\n        }\n    }\n\n    /**\n     * Variable to store today's date.\n     */\n    private _todaysFullDate: Date = new Date();\n    private _today: DayModel;\n\n    private initializeTodaysDate(): void {\n        this._todaysFullDate = new Date();\n        this._today = new DayModel(this._todaysFullDate.getFullYear(), this._todaysFullDate.getMonth(),\n                                   this._todaysFullDate.getDate());\n    }\n\n    get today(): DayModel {\n        return this._today;\n    }\n\n    public selectedDay: DayModel;\n\n    private _selectedDayChange: Subject<DayModel> = new Subject<DayModel>();\n\n    get selectedDayChange(): Observable<DayModel> {\n        return this._selectedDayChange.asObservable();\n    }\n\n    /**\n     * Notifies that the selected day has changed so that the date can be emitted to the user.\n     * Note: Only to be called from day.ts\n     */\n    notifySelectedDayChanged(dayModel: DayModel) {\n        if (dayModel.isEqual(this.selectedDay)) {\n            return;\n        }\n        this.selectedDay = dayModel;\n        this._selectedDayChange.next(dayModel);\n    }\n\n    public focusedDay: DayModel;\n\n    /**\n     * Initializes the calendar based on the selected day.\n     */\n    initializeCalendar(): void {\n        this.focusedDay = null;  // Can be removed later on the store focus\n        this.initializeTodaysDate();\n        if (this.selectedDay) {\n            this._displayedCalendar = new CalendarModel(this.selectedDay.year, this.selectedDay.month);\n        } else {\n            this._displayedCalendar = new CalendarModel(this.today.year, this.today.month);\n        }\n    }\n\n    changeMonth(month: number): void {\n        this.setDisplayedCalendar(new CalendarModel(this._displayedCalendar.year, month));\n    }\n\n    changeYear(year: number): void {\n        this.setDisplayedCalendar(new CalendarModel(year, this._displayedCalendar.month));\n    }\n\n    /**\n     * Moves the displayed calendar to the next month.\n     */\n    moveToNextMonth(): void {\n        this.setDisplayedCalendar(this._displayedCalendar.nextMonth());\n    }\n\n    /**\n     * Moves the displayed calendar to the previous month.\n     */\n    moveToPreviousMonth(): void {\n        this.setDisplayedCalendar(this._displayedCalendar.previousMonth());\n    }\n\n    /**\n     * Moves the displayed calendar to the current month and year.\n     */\n    moveToCurrentMonth(): void {\n        if (!this.displayedCalendar.isDayInCalendar(this.today)) {\n            this.setDisplayedCalendar(new CalendarModel(this.today.year, this.today.month));\n        }\n        this._focusOnCalendarChange.next();\n    }\n\n    incrementFocusDay(value: number): void {\n        this.focusedDay = this.focusedDay.incrementBy(value);\n        if (this._displayedCalendar.isDayInCalendar(this.focusedDay)) {\n            this._focusedDayChange.next(this.focusedDay);\n        } else {\n            this.setDisplayedCalendar(this.focusedDay.calendar);\n        }\n        this._focusOnCalendarChange.next();\n    }\n\n    private _displayedCalendarChange: Subject<void> = new Subject<void>();\n\n    /**\n     * This observable lets the subscriber know that the displayed calendar has changed.\n     */\n    get displayedCalendarChange(): Observable<void> {\n        return this._displayedCalendarChange.asObservable();\n    }\n\n    private _focusOnCalendarChange: Subject<void> = new Subject<void>();\n\n    /**\n     * This observable lets the subscriber know that the focus should be applied on the calendar.\n     */\n    get focusOnCalendarChange(): Observable<void> {\n        return this._focusOnCalendarChange.asObservable();\n    }\n\n    private _focusedDayChange: Subject<DayModel> = new Subject<DayModel>();\n\n    /**\n     * This observable lets the subscriber know that the focused day in the displayed calendar has changed.\n     */\n    get focusedDayChange(): Observable<DayModel> {\n        return this._focusedDayChange.asObservable();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {isPlatformBrowser} from \"@angular/common\";\nimport {ElementRef, Inject, Injectable, NgZone, PLATFORM_ID} from \"@angular/core\";\nimport {first} from \"rxjs/operator/first\";\n\n/**\n * This service focuses the day that is focusable in the calendar.\n */\n@Injectable()\nexport class DatepickerFocusService {\n    constructor(private _ngZone: NgZone, @Inject(PLATFORM_ID) private platformId: Object) {}\n\n    // Credit: Material: https://github.com/angular/material2/blob/master/src/lib/datepicker/calendar.ts\n    focusCell(elRef: ElementRef): void {\n        this._ngZone.runOutsideAngular(() => {\n            first.call(this._ngZone.onStable.asObservable()).subscribe(() => {\n                if (isPlatformBrowser(this.platformId)) {\n                    const focusEl = elRef.nativeElement.querySelector(\"[tabindex=\\\"0\\\"]\");\n                    if (focusEl) {\n                        focusEl.focus();\n                    }\n                }\n            });\n        });\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {\n    FormatWidth,\n    FormStyle,\n    getLocaleDateFormat,\n    getLocaleDayNames,\n    getLocaleFirstDayOfWeek,\n    getLocaleMonthNames,\n    TranslationWidth\n} from \"@angular/common\";\nimport {Inject, Injectable, LOCALE_ID} from \"@angular/core\";\n\n/**\n * This service extracts the Angular CLDR data needed by the datepicker.\n */\n@Injectable()\nexport class LocaleHelperService {\n    constructor(@Inject(LOCALE_ID) public locale: string) {\n        this.initializeLocaleData();\n    }\n\n    private _firstDayOfWeek: number = 0;\n    private _localeDaysNarrow: ReadonlyArray<string>;\n    private _localeMonthsAbbreviated: ReadonlyArray<string>;\n    private _localeMonthsWide: ReadonlyArray<string>;\n    private _localeDateFormat: string;\n\n    get firstDayOfWeek(): number {\n        return this._firstDayOfWeek;\n    }\n\n    get localeDaysNarrow(): ReadonlyArray<string> {\n        return this._localeDaysNarrow;\n    }\n\n    get localeMonthsAbbreviated(): ReadonlyArray<string> {\n        return this._localeMonthsAbbreviated;\n    }\n\n    get localeMonthsWide(): ReadonlyArray<string> {\n        return this._localeMonthsWide;\n    }\n\n    get localeDateFormat(): string {\n        return this._localeDateFormat;\n    }\n\n    /**\n     * Initializes the locale data.\n     */\n    private initializeLocaleData(): void {\n        // Order in which these functions is called is very important.\n        this.initializeFirstDayOfWeek();\n        this.initializeLocaleDateFormat();\n        this.initializeLocaleMonthsAbbreviated();\n        this.initializeLocaleMonthsWide();\n        this.initializeLocaleDaysNarrow();\n    }\n\n    /**\n     * Initialize day names in the TranslationWidth.Narrow format based on the locale.\n     * eg: [S, M, T...] for en-US.\n     */\n    private initializeLocaleDaysNarrow(): void {\n        // Get locale day names starting with Sunday\n        const tempArr: string[] = getLocaleDayNames(this.locale, FormStyle.Format, TranslationWidth.Narrow).slice();\n        // Get first day of the week based on the locale\n        const firstDayOfWeek: number = this.firstDayOfWeek;\n        // Rearrange the tempArr to start with the first day of the week based on the locale.\n        if (firstDayOfWeek > 0) {\n            const prevDays: string[] = tempArr.splice(0, firstDayOfWeek);\n            tempArr.push(...prevDays);\n        }\n        this._localeDaysNarrow = tempArr;\n    }\n\n    /**\n     * Initializes the array of month names in the TranslationWidth.Abbreviated format.\n     * e.g. `[Jan, Feb, ...]` for en-US\n     */\n    private initializeLocaleMonthsAbbreviated(): void {\n        this._localeMonthsAbbreviated =\n            getLocaleMonthNames(this.locale, FormStyle.Format, TranslationWidth.Abbreviated).slice();\n    }\n\n    /**\n     * Initializes the array of month names in the TranslationWidth.Wide format.\n     * e.g. `[January, February, ...]` for en-US\n     */\n    private initializeLocaleMonthsWide(): void {\n        this._localeMonthsWide = getLocaleMonthNames(this.locale, FormStyle.Format, TranslationWidth.Wide).slice();\n    }\n\n    /**\n     * Initializes the first day of the week based on the locale.\n     */\n    private initializeFirstDayOfWeek(): void {\n        this._firstDayOfWeek = getLocaleFirstDayOfWeek(this.locale);\n    }\n\n    private initializeLocaleDateFormat(): void {\n        this._localeDateFormat = getLocaleDateFormat(this.locale, FormatWidth.Short);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, ElementRef, HostListener, OnDestroy} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, UP_ARROW} from \"../../utils/key-codes/key-codes\";\n\nimport {CalendarViewModel} from \"./model/calendar-view.model\";\nimport {CalendarModel} from \"./model/calendar.model\";\nimport {DayModel} from \"./model/day.model\";\nimport {DateNavigationService} from \"./providers/date-navigation.service\";\nimport {DatepickerFocusService} from \"./providers/datepicker-focus.service\";\nimport {LocaleHelperService} from \"./providers/locale-helper.service\";\nimport {NO_OF_DAYS_IN_A_WEEK} from \"./utils/constants\";\n\n@Component({selector: \"clr-calendar\", template: `<table class=\"calendar-table weekdays\">\n    <tr class=\"calendar-row\">\n        <td *ngFor=\"let day of localeDaysNarrow\" class=\"calendar-cell weekday\">\n            {{day}}\n        </td>\n    </tr>\n</table>\n<table\n    class=\"calendar-table calendar-dates\">\n    <tr class=\"calendar-row\" *ngFor=\"let row of calendarViewModel.calendarView\">\n        <td *ngFor=\"let dayView of row\" class=\"calendar-cell\">\n            <clr-day [clrDayView]=\"dayView\"></clr-day>\n        </td>\n    </tr>\n</table>\n`})\nexport class ClrCalendar implements OnDestroy {\n    private _subs: Subscription[] = [];\n\n    constructor(private _localeHelperService: LocaleHelperService,\n                private _dateNavigationService: DateNavigationService,\n                private _datepickerFocusService: DatepickerFocusService, private _elRef: ElementRef) {\n        this.generateCalendarView();\n        this.initializeSubscriptions();\n    }\n\n    /**\n     * Calendar View Model to generate the Calendar.\n     */\n    calendarViewModel: CalendarViewModel;\n\n    /**\n     * Gets the locale days according to the TranslationWidth.Narrow format.\n     */\n    get localeDaysNarrow(): ReadonlyArray<string> {\n        return this._localeHelperService.localeDaysNarrow;\n    }\n\n    get calendar(): CalendarModel {\n        return this._dateNavigationService.displayedCalendar;\n    }\n\n    get selectedDay(): DayModel {\n        return this._dateNavigationService.selectedDay;\n    }\n\n    get focusedDay(): DayModel {\n        return this._dateNavigationService.focusedDay;\n    }\n\n    get today(): DayModel {\n        return this._dateNavigationService.today;\n    }\n\n    /**\n     * Initialize subscriptions to:\n     * 1. update the calendar view model.\n     * 2. update the focusable day in the calendar view model.\n     * 3. focus on the focusable day in the calendar.\n     */\n    private initializeSubscriptions(): void {\n        this._subs.push(this._dateNavigationService.displayedCalendarChange.subscribe(() => {\n            this.generateCalendarView();\n        }));\n\n        this._subs.push(this._dateNavigationService.focusedDayChange.subscribe((focusedDay: DayModel) => {\n            this.calendarViewModel.updateFocusableDay(focusedDay);\n        }));\n\n        this._subs.push(this._dateNavigationService.focusOnCalendarChange.subscribe(() => {\n            this._datepickerFocusService.focusCell(this._elRef);\n        }));\n    }\n\n    /**\n     * Generates the Calendar View based on the calendar retrieved from the DateNavigationService.\n     */\n    private generateCalendarView(): void {\n        this.calendarViewModel = new CalendarViewModel(this.calendar, this.selectedDay, this.focusedDay, this.today,\n                                                       this._localeHelperService.firstDayOfWeek);\n    }\n\n    /**\n     * Delegates Keyboard arrow navigation to the DateNavigationService.\n     */\n    @HostListener(\"keydown\", [\"$event\"])\n    onKeyDown(event: KeyboardEvent) {\n        if (event && this.focusedDay) {\n            switch (event.keyCode) {\n                case UP_ARROW:\n                    event.preventDefault();\n                    this._dateNavigationService.incrementFocusDay(-1 * NO_OF_DAYS_IN_A_WEEK);\n                    break;\n                case DOWN_ARROW:\n                    event.preventDefault();\n                    this._dateNavigationService.incrementFocusDay(NO_OF_DAYS_IN_A_WEEK);\n                    break;\n                case LEFT_ARROW:\n                    event.preventDefault();\n                    this._dateNavigationService.incrementFocusDay(-1);\n                    break;\n                case RIGHT_ARROW:\n                    event.preventDefault();\n                    this._dateNavigationService.incrementFocusDay(1);\n                    break;\n                default:\n                    break;  // No default case. TSLint x-(\n            }\n        }\n    }\n\n    /**\n     * Focuses on the focusable day when the Calendar View is initialized.\n     */\n    ngAfterViewInit() {\n        this._datepickerFocusService.focusCell(this._elRef);\n    }\n\n    /**\n     * Unsubscribe from subscriptions.\n     */\n    ngOnDestroy(): void {\n        this._subs.forEach((sub: Subscription) => sub.unsubscribe());\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Injectable} from \"@angular/core\";\nimport {BehaviorSubject} from \"rxjs/BehaviorSubject\";\nimport {Observable} from \"rxjs/Observable\";\n\nlet counter = 0;\n\n@Injectable()\nexport class FormControlService {\n    private _id = \"clr-form-control-\" + (++counter);\n    get id(): string {\n        return this._id;\n    }\n    set id(value: string) {\n        this._id = value;\n        this._idChange.next(value);\n    }\n\n    private _idChange: BehaviorSubject<string> = new BehaviorSubject(this._id);\n    public get idChange(): Observable<string> {\n        return this._idChange.asObservable();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\n\n@Injectable()\nexport class DateFormControlService {\n    private _touchedChange: Subject<void> = new Subject<void>();\n\n    get touchedChange(): Observable<void> {\n        return this._touchedChange.asObservable();\n    }\n\n    private _dirtyChange: Subject<void> = new Subject<void>();\n\n    get dirtyChange(): Observable<void> {\n        return this._dirtyChange.asObservable();\n    }\n\n    markAsTouched(): void {\n        this._touchedChange.next();\n    }\n\n    markAsDirty(): void {\n        this._dirtyChange.next();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Injectable} from \"@angular/core\";\n\nimport {\n    BIG_ENDIAN,\n    DEFAULT_LOCALE_FORMAT,\n    DELIMITER_REGEX,\n    InputDateDisplayFormat,\n    LITTLE_ENDIAN,\n    LITTLE_ENDIAN_REGEX,\n    MIDDLE_ENDIAN,\n    MIDDLE_ENDIAN_REGEX,\n    RTL_REGEX,\n    USER_INPUT_REGEX\n} from \"../utils/constants\";\nimport {getNumberOfDaysInTheMonth, parseToFourDigitYear} from \"../utils/date-utils\";\n\nimport {LocaleHelperService} from \"./locale-helper.service\";\n\n@Injectable()\nexport class DateIOService {\n    public cldrLocaleDateFormat: string = DEFAULT_LOCALE_FORMAT;\n    private localeDisplayFormat: InputDateDisplayFormat = LITTLE_ENDIAN;\n    private delimiters: [string, string] = [\"/\", \"/\"];\n\n    constructor(private _localeHelperService: LocaleHelperService) {\n        this.cldrLocaleDateFormat = this._localeHelperService.localeDateFormat;\n        this.initializeLocaleDisplayFormat();\n    }\n\n    private initializeLocaleDisplayFormat(): void {\n        const format: string = this.cldrLocaleDateFormat.toLocaleLowerCase();\n        if (LITTLE_ENDIAN_REGEX.test(format)) {\n            this.localeDisplayFormat = LITTLE_ENDIAN;\n        } else if (MIDDLE_ENDIAN_REGEX.test(format)) {\n            this.localeDisplayFormat = MIDDLE_ENDIAN;\n        } else {\n            // everything else is set to BIG-ENDIAN FORMAT\n            this.localeDisplayFormat = BIG_ENDIAN;\n        }\n        this.extractDelimiters();\n    }\n\n    private extractDelimiters(): void {\n        if (this.cldrLocaleDateFormat) {\n            // Sanitize Date Format. Remove RTL characters.\n            // FIXME: When we support RTL, remove this and handle it correctly.\n            const localeFormat: string = this.cldrLocaleDateFormat.replace(RTL_REGEX, \"\");\n            const delimiters: string[] = localeFormat.split(DELIMITER_REGEX);\n\n            // NOTE: The split from the CLDR date format should always result\n            // in an arary with 4 elements. The 1st and the 2nd values are the delimiters\n            // we will use in order.\n            // Eg: \"dd/MM/y\".split(/d+|m+|y+/i) results in [\"\", \"/\", \"/\", \"\"]\n            if (delimiters && delimiters.length === 4) {\n                this.delimiters = [delimiters[1], delimiters[2]];\n            } else {\n                console.error(\"Unexpected date format received. Delimiters extracted: \", delimiters);\n            }\n        }\n    }\n\n    toLocaleDisplayFormatString(date: Date): string {\n        if (date) {\n            if (isNaN(date.getTime())) {\n                return \"\";\n            }\n            const dateNo: number = date.getDate();\n            const monthNo: number = date.getMonth() + 1;\n            const dateStr: string = dateNo > 9 ? dateNo.toString() : \"0\" + dateNo;\n            const monthStr: string = monthNo > 9 ? monthNo.toString() : \"0\" + monthNo;\n            if (this.localeDisplayFormat === LITTLE_ENDIAN) {\n                return dateStr + this.delimiters[0] + monthStr + this.delimiters[1] + date.getFullYear();\n            } else if (this.localeDisplayFormat === MIDDLE_ENDIAN) {\n                return monthStr + this.delimiters[0] + dateStr + this.delimiters[1] + date.getFullYear();\n            } else {\n                return date.getFullYear() + this.delimiters[0] + monthStr + this.delimiters[1] + dateStr;\n            }\n        }\n        return \"\";\n    }\n\n    get placeholderText(): string {\n        const format: [string, string, string] = this.localeDisplayFormat.format;\n        return format[0] + this.delimiters[0] + format[1] + this.delimiters[1] + format[2];\n    }\n\n    /**\n     * Checks if the month entered by the user is valid or not.\n     * Note: Month is 0 based.\n     */\n    private isValidMonth(month: number): boolean {\n        return (month > -1 && month < 12);\n    }\n\n    /**\n     * Checks if the date is valid depending on the year and month provided.\n     */\n    private isValidDate(year: number, month: number, date: number): boolean {\n        return (date > 0 && date <= getNumberOfDaysInTheMonth(year, month));\n    }\n\n    /**\n     * Validates the parameters provided and returns the date.\n     * If the parameters are not\n     * valid then return null.\n     * NOTE: (Month here is 1 based since the user has provided that as an input)\n     */\n    private validateAndGetDate(year: string, month: string, date: string): Date {\n        // I don't know whats wrong with the TS compiler. It throws an error if I write\n        // the below if statement. The error is:\n        // Operator '!==' cannot be applied to types '2' and '4'\n        // More info here: https://github.com/Microsoft/TypeScript/issues/12794#issuecomment-270342936\n        /*\n        if (year.length !== 2 || year.length !== 4) {\n            return null;\n        }\n        */\n\n        // Instead I have to write the logic like this x-(\n        const y: number = +year;\n        const m: number = +month - 1;  // month is 0 based\n        const d: number = +date;\n        if (!this.isValidMonth(m) || !this.isValidDate(y, m, d)) {\n            return null;\n        }\n        const result: number = parseToFourDigitYear(y);\n        return result !== -1 ? (new Date(result, m, d)) : null;\n    }\n\n    /**\n     * Checks if the input provided by the user is valid.\n     */\n    isValidInput(date: string): Date {\n        if (!date) {\n            return null;\n        }\n        const dateParts: string[] = date.match(USER_INPUT_REGEX);\n        if (!dateParts || dateParts.length !== 3) {\n            return null;\n        }\n        const [firstPart, secondPart, thirdPart] = dateParts;\n        if (this.localeDisplayFormat === LITTLE_ENDIAN) {\n            // secondPart is month && firstPart is date\n            return this.validateAndGetDate(thirdPart, secondPart, firstPart);\n        } else if (this.localeDisplayFormat === MIDDLE_ENDIAN) {\n            // firstPart is month && secondPart is date\n            return this.validateAndGetDate(thirdPart, firstPart, secondPart);\n        } else {\n            // secondPart is month && thirdPart is date\n            return this.validateAndGetDate(firstPart, secondPart, thirdPart);\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n// iPad mini screen width\n// http://stephen.io/mediaqueries/#iPadMini\nexport const DATEPICKER_ENABLE_BREAKPOINT: number = 768;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {DOCUMENT} from \"@angular/common\";\nimport {Inject, Injectable} from \"@angular/core\";\n\nimport {DATEPICKER_ENABLE_BREAKPOINT} from \"../../../utils/breakpoints/breakpoints\";\nimport {MOBILE_USERAGENT_REGEX} from \"../utils/constants\";\n\n@Injectable()\nexport class DatepickerEnabledService {\n    constructor(@Inject(DOCUMENT) private _document: any) {\n        if (this._document) {\n            this._isUserAgentMobile = MOBILE_USERAGENT_REGEX.test(_document.defaultView.navigator.userAgent);\n            this._innerWidth = _document.defaultView.innerWidth;\n        }\n    }\n\n    private _isUserAgentMobile: boolean = false;\n    private _innerWidth: number;\n\n    /**\n     * Returns if the calendar should be active or not.\n     * If the user agent is mobile and the screen width is less than DATEPICKER_ACTIVE_BREAKPOINT\n     * then the calendar is inactive.\n     */\n    get isEnabled(): boolean {\n        // https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n        // What they recommend is:\n        //\"In summary, we recommend looking for the string 'Mobi'\n        // anywhere in the User Agent to detect a mobile device.\"\n        if (this._document) {\n            if (this._innerWidth < DATEPICKER_ENABLE_BREAKPOINT && this._isUserAgentMobile) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, OnDestroy} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {IfOpenService} from \"../../utils/conditional/if-open.service\";\nimport {DynamicWrapper} from \"../../utils/host-wrapping\";\nimport {FormControlService} from \"../common/form-control.service\";\n\nimport {DateFormControlService} from \"./providers/date-form-control.service\";\nimport {DateIOService} from \"./providers/date-io.service\";\nimport {DateNavigationService} from \"./providers/date-navigation.service\";\nimport {DatepickerEnabledService} from \"./providers/datepicker-enabled.service\";\nimport {LocaleHelperService} from \"./providers/locale-helper.service\";\n\n@Component({\n    selector: \"clr-date-container\",\n    template: `\n        <ng-content></ng-content>\n        <button\n            type=\"button\"\n            class=\"datepicker-trigger\"\n            (click)=\"toggleDatepicker($event)\"\n            *ngIf=\"isEnabled\">\n            <clr-icon shape=\"calendar\" class=\"datepicker-trigger-icon\"></clr-icon>\n        </button>\n        <clr-datepicker-view-manager *clrIfOpen clrFocusTrap></clr-datepicker-view-manager>\n    `,\n    providers: [\n        FormControlService, IfOpenService, LocaleHelperService, DateIOService, DateNavigationService,\n        DatepickerEnabledService, DateFormControlService\n    ],\n    host: {\"[class.date-container]\": \"true\"}\n})\nexport class ClrDateContainer implements DynamicWrapper, OnDestroy {\n    // Unused but have to add it :-(\n    _dynamic: boolean = false;\n\n    private _sub: Subscription;\n\n    constructor(private _ifOpenService: IfOpenService, private _dateNavigationService: DateNavigationService,\n                private _datepickerEnabledService: DatepickerEnabledService,\n                private dateFormControlService: DateFormControlService) {\n        this._sub = this._ifOpenService.openChange.subscribe((open) => {\n            if (open) {\n                this.initializeCalendar();\n            }\n        });\n    }\n\n    /**\n     * Returns if the Datepicker is enabled or not. If disabled, hides the datepicker trigger.\n     */\n    get isEnabled(): boolean {\n        return this._datepickerEnabledService.isEnabled;\n    }\n\n    /**\n     * Processes the user input and Initializes the Calendar everytime the datepicker popover is open.\n     */\n    private initializeCalendar(): void {\n        this._dateNavigationService.initializeCalendar();\n    }\n\n    /**\n     * Toggles the Datepicker Popover.\n     */\n    toggleDatepicker(event: MouseEvent) {\n        this._ifOpenService.toggleWithEvent(event);\n        this.dateFormControlService.markAsTouched();\n    }\n\n    /**\n     * Unsubscribe from subscriptions.\n     */\n    ngOnDestroy() {\n        this._sub.unsubscribe();\n    }\n}\n",
    "/**\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {\n    ComponentFactory,\n    ComponentFactoryResolver,\n    ElementRef,\n    InjectionToken,\n    Injector,\n    Type,\n    ViewContainerRef\n} from \"@angular/core\";\n\nimport {DynamicWrapper} from \"./dynamic-wrapper\";\nimport {EmptyAnchor} from \"./empty-anchor\";\n\nexport class HostWrapper<W extends DynamicWrapper> implements Injector {\n    constructor(containerType: Type<W>, vcr: ViewContainerRef) {\n        this.injector = vcr.injector;\n        // If the host is already wrapped, we don't do anything\n        if (!this.injector.get(containerType, null)) {\n            const cfr = this.injector.get(ComponentFactoryResolver);\n            const el = this.injector.get(ElementRef);\n\n            // We need a new anchor, since we're projecting the current one.\n            vcr.createComponent(cfr.resolveComponentFactory(EmptyAnchor));\n            const factory: ComponentFactory<W> = cfr.resolveComponentFactory(containerType);\n            // We're assuming only one projection slot, but in more complex cases we might want to provide\n            // a different array of projected elements.\n            const containerRef = vcr.createComponent(factory, undefined, undefined, [[el.nativeElement]]);\n            // We can now remove the useless anchor\n            vcr.remove(0);\n\n            // We note that the container was dynamically created\n            containerRef.instance._dynamic = true;\n\n            // We keep the wrapper's injector to access the dependencies that weren't available before.\n            this.injector = containerRef.injector;\n        }\n    }\n\n    private injector: Injector;\n\n    get<T>(token: Type<T>|InjectionToken<T>, notFoundValue?: T): T {\n        return this.injector.get(token, notFoundValue);\n    }\n}\n",
    "/**\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {HostBinding, InjectionToken, Injector, Input, OnInit, Type, ViewContainerRef} from \"@angular/core\";\n\nimport {DynamicWrapper, HostWrapper} from \"../../utils/host-wrapping\";\n\nimport {FormControlService} from \"./form-control.service\";\n\nexport class WrappedFormControl<W extends DynamicWrapper> implements OnInit {\n    // I lost way too much time trying to make this work without injecting the ViewContainerRef and the Injector,\n    // I'm giving up. So we have to inject these two manually for now.\n    constructor(protected wrapperType: Type<W>, protected vcr: ViewContainerRef) {}\n\n    protected formControlService: FormControlService;\n\n    _id: string;\n\n    @HostBinding() @Input()\n    get id() {\n        return this._id;\n    }\n    set id(value: string) {\n        this._id = value;\n        if (this.formControlService) {\n            this.formControlService.id = value;\n        }\n    }\n\n    private _containerInjector: Injector;\n\n    protected getProviderFromContainer<T>(token: Type<T>|InjectionToken<T>, notFoundValue?: T): T {\n        return this._containerInjector.get(token, notFoundValue);\n    }\n\n    ngOnInit() {\n        this._containerInjector = new HostWrapper(this.wrapperType, this.vcr);\n        this.formControlService = this._containerInjector.get(FormControlService);\n        if (this._id) {\n            this.formControlService.id = this._id;\n        } else {\n            this._id = this.formControlService.id;\n        }\n        // No need to subscribe to formControlService.idChange because the input is the only one that can update the id.\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {isPlatformBrowser} from \"@angular/common\";\nimport {\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    PLATFORM_ID,\n    Renderer2,\n    Self,\n    ViewContainerRef,\n} from \"@angular/core\";\nimport {NgControl} from \"@angular/forms\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {WrappedFormControl} from \"../common/wrapped-form-control\";\n\nimport {ClrDateContainer} from \"./date-container\";\nimport {DayModel} from \"./model/day.model\";\nimport {DateFormControlService} from \"./providers/date-form-control.service\";\nimport {DateIOService} from \"./providers/date-io.service\";\nimport {DateNavigationService} from \"./providers/date-navigation.service\";\nimport {DatepickerEnabledService} from \"./providers/datepicker-enabled.service\";\n\n@Directive({selector: \"[clrDate]\", host: {\"[class.date-input]\": \"true\"}})\nexport class ClrDateInput extends WrappedFormControl<ClrDateContainer> implements OnInit, AfterViewInit, OnDestroy {\n    /**\n     * Subscriptions to all the services and queries changes\n     */\n    private _subscriptions: Subscription[] = [];\n\n    // We need this variable because if the date input has a value initialized\n    // we do not output it. This variable is false during initial load. We make sure that\n    // during initial load dayModelOutputted is equal to the value entered by the user so that initialized\n    // value isn't emitted back to the user. After initial load,\n    // we set this to true and the dayModelOutputted is set only\n    // when the Output is emitted to the user.\n    private previousOutputInitializedFlag: boolean = false;\n    private previousOutput: DayModel;\n\n    private initializePreviousOutput(dayModel: DayModel) {\n        if (!this.previousOutputInitializedFlag) {\n            this.previousOutput = dayModel;\n            this.previousOutputInitializedFlag = true;\n        }\n    }\n\n    constructor(@Optional() private container: ClrDateContainer, vcr: ViewContainerRef, private elRef: ElementRef,\n                private renderer: Renderer2, @Self() @Optional() private _ngControl: NgControl,\n                @Optional() private _dateIOService: DateIOService,\n                @Optional() private _dateNavigationService: DateNavigationService,\n                @Optional() private _datepickerEnabledService: DatepickerEnabledService,\n                @Optional() private dateFormControlService: DateFormControlService,\n                @Inject(PLATFORM_ID) private platformId: Object) {\n        super(ClrDateContainer, vcr);\n    }\n\n    /**\n     * 1. Populate services if the date container is not present.\n     * 2. Initialize Subscriptions.\n     * 3. Process User Input.\n     */\n    ngOnInit() {\n        super.ngOnInit();\n        if (!this.container) {\n            this.populateContainerServices();\n        }\n        this.initializeSubscriptions();\n        this.processInitialInputs();\n    }\n\n    /**\n     * Process the inputs initialized by the user which were missed\n     * because of late subscriptions or lifecycle method calls.\n     */\n    private processInitialInputs(): void {\n        this.processUserDateObject(this.dateValueOnInitialLoad);\n\n        // Handle Inital Value from Reactive Forms\n        // TODO: We are repeating this logic at multiple places. This makes me think\n        // if this class should have implemented the ControlValueAccessor interface.\n        // Will explore that later and see if its a cleaner solution.\n        if (this._ngControl && this._ngControl.value) {\n            this.updateInputValue(this._ngControl.value);\n            this.initializePreviousOutput(this._dateNavigationService.selectedDay);\n        }\n    }\n\n    /**\n     * Write the initial input set by the user on to the input field.\n     */\n    ngAfterViewInit() {\n        // I don't know why I have to do this but after using the new HostWrapping Module I have to delay the processing\n        // of the initial Input set by the user to here.  If I do not 2 issues occur:\n        // 1. the Input setter is called before ngOnInit. ngOnInit initializes the services without which the setter\n        // fails\n        // 2. The Renderer doesn't work before ngAfterViewInit\n        //(It used to before the new HostWrapping Module for some reason).\n        // I need the renderer to set the value property on the input to make sure that if the user has supplied a Date\n        // input object,  we reflect it with the right date on the input field using the IO service.  I am not sure if\n        // these are major issues or not but just noting them down here.\n        if (this._dateNavigationService) {\n            const selDay: DayModel = this._dateNavigationService.selectedDay;\n            if (selDay) {\n                const dateStr: string = this._dateIOService.toLocaleDisplayFormatString(selDay.toDate());\n                this.writeDateStrToInputField(dateStr);\n            }\n        }\n        this.initialLoad = false;\n    }\n\n    /**\n     * Unsubscribes from the subscriptions.\n     */\n    ngOnDestroy() {\n        this._subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\n    }\n\n    /**\n     * Populates the services from the container component.\n     */\n    private populateContainerServices(): void {\n        this._dateIOService = this.getProviderFromContainer(DateIOService);\n        this._dateNavigationService = this.getProviderFromContainer(DateNavigationService);\n        this._datepickerEnabledService = this.getProviderFromContainer(DatepickerEnabledService);\n        this.dateFormControlService = this.getProviderFromContainer(DateFormControlService);\n    }\n\n    /**\n     * Writes the date string value to the input field\n     */\n    private writeDateStrToInputField(value: string): void {\n        this.renderer.setProperty(this.elRef.nativeElement, \"value\", value);\n    }\n\n    private initialLoad: boolean = true;\n    private dateValueOnInitialLoad: Date;\n\n    /**\n     * Javascript Date object input set by the user.\n     */\n    @Input(\"clrDate\")\n    set date(value: Date) {\n        if (this.initialLoad) {\n            // Store date value passed by the user to process after the services have been initialized by\n            // the ngOnInit hook.\n            this.dateValueOnInitialLoad = value;\n        } else {\n            this.processUserDateObject(value);\n        }\n    }\n\n    /**\n     * Processes a date object to check if its valid or not.\n     */\n    private processUserDateObject(value: Date) {\n        if (this._dateIOService) {\n            // The date object is converted back to string because in Javascript you can create a date object\n            // like this: new Date(\"Test\"). This is a date object but it is invalid. Converting the date object\n            // that the user passed helps us to verify the validity of the date object.\n            const dateStr: string = this._dateIOService.toLocaleDisplayFormatString(value);\n            this.updateInputValue(dateStr);\n        }\n    }\n\n    private updateInputValue(dateStr: string): void {\n        const date: Date = this._dateIOService.isValidInput(dateStr);\n        if (date) {\n            const dayModel: DayModel = new DayModel(date.getFullYear(), date.getMonth(), date.getDate());\n            if (!dayModel.isEqual(this._dateNavigationService.selectedDay)) {\n                this._dateNavigationService.selectedDay = dayModel;\n                this.writeDateStrToInputField(dateStr);\n            }\n        } else {\n            this._dateNavigationService.selectedDay = null;\n        }\n    }\n\n    @Input() placeholder: string;\n\n    /**\n     * Returns the date format for the placeholder according to which the input should be entered by the user.\n     */\n    @HostBinding(\"attr.placeholder\")\n    get placeholderText(): string {\n        return this.placeholder ? this.placeholder : this._dateIOService.placeholderText;\n    }\n\n    /**\n     * Sets the input type to text when the datepicker is enabled. Reverts back to the native date input\n     * when the datepicker is disabled. Datepicker is disabled on mobiles.\n     */\n    @HostBinding(\"attr.type\")\n    get inputType(): string {\n        return isPlatformBrowser(this.platformId) && this._datepickerEnabledService.isEnabled ? \"text\" : \"date\";\n    }\n\n    //\n    // Output Management\n    // Note: For now we will not emit both clrDateChange and ngControl outputs\n    // at the same time. This requires us to listen to keydown and blur events to figure out\n    // exactly when the Output should be emitted.\n    // Our recommendation right now is to either use clrDate or use ngModel/FormControl.\n    // Do not use both of them together.\n    //\n\n    @Output(\"clrDateChange\") _dateUpdated: EventEmitter<Date> = new EventEmitter<Date>(false);\n\n    private emitDateOutput(dayModel: DayModel): void {\n        if (dayModel && !dayModel.isEqual(this.previousOutput)) {\n            this._dateUpdated.emit(dayModel.toDate());\n            this.previousOutput = dayModel;\n        } else if (!dayModel && this.previousOutput) {\n            this._dateUpdated.emit(null);\n            this.previousOutput = null;\n        }\n    }\n\n    /**\n     * Fires this method when the user changes the input focuses out of the input field.\n     */\n    @HostListener(\"change\", [\"$event.target\"])\n    onValueChange(target: HTMLInputElement) {\n        const value: string = target.value;\n        const date: Date = this._dateIOService.isValidInput(value);\n        if (date) {\n            const dayModel: DayModel = new DayModel(date.getFullYear(), date.getMonth(), date.getDate());\n            this._dateNavigationService.selectedDay = dayModel;\n            this.emitDateOutput(dayModel);\n        } else {\n            this._dateNavigationService.selectedDay = null;\n            this.emitDateOutput(null);\n        }\n    }\n\n    /**\n     * Initialize DateIO Subscriptions\n     */\n    private initializeSubscriptions(): void {\n        if (this._dateNavigationService && this._dateIOService) {\n            // This subscription is fired when the user selects a date from the popover.\n            this._subscriptions.push(this._dateNavigationService.selectedDayChange.subscribe((dayModel: DayModel) => {\n                const dateStr: string = this._dateIOService.toLocaleDisplayFormatString(dayModel.toDate());\n                this.writeDateStrToInputField(dateStr);\n                // This makes sure that ngModelChange is fired\n                // TODO: Check if there is a better way to do this.\n                // NOTE: Its important to use NgControl and not NgModel because\n                // NgModel only works with template driven forms\n                if (this._ngControl) {\n                    this._ngControl.control.setValue(dateStr);\n                }\n                this.emitDateOutput(dayModel);\n            }));\n\n            // We do not emit an Output from this subscription because\n            // we only emit the Output when the user has focused out of the input.\n            if (this._ngControl) {\n                this._subscriptions.push(this._ngControl.valueChanges.subscribe((value: string) => {\n                    const date: Date = this._dateIOService.isValidInput(value);\n                    if (date) {\n                        const dayModel: DayModel = new DayModel(date.getFullYear(), date.getMonth(), date.getDate());\n                        this._dateNavigationService.selectedDay = dayModel;\n                        this.initializePreviousOutput(dayModel);\n                    } else {\n                        this.initializePreviousOutput(null);\n                    }\n                }));\n            }\n        }\n\n        if (this.dateFormControlService) {\n            this._subscriptions.push(this.dateFormControlService.touchedChange.subscribe(() => {\n                if (this._ngControl) {\n                    this._ngControl.control.markAsTouched();\n                }\n            }));\n\n            this._subscriptions.push(this.dateFormControlService.dirtyChange.subscribe(() => {\n                if (this._ngControl) {\n                    this._ngControl.control.markAsDirty();\n                }\n            }));\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {\n    AfterViewChecked,\n    ElementRef,\n    HostBinding,\n    Injectable,\n    Injector,\n    OnDestroy,\n    Renderer2,\n    SkipSelf\n} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {IfOpenService} from \"../../utils/conditional/if-open.service\";\nimport {ESC} from \"../../utils/key-codes/key-codes\";\n\nimport {Point, Popover} from \"./popover\";\nimport {PopoverOptions} from \"./popover-options.interface\";\n\n// Literally any annotation would work here, but writing our own @HoneyBadger annotation feels overkill.\n@Injectable()\nexport abstract class AbstractPopover implements AfterViewChecked, OnDestroy {\n    constructor(injector: Injector, @SkipSelf() protected parentHost: ElementRef) {\n        this.el = injector.get(ElementRef);\n        this.ifOpenService = injector.get(IfOpenService);\n        this.renderer = injector.get(Renderer2);\n        // Default anchor is the parent host\n        this.anchorElem = parentHost.nativeElement;\n\n        this.popoverInstance = new Popover(this.el.nativeElement);\n        this.subscription = this.ifOpenService.openChange.subscribe((change) => {\n            if (change) {\n                this.anchor();\n                this.attachESCListener();\n            } else {\n                this.release();\n                this.detachESCListener();\n            }\n        });\n        if (this.ifOpenService.open) {\n            this.anchor();\n            this.attachESCListener();\n        }\n    }\n\n    protected el: ElementRef;\n    protected ifOpenService: IfOpenService;\n    protected renderer: Renderer2;\n\n    private popoverInstance: Popover;\n    private subscription: Subscription;\n\n    private updateAnchor = false;\n\n    protected anchorElem: any;\n    protected anchorPoint: Point;\n    protected popoverPoint: Point;\n    protected popoverOptions: PopoverOptions = {};\n\n    protected ignoredElement: any;\n\n    protected anchor() {\n        this.updateAnchor = true;\n        // Ugh\n        this.ignore = this.ifOpenService.originalEvent;\n    }\n\n    protected release() {\n        this.detachOutsideClickListener();\n        this.popoverInstance.release();\n    }\n\n    ngAfterViewChecked() {\n        if (this.updateAnchor) {\n            this.updateAnchor = false;\n            this.popoverInstance.anchor(this.anchorElem, this.anchorPoint, this.popoverPoint, this.popoverOptions)\n                .subscribe(() => {\n                    // if a scroll event is detected, close the popover\n                    this.ifOpenService.open = false;\n                });\n            this.attachOutsideClickListener();\n        }\n    }\n\n    ngOnDestroy() {\n        this.release();\n        this.detachESCListener();\n        this.subscription.unsubscribe();\n    }\n\n    /*\n     * Fallback to hide when *clrIfOpen is not being used\n     */\n\n    @HostBinding(\"class.is-off-screen\")\n    get isOffScreen() {\n        return this.ifOpenService.open ? false : true;\n    }\n\n    /*\n     * Until https://github.com/angular/angular/issues/8785 is supported, we don't have any way to instantiate\n     * a separate directive on the host. So let's do dirty but performant for now.\n     */\n    public closeOnOutsideClick = false;\n    private hostClickListener: () => void;\n    private documentClickListener: () => void;\n    private documentESCListener: () => void;\n    private ignoredElementClickListener: () => void;\n    private ignore: any;\n\n    private attachESCListener(): void {\n        this.documentESCListener = this.renderer.listen(\"document\", \"keydown\", event => {\n            if (event && event.keyCode === ESC) {\n                this.ifOpenService.open = false;\n            }\n        });\n    }\n\n    private detachESCListener(): void {\n        if (this.documentESCListener) {\n            this.documentESCListener();\n            delete this.documentESCListener;\n        }\n    }\n\n    private attachOutsideClickListener() {\n        if (this.closeOnOutsideClick) {\n            this.hostClickListener = this.renderer.listen(this.el.nativeElement, \"click\", event => this.ignore = event);\n            if (this.ignoredElement) {\n                this.ignoredElementClickListener =\n                    this.renderer.listen(this.ignoredElement, \"click\", event => this.ignore = event);\n            }\n            this.documentClickListener = this.renderer.listen(\"document\", \"click\", event => {\n                if (event === this.ignore) {\n                    delete this.ignore;\n                } else {\n                    this.ifOpenService.open = false;\n                }\n            });\n        }\n    }\n\n    private detachOutsideClickListener() {\n        if (this.closeOnOutsideClick) {\n            if (this.hostClickListener) {\n                this.hostClickListener();\n                delete this.hostClickListener;\n            }\n            if (this.ignoredElementClickListener) {\n                this.ignoredElementClickListener();\n                delete this.ignoredElementClickListener;\n            }\n            if (this.documentClickListener) {\n                this.documentClickListener();\n                delete this.documentClickListener;\n            }\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Injectable} from \"@angular/core\";\n\nconst enum DatepickerViewEnum {\n    MONTHVIEW = \"MONTHVIEW\",\n    YEARVIEW = \"YEARVIEW\",\n    DAYVIEW = \"DAYVIEW\"\n}\n\n/**\n * This service manages which view is visible in the datepicker popover.\n */\n@Injectable()\nexport class ViewManagerService {\n    private _currentView: DatepickerViewEnum = DatepickerViewEnum.DAYVIEW;\n\n    get isDayView(): boolean {\n        return this._currentView === DatepickerViewEnum.DAYVIEW;\n    }\n\n    get isYearView(): boolean {\n        return this._currentView === DatepickerViewEnum.YEARVIEW;\n    }\n\n    get isMonthView(): boolean {\n        return this._currentView === DatepickerViewEnum.MONTHVIEW;\n    }\n\n    changeToMonthView(): void {\n        this._currentView = DatepickerViewEnum.MONTHVIEW;\n    }\n\n    changeToYearView(): void {\n        this._currentView = DatepickerViewEnum.YEARVIEW;\n    }\n\n    changeToDayView(): void {\n        this._currentView = DatepickerViewEnum.DAYVIEW;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Component, ElementRef, Injector, SkipSelf} from \"@angular/core\";\n\nimport {AbstractPopover} from \"../../popover/common/abstract-popover\";\nimport {Point} from \"../../popover/common/popover\";\n\nimport {DatepickerFocusService} from \"./providers/datepicker-focus.service\";\nimport {ViewManagerService} from \"./providers/view-manager.service\";\n\n@Component({\n    selector: \"clr-datepicker-view-manager\",\n    template: `<!--\n* Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n* This software is released under MIT license.\n* The full license information can be found in LICENSE in the root directory of this project.\n-->\n\n<clr-monthpicker *ngIf=\"isMonthView\"></clr-monthpicker>\n<clr-yearpicker *ngIf=\"isYearView\"></clr-yearpicker>\n<clr-daypicker *ngIf=\"isDayView\"></clr-daypicker>\n`,\n    providers: [ViewManagerService, DatepickerFocusService],\n    host: {\"[class.datepicker]\": \"true\"}\n})\nexport class ClrDatepickerViewManager extends AbstractPopover {\n    constructor(@SkipSelf() parent: ElementRef, _injector: Injector, private _viewManagerService: ViewManagerService) {\n        super(_injector, parent);\n        this.configurePopover();\n    }\n\n    /**\n     * Configure Popover Direction and Close indicators\n     */\n    private configurePopover(): void {\n        this.anchorPoint = Point.BOTTOM_LEFT;\n        this.popoverPoint = Point.LEFT_TOP;\n        this.closeOnOutsideClick = true;\n    }\n\n    /**\n     * Returns if the current view is the monthpicker.\n     */\n    get isMonthView(): boolean {\n        return this._viewManagerService.isMonthView;\n    }\n\n    /**\n     * Returns if the current view is the yearpicker.\n     */\n    get isYearView(): boolean {\n        return this._viewManagerService.isYearView;\n    }\n\n    /**\n     * Returns if the current view is the daypicker.\n     */\n    get isDayView(): boolean {\n        return this._viewManagerService.isDayView;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nimport {Component, Input} from \"@angular/core\";\n\nimport {IfOpenService} from \"../../utils/conditional/if-open.service\";\n\nimport {DayViewModel} from \"./model/day-view.model\";\nimport {DayModel} from \"./model/day.model\";\nimport {DateFormControlService} from \"./providers/date-form-control.service\";\nimport {DateNavigationService} from \"./providers/date-navigation.service\";\n\n@Component({\n    selector: \"clr-day\",\n    template: `\n        <button\n            class=\"day-btn\"\n            type=\"button\"\n            [class.is-today]=\"dayView.isTodaysDate\"\n            [class.is-disabled]=\"dayView.isDisabled\"\n            [class.is-selected]=\"dayView.isSelected\"\n            [attr.tabindex]=\"dayView.tabIndex\"\n            (click)=\"selectDay()\"\n            (focus)=\"onDayViewFocus()\">\n            {{dayView.dayModel.date}}\n        </button>\n    `,\n    host: {\"[class.day]\": \"true\"}\n})\nexport class ClrDay {\n    constructor(private _dateNavigationService: DateNavigationService, private _ifOpenService: IfOpenService,\n                private dateFormControlService: DateFormControlService) {}\n\n    /**\n     * DayViewModel input which is used to build the Day View.\n     */\n    @Input(\"clrDayView\") dayView: DayViewModel;\n\n    /**\n     * Updates the focusedDay in the DateNavigationService when the ClrDay is focused.\n     */\n    onDayViewFocus() {\n        this._dateNavigationService.focusedDay = this.dayView.dayModel;\n    }\n\n    /**\n     * Updates the selectedDay when the ClrDay is selected and closes the datepicker popover.\n     */\n    selectDay(): void {\n        const day: DayModel = this.dayView.dayModel;\n        this._dateNavigationService.notifySelectedDayChanged(day);\n        this.dateFormControlService.markAsDirty();\n        this._ifOpenService.open = false;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component} from \"@angular/core\";\n\nimport {DateNavigationService} from \"./providers/date-navigation.service\";\nimport {LocaleHelperService} from \"./providers/locale-helper.service\";\nimport {ViewManagerService} from \"./providers/view-manager.service\";\n\n@Component({selector: \"clr-daypicker\", template: `<div class=\"calendar-header\">\n    <div class=\"calendar-pickers\">\n        <button class=\"calendar-btn monthpicker-trigger\" type=\"button\" (click)=\"changeToMonthView()\">\n            {{calendarMonth}}\n        </button>\n        <button class=\"calendar-btn yearpicker-trigger\" type=\"button\" (click)=\"changeToYearView()\">\n            {{calendarYear}}\n        </button>\n    </div>\n    <div class=\"calendar-switchers\">\n        <button class=\"calendar-btn switcher\" type=\"button\" (click)=\"previousMonth()\">\n            <clr-icon shape=\"angle\" dir=\"left\"></clr-icon>\n        </button>\n        <button class=\"calendar-btn switcher\" type=\"button\" (click)=\"currentMonth()\">\n            <clr-icon shape=\"event\"></clr-icon>\n        </button>\n        <button class=\"calendar-btn switcher\" type=\"button\" (click)=\"nextMonth()\">\n            <clr-icon shape=\"angle\" dir=\"right\"></clr-icon>\n        </button>\n    </div>\n</div>\n<clr-calendar></clr-calendar>\n`, host: {\"[class.daypicker]\": \"true\"}})\nexport class ClrDaypicker {\n    constructor(private _viewManagerService: ViewManagerService, private _dateNavigationService: DateNavigationService,\n                private _localeHelperService: LocaleHelperService) {}\n\n    /**\n     * Calls the ViewManagerService to change to the monthpicker view.\n     */\n    changeToMonthView(): void {\n        this._viewManagerService.changeToMonthView();\n    }\n\n    /**\n     * Calls the ViewManagerService to change to the yearpicker view.\n     */\n    changeToYearView(): void {\n        this._viewManagerService.changeToYearView();\n    }\n\n    /**\n     * Returns the month value of the calendar in the TranslationWidth.Abbreviated format.\n     */\n    get calendarMonth(): string {\n        return this._localeHelperService.localeMonthsAbbreviated[this._dateNavigationService.displayedCalendar.month];\n    }\n\n    /**\n     * Returns the year value of the calendar.\n     */\n    get calendarYear(): number {\n        return this._dateNavigationService.displayedCalendar.year;\n    }\n\n    /**\n     * Calls the DateNavigationService to move to the next month.\n     */\n    nextMonth(): void {\n        this._dateNavigationService.moveToNextMonth();\n    }\n\n    /**\n     * Calls the DateNavigationService to move to the previous month.\n     */\n    previousMonth(): void {\n        this._dateNavigationService.moveToPreviousMonth();\n    }\n\n    /**\n     * Calls the DateNavigationService to move to the current month.\n     */\n    currentMonth(): void {\n        this._dateNavigationService.moveToCurrentMonth();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {AfterViewInit, Component, ElementRef, HostListener} from \"@angular/core\";\n\nimport {DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, UP_ARROW} from \"../../utils/key-codes/key-codes\";\n\nimport {DateNavigationService} from \"./providers/date-navigation.service\";\nimport {DatepickerFocusService} from \"./providers/datepicker-focus.service\";\nimport {LocaleHelperService} from \"./providers/locale-helper.service\";\nimport {ViewManagerService} from \"./providers/view-manager.service\";\n\n@Component({\n    selector: \"clr-monthpicker\",\n    template: `\n        <button\n            type=\"button\"\n            class=\"calendar-btn month\"\n            *ngFor=\"let month of monthNames; let monthIndex = index\"\n            (click)=\"changeMonth(monthIndex)\"\n            [class.is-selected]=\"monthIndex === calendarMonthIndex\"\n            [attr.tabindex]=\"getTabIndex(monthIndex)\">\n            {{month}}\n        </button>\n    `,\n    host: {\n        \"[class.monthpicker]\": \"true\",\n    }\n})\nexport class ClrMonthpicker implements AfterViewInit {\n    constructor(private _viewManagerService: ViewManagerService, private _localeHelperService: LocaleHelperService,\n                private _dateNavigationService: DateNavigationService,\n                private _datepickerFocusService: DatepickerFocusService, private _elRef: ElementRef) {\n        this._focusedMonthIndex = this.calendarMonthIndex;\n    }\n\n    /**\n     * Keeps track of the current focused month.\n     */\n    private _focusedMonthIndex: number;\n\n    /**\n     * Gets the months array which is used to rendered the monthpicker view.\n     * Months are in the TranslationWidth.Wide format.\n     */\n    get monthNames(): ReadonlyArray<string> {\n        return this._localeHelperService.localeMonthsWide;\n    }\n\n    /**\n     * Gets the month value of the Calendar.\n     */\n    get calendarMonthIndex(): number {\n        return this._dateNavigationService.displayedCalendar.month;\n    }\n\n    /**\n     * Calls the DateNavigationService to update the month value of the calendar.\n     * Also changes the view to the daypicker.\n     */\n    changeMonth(monthIndex: number) {\n        this._dateNavigationService.changeMonth(monthIndex);\n        this._viewManagerService.changeToDayView();\n    }\n\n    /**\n     * Compares the month passed to the focused month and returns the tab index.\n     */\n    getTabIndex(monthIndex: number): number {\n        return monthIndex === this._focusedMonthIndex ? 0 : -1;\n    }\n\n    /**\n     * Handles the Keyboard arrow navigation for the monthpicker.\n     */\n    @HostListener(\"keydown\", [\"$event\"])\n    onKeyDown(event: KeyboardEvent) {\n        // NOTE: Didn't move this to the date navigation service because\n        // the logic is fairly simple and it didn't make sense for me\n        // to create extra observables just to move this logic to the service.\n        if (event) {\n            const keyCode: number = event.keyCode;\n            if (keyCode === UP_ARROW && this._focusedMonthIndex > 0) {\n                event.preventDefault();\n                this._focusedMonthIndex--;\n                this._datepickerFocusService.focusCell(this._elRef);\n            } else if (keyCode === DOWN_ARROW && this._focusedMonthIndex < 11) {\n                event.preventDefault();\n                this._focusedMonthIndex++;\n                this._datepickerFocusService.focusCell(this._elRef);\n            } else if (keyCode === RIGHT_ARROW && this._focusedMonthIndex < 6) {\n                event.preventDefault();\n                this._focusedMonthIndex = this._focusedMonthIndex + 6;\n                this._datepickerFocusService.focusCell(this._elRef);\n            } else if (keyCode === LEFT_ARROW && this._focusedMonthIndex > 5) {\n                event.preventDefault();\n                this._focusedMonthIndex = this._focusedMonthIndex - 6;\n                this._datepickerFocusService.focusCell(this._elRef);\n            }\n        }\n    }\n\n    /**\n     * Focuses on the current calendar month when the View is initialized.\n     */\n    ngAfterViewInit() {\n        this._datepickerFocusService.focusCell(this._elRef);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nconst YEARS_TO_DISPLAY: number = 10;\n\nexport class YearRangeModel {\n    constructor(private readonly year: number) {\n        this.generateYearRange();\n    }\n\n    yearRange: number[] = [];\n\n    /**\n     * Gets the number in the middle of the range.\n     */\n    get middleYear(): number {\n        return this.yearRange[Math.floor(this.yearRange.length / 2)];\n    }\n\n    /**\n     * Generates the year range based on the year parameter.\n     * eg: If 2018 is passed the output will be [2010, 2011, ..., 2019]\n     */\n    private generateYearRange() {\n        const remainder: number = this.year % YEARS_TO_DISPLAY;\n        const floor: number = this.year - remainder;\n        const ceil: number = floor + YEARS_TO_DISPLAY;\n        this.yearRange = this.generateRange(floor, ceil);\n    }\n\n    /**\n     * Function which generate a range of numbers from floor to ceil.\n     */\n    private generateRange(floor: number, ceil: number): number[] {\n        return Array.from({length: (ceil - floor)}, (v, k) => k + floor);\n    }\n\n    /**\n     * Generates the YearRangeModel for the next decade.\n     */\n    nextDecade(): YearRangeModel {\n        return new YearRangeModel(this.year + 10);\n    }\n\n    /**\n     * Generates the YearRangeModel for the previous decade.\n     */\n    previousDecade(): YearRangeModel {\n        return new YearRangeModel(this.year - 10);\n    }\n\n    /**\n     * Generates the YearRangeModel for the current decade.\n     */\n    currentDecade(): YearRangeModel {\n        return new YearRangeModel((new Date()).getFullYear());\n    }\n\n    /**\n     * Checks if the value is in the YearRangeModel.\n     */\n    inRange(value: number): boolean {\n        return this.yearRange.indexOf(value) > -1;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {AfterViewInit, Component, ElementRef, HostListener} from \"@angular/core\";\n\nimport {DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, UP_ARROW} from \"../../utils/key-codes/key-codes\";\n\nimport {YearRangeModel} from \"./model/year-range.model\";\nimport {DateNavigationService} from \"./providers/date-navigation.service\";\nimport {DatepickerFocusService} from \"./providers/datepicker-focus.service\";\nimport {ViewManagerService} from \"./providers/view-manager.service\";\n\n@Component({\n    selector: \"clr-yearpicker\",\n    template: `\n        <div class=\"year-switchers\">\n            <button class=\"calendar-btn switcher\" type=\"button\" (click)=\"previousDecade()\">\n                <clr-icon shape=\"angle\" dir=\"left\"></clr-icon>\n            </button>\n            <button class=\"calendar-btn switcher\" type=\"button\" (click)=\"currentDecade()\">\n                <clr-icon shape=\"event\"></clr-icon>\n            </button>\n            <button class=\"calendar-btn switcher\" type=\"button\" (click)=\"nextDecade()\">\n                <clr-icon shape=\"angle\" dir=\"right\"></clr-icon>\n            </button>\n        </div>\n        <div class=\"years\">\n            <button\n                *ngFor=\"let year of yearRangeModel.yearRange\"\n                type=\"button\"\n                class=\"calendar-btn year\"\n                [attr.tabindex]=\"getTabIndex(year)\"\n                [class.is-selected]=\"year === calendarYear\"\n                (click)=\"changeYear(year)\">\n                {{year}}\n            </button>\n        </div>\n    `,\n    host: {\n        \"[class.yearpicker]\": \"true\",\n    }\n})\nexport class ClrYearpicker implements AfterViewInit {\n    constructor(private _dateNavigationService: DateNavigationService, private _viewManagerService: ViewManagerService,\n                private _datepickerFocusService: DatepickerFocusService, private _elRef: ElementRef) {\n        this.yearRangeModel = new YearRangeModel(this.calendarYear);\n        this._focusedYear = this.calendarYear;\n    }\n\n    /**\n     * YearRangeModel which is used to build the YearPicker view.\n     */\n    yearRangeModel: YearRangeModel;\n\n    /**\n     * Keeps track of the current focused year.\n     */\n    private _focusedYear: number;\n\n    /**\n     * Gets the year which the user is currently on.\n     */\n    get calendarYear(): number {\n        return this._dateNavigationService.displayedCalendar.year;\n    }\n\n    /**\n     * Increments the focus year by the value passed. Updates the YearRangeModel if the\n     * new value is not in the current decade.\n     */\n    private incrementFocusYearBy(value: number): void {\n        this._focusedYear = this._focusedYear + value;\n        if (!this.yearRangeModel.inRange(this._focusedYear)) {\n            if (value > 0) {\n                this.yearRangeModel = this.yearRangeModel.nextDecade();\n            } else {\n                this.yearRangeModel = this.yearRangeModel.previousDecade();\n            }\n        }\n        this._datepickerFocusService.focusCell(this._elRef);\n    }\n\n    /**\n     * Calls the DateNavigationService to update the year value of the calendar.\n     * Also changes the view to the daypicker.\n     */\n    changeYear(year: number): void {\n        this._dateNavigationService.changeYear(year);\n        this._viewManagerService.changeToDayView();\n    }\n\n    /**\n     * Updates the YearRangeModel to the previous decade.\n     */\n    previousDecade(): void {\n        this.yearRangeModel = this.yearRangeModel.previousDecade();\n        // Year in the yearpicker is not focused because while navigating to a different decade,\n        // you want the focus to remain on the decade switcher arrows.\n    }\n\n    /**\n     * Updates the YearRangeModel to the current decade.\n     */\n    currentDecade(): void {\n        if (!this.yearRangeModel.inRange(this._dateNavigationService.today.year)) {\n            this.yearRangeModel = this.yearRangeModel.currentDecade();\n        }\n        this._datepickerFocusService.focusCell(this._elRef);\n    }\n\n    /**\n     * Updates the YearRangeModel to the next decade.\n     */\n    nextDecade(): void {\n        this.yearRangeModel = this.yearRangeModel.nextDecade();\n        // Year in the yearpicker is not focused because while navigating to a different decade,\n        // you want the focus to remain on the decade switcher arrows.\n    }\n\n    /**\n     * Compares the year passed to the focused year and returns the tab index.\n     */\n    getTabIndex(year: number): number {\n        if (!this.yearRangeModel.inRange(this._focusedYear)) {\n            if (this.yearRangeModel.inRange(this.calendarYear)) {\n                this._focusedYear = this.calendarYear;\n            } else {\n                this._focusedYear = this.yearRangeModel.middleYear;\n            }\n        }\n        return this._focusedYear === year ? 0 : -1;\n    }\n\n    /**\n     * Handles the Keyboard arrow navigation for the yearpicker.\n     */\n    @HostListener(\"keydown\", [\"$event\"])\n    onKeyDown(event: KeyboardEvent) {\n        // NOTE: Didn't move this to the date navigation service because\n        // the logic is fairly simple and it didn't make sense for me\n        // to create extra observables just to move this logic to the service.\n        if (event) {\n            const keyCode: number = event.keyCode;\n            if (keyCode === UP_ARROW) {\n                event.preventDefault();\n                this.incrementFocusYearBy(-1);\n            } else if (keyCode === DOWN_ARROW) {\n                event.preventDefault();\n                this.incrementFocusYearBy(1);\n            } else if (keyCode === RIGHT_ARROW) {\n                event.preventDefault();\n                this.incrementFocusYearBy(5);\n            } else if (keyCode === LEFT_ARROW) {\n                event.preventDefault();\n                this.incrementFocusYearBy(-5);\n            }\n        }\n    }\n\n    /**\n     * Focuses on the current calendar year when the View is initialized.\n     */\n    ngAfterViewInit() {\n        this._datepickerFocusService.focusCell(this._elRef);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule, Type} from \"@angular/core\";\n\nimport {ClrIconModule} from \"../../icon/icon.module\";\nimport {ClrConditionalModule} from \"../../utils/conditional/conditional.module\";\nimport {ClrFocusTrapModule} from \"../../utils/focus-trap/focus-trap.module\";\nimport {ClrHostWrappingModule} from \"../../utils/host-wrapping/host-wrapping.module\";\n\nimport {ClrCalendar} from \"./calendar\";\nimport {ClrDateContainer} from \"./date-container\";\nimport {ClrDateInput} from \"./date-input\";\nimport {ClrDatepickerViewManager} from \"./datepicker-view-manager\";\nimport {ClrDay} from \"./day\";\nimport {ClrDaypicker} from \"./daypicker\";\nimport {ClrMonthpicker} from \"./monthpicker\";\nimport {ClrYearpicker} from \"./yearpicker\";\n\nexport const CLR_DATEPICKER_DIRECTIVES: Type<any>[] = [\n    ClrDay, ClrDateContainer, ClrDateInput, ClrDatepickerViewManager, ClrMonthpicker, ClrYearpicker, ClrDaypicker,\n    ClrCalendar\n];\n\n@NgModule({\n    imports: [CommonModule, ClrHostWrappingModule, ClrConditionalModule, ClrIconModule, ClrFocusTrapModule],\n    declarations: [CLR_DATEPICKER_DIRECTIVES],\n    exports: [CLR_DATEPICKER_DIRECTIVES],\n    entryComponents: [ClrDateContainer]\n})\nexport class ClrDatepickerModule {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, EventEmitter, forwardRef, Input, Output} from \"@angular/core\";\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from \"@angular/forms\";\n\n/**\n * Private counter to generate unique IDs for the checkboxes, to bind the labels to them.\n */\nlet latestId = 0;\n\n/**\n * @deprecated ClrCheckbox will be renamed to ClrCheckboxDeprecated in 0.12, and will be replaced with a new\n * implementation in 0.13, so if you import it you will need to update your references.\n */\n@Component({\n    selector: \"clr-checkbox\",\n    template: `\n        <!--\n            FIXME: We are not subscribed to the change event but the click event here.\n            The reason for that is because checkboxes behave differently on IE & Edge.\n            https://stackoverflow.com/a/19447939\n            \n            To fix that, we listen to every click event and then toggle the checkbox manually\n            to make it behave the same way across the browsers we support.\n            \n            This works for cases when users toggle the checkbox using the keyboard too:\n            https://stackoverflow.com/questions/27878940/spacebar-triggering-click-event-on-checkbox\n        -->\n        <input type=\"checkbox\" [attr.aria-labelledby]=\"clrAriaLabeledBy\"\n               [id]=\"id\" [name]=\"name\" [checked]=\"checked\"\n               [indeterminate]=\"indeterminate\" [disabled]=\"disabled\"\n               (blur)=\"touch()\" (click)=\"checkIndeterminateState()\">\n        <label [attr.for]=\"id\">\n            <ng-content></ng-content>\n        </label>\n    `,\n    host: {\"[class.checkbox]\": \"!inline\", \"[class.checkbox-inline]\": \"inline\", \"[class.disabled]\": \"disabled\"},\n    /*\n     * This provider lets us declare our checkbox as a ControlValueAccessor,\n     * which allows us to use [(ngModel)] directly on our component,\n     * with all the automatic features wiring that come with it.\n     */\n    providers: [{provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ClrCheckboxDeprecated), multi: true}]\n})\nexport class ClrCheckboxDeprecated implements ControlValueAccessor {\n    // If our host has an ID attribute, we use this instead of our index.\n    @Input(\"id\")\n    _id: string = (latestId++).toString();\n\n    public get id() {\n        return `clr-checkbox-${this._id}`;\n    }\n\n    // If host provides an clrAriaLabeledBy input, we apply it to the checkbox\n    @Input(\"clrAriaLabeledBy\") public clrAriaLabeledBy: string = null;\n\n    // If our host has a name attribute, we apply it to the checkbox.\n    @Input(\"name\") public name: string = null;\n\n    // If the host is disabled we apply it to the checkbox\n    @Input(\"clrDisabled\") public disabled: boolean = false;\n\n    // Support for inline checkboxes, adds the necessary class to the host\n    @Input(\"clrInline\") public inline = false;\n\n    private _checked = false;\n\n    public get checked() {\n        return this._checked;\n    }\n\n    @Input(\"clrChecked\")\n    public set checked(value: boolean) {\n        if (value !== this._checked) {\n            if (this._indeterminate) {\n                this.setIndeterminate(false);\n            }\n            this.setChecked(value);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    public get indeterminate() {\n        return this._indeterminate;\n    }\n\n    @Input(\"clrIndeterminate\")\n    public set indeterminate(value: boolean) {\n        if (this._indeterminate !== value) {\n            if (this._checked) {\n                this.setChecked(false);\n            }\n            this.setIndeterminate(value);\n        }\n    }\n\n    @Output(\"clrIndeterminateChange\")\n    public indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n    private setIndeterminate(value: boolean) {\n        this._indeterminate = value;\n        this.indeterminateChange.emit(this._indeterminate);\n    }\n\n    private setChecked(value: boolean) {\n        this._checked = value;\n        this.change.emit(this._checked);\n    }\n\n    @Output(\"clrCheckedChange\") public change = new EventEmitter<boolean>(false);\n\n    public toggle() {\n        this.checked = !this.checked;\n        this.onChangeCallback(this.checked);\n    }\n\n    writeValue(value: any): void {\n        if (value === null) {\n            value = false;\n        }\n        if (value !== this.checked) {\n            this.checked = value;\n        }\n    }\n\n    /*\n     * These callbacks will be given to us through the ControlValueAccessor interface,\n     * and we need to call them when the user interacts with the checkbox.\n     */\n    private onChangeCallback = (_: any) => {};\n\n    registerOnChange(onChange: any): void {\n        this.onChangeCallback = onChange;\n    }\n\n    private onTouchedCallback = () => {};\n\n    registerOnTouched(onTouched: any): void {\n        this.onTouchedCallback = onTouched;\n    }\n\n    public touch() {\n        this.onTouchedCallback();\n    }\n\n    checkIndeterminateState(): void {\n        if (!this.disabled) {\n            this.toggle();\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule, Type} from \"@angular/core\";\nimport {ClrCheckboxDeprecated} from \"./checkbox\";\n\nexport const CLR_CHECKBOX_DIRECTIVES: Type<any>[] = [ClrCheckboxDeprecated];\n\n@NgModule({imports: [CommonModule], declarations: [CLR_CHECKBOX_DIRECTIVES], exports: [CLR_CHECKBOX_DIRECTIVES]})\nexport class ClrCheckboxModule {}\n\n/* tslint:disable variable-name */\n/** @deprecated since 0.11 */\nexport interface Checkbox extends ClrCheckboxDeprecated {}\n/** @deprecated since 0.11 */\nexport const Checkbox = ClrCheckboxDeprecated;\n/** @deprecated since 0.12 */\nexport interface ClrCheckbox extends ClrCheckboxDeprecated {}\n/** @deprecated since 0.12 */\nexport const ClrCheckbox = ClrCheckboxDeprecated;\n/* tslint:enable variable-name */\n/** @deprecated since 0.11 */\nexport const CHECKBOX_DIRECTIVES = CLR_CHECKBOX_DIRECTIVES;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\n\nimport {ClrDatepickerModule} from \"../forms/datepicker/datepicker.module\";\nimport {ClrCheckboxModule} from \"./checkbox/checkbox.module\";\n\n@NgModule({imports: [CommonModule], exports: [ClrCheckboxModule, ClrDatepickerModule]})\nexport class ClrFormsModule {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\nimport {LoadingListener} from \"../../../utils/loading/loading-listener\";\n\n@Injectable()\nexport class Expand implements LoadingListener {\n    public expandable: number = 0;\n    public replace: boolean = false;\n\n    private _loading: boolean = false;\n    get loading(): boolean {\n        return this._loading;\n    }\n\n    set loading(value: boolean) {\n        value = !!value;\n        if (value !== this._loading) {\n            this._loading = value;\n        }\n    }\n\n    private _expanded: boolean = false;\n    get expanded(): boolean {\n        return this._expanded;\n    }\n\n    set expanded(value: boolean) {\n        value = !!value;\n        if (value !== this._expanded) {\n            this._expanded = value;\n            this._animate.next();\n            this._expandChange.next(value);\n        }\n    }\n\n    // TODO: Move this to the datagrid RowExpand.\n    // I spent some time doing this but ran into a couple of issues\n    // Will take care of this later.\n    private _animate: Subject<any> = new Subject<any>();\n    public get animate(): Observable<boolean> {\n        return this._animate.asObservable();\n    }\n\n    private _expandChange: Subject<boolean> = new Subject<boolean>();\n    public get expandChange(): Observable<boolean> {\n        return this._expandChange.asObservable();\n    }\n\n\n    startLoading(): void {\n        this.loading = true;\n    }\n\n    doneLoading(): void {\n        this.loading = false;\n        this._animate.next();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, EventEmitter, Input, OnDestroy, OnInit, Output, TemplateRef, ViewContainerRef} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {Expand} from \"./providers/expand\";\n\n/**\n * TODO: make this a reusable directive outside of Datagrid, like [clrLoading].\n */\n@Directive({selector: \"[clrIfExpanded]\"})\nexport class IfExpanded implements OnInit, OnDestroy {\n    private _expanded: boolean = false;\n\n    get expanded(): boolean {\n        return this._expanded;\n    }\n\n    @Input(\"clrIfExpanded\")\n    set expanded(value: boolean) {\n        if (typeof value === \"boolean\") {\n            this.expand.expanded = value;\n            this._expanded = value;\n        }\n    }\n\n    @Output(\"clrIfExpandedChange\") expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>(true);\n\n    constructor(private template: TemplateRef<any>, private container: ViewContainerRef, private expand: Expand) {\n        expand.expandable++;\n        this._subscriptions.push(expand.expandChange.subscribe(() => {\n            this.updateView();\n            this.expandedChange.emit(this.expand.expanded);\n        }));\n    }\n\n    /**\n     * Subscriptions to all the services and queries changes\n     */\n    private _subscriptions: Subscription[] = [];\n\n    private updateView() {\n        if (this.expand.expanded && this.container.length !== 0) {\n            return;\n        }\n        if (this.expand.expanded) {\n            // Should we pass a context? I don't see anything useful to pass right now,\n            // but we can come back to it in the future as a solution for additional features.\n            this.container.createEmbeddedView(this.template);\n        } else {\n            // TODO: Move when we move the animation logic to Datagrid Row Expand\n            // We clear before the animation is over. Not ideal, but doing better would involve a much heavier\n            // process for very little gain. Once Angular animations are dynamic enough, we should be able to\n            // get the optimal behavior.\n            this.container.clear();\n        }\n    }\n\n    ngOnInit() {\n        this.updateView();\n    }\n\n    ngOnDestroy() {\n        this.expand.expandable--;\n        this._subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Type} from \"@angular/core\";\nimport {IfExpanded} from \"./if-expanded\";\n\nexport * from \"./if-expanded\";\n\nexport const EXPAND_DIRECTIVES: Type<any>[] = [IfExpanded];\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\n\nimport {EXPAND_DIRECTIVES} from \"./index\";\n\n@NgModule({imports: [CommonModule], declarations: [EXPAND_DIRECTIVES], exports: [EXPAND_DIRECTIVES]})\nexport class ClrIfExpandModule {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, ElementRef, EventEmitter, HostListener, Input, Output} from \"@angular/core\";\n\n@Directive({selector: \"[clrOutsideClick]\"})\nexport class OutsideClick {\n    constructor(private el: ElementRef) {}\n\n    @Input(\"clrStrict\") strict = false;\n\n    @Output(\"clrOutsideClick\") outsideClick = new EventEmitter<any>(false);\n\n    @HostListener(\"document:click\", [\"$event\"])\n    documentClick(event: MouseEvent) {\n        const target = event.target;         // Get the element in the DOM on which the mouse was clicked\n        const host = this.el.nativeElement;  // Get the current actionMenu native HTML element\n\n        if (target === host) {\n            return;\n        }\n        if (!this.strict && host.contains(target)) {\n            return;\n        }\n        this.outsideClick.emit(event);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Type} from \"@angular/core\";\nimport {OutsideClick} from \"./outside-click\";\n\nexport * from \"./outside-click\";\n\nexport const OUSTIDE_CLICK_DIRECTIVES: Type<any>[] = [OutsideClick];\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\n\nimport {OUSTIDE_CLICK_DIRECTIVES} from \"./index\";\n\n@NgModule({imports: [CommonModule], declarations: [OUSTIDE_CLICK_DIRECTIVES], exports: [OUSTIDE_CLICK_DIRECTIVES]})\nexport class ClrOutsideClickModule {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * If we someday want to be able to render the datagrid in a webworker,\n * this is where we would test if we're in headless mode. Right now it's not testing anything, but any access\n * to native DOM elements' methods and properties in the Datagrid happens here.\n */\n\nimport {Injectable} from \"@angular/core\";\n\n@Injectable()\nexport class DomAdapter {\n    userDefinedWidth(element: any): number {\n        element.classList.add(\"datagrid-cell-width-zero\");\n        const userDefinedWidth = parseInt(getComputedStyle(element).getPropertyValue(\"width\"), 10);\n        element.classList.remove(\"datagrid-cell-width-zero\");\n        return userDefinedWidth;\n    }\n\n    scrollBarWidth(element: any) {\n        return element.offsetWidth - element.clientWidth;\n    }\n\n    scrollWidth(element: any) {\n        return element.scrollWidth || 0;\n    }\n\n    computedHeight(element: any): number {\n        return parseInt(getComputedStyle(element).getPropertyValue(\"height\"), 10);\n    }\n\n    clientRectHeight(element: any): number {\n        return parseInt(element.getBoundingClientRect().height, 10);\n    }\n\n    clientRectRight(element: any): number {\n        return parseInt(element.getBoundingClientRect().right, 10);\n    }\n\n    clientRectWidth(element: any): number {\n        return parseInt(element.getBoundingClientRect().width, 10);\n    }\n\n    minWidth(element: any): number {\n        return parseInt(getComputedStyle(element).getPropertyValue(\"min-width\"), 10);\n    }\n\n    focus(element: any): void {\n        element.focus();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\n\n@Injectable()\nexport class DatagridRenderOrganizer {\n    private alreadySized = false;\n\n    public widths: {px: number, strict: boolean}[] = [];\n\n    protected _noLayout = new Subject<boolean>();\n    public get noLayout(): Observable<boolean> {\n        return this._noLayout.asObservable();\n    }\n\n    protected _clearWidths = new Subject<any>();\n    public get clearWidths(): Observable<any> {\n        return this._clearWidths.asObservable();\n    }\n\n    protected _detectStrictWidths = new Subject<any>();\n    public get detectStrictWidths(): Observable<any> {\n        return this._detectStrictWidths.asObservable();\n    }\n\n    protected _tableMode = new Subject<boolean>();\n    public get tableMode(): Observable<boolean> {\n        return this._tableMode.asObservable();\n    }\n\n    protected _computeWidths = new Subject<any>();\n    public get computeWidths(): Observable<any> {\n        return this._computeWidths.asObservable();\n    }\n\n    protected _alignColumns = new Subject<any>();\n    public get alignColumns(): Observable<any> {\n        return this._alignColumns.asObservable();\n    }\n\n    public scrollbar = new Subject<any>();\n    public scrollbarWidth = new Subject<number>();\n\n    protected _done = new Subject<any>();\n    public get done(): Observable<any> {\n        return this._done.asObservable();\n    }\n\n    public resize() {\n        this.widths.length = 0;\n        this._noLayout.next(true);\n        if (this.alreadySized) {\n            this._clearWidths.next();\n        }\n        this._detectStrictWidths.next();\n        this._tableMode.next(true);\n        this._computeWidths.next();\n        this._tableMode.next(false);\n        this._alignColumns.next();\n        this._noLayout.next(false);\n        this.scrollbar.next();\n        this.alreadySized = true;\n        this._done.next();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * This is a hack that we have to write for now because of bugs and limitations in Angular,\n * please do not use this as an example.\n */\n\nimport {Directive, ElementRef, Renderer2} from \"@angular/core\";\n\nimport {Expand} from \"../../../utils/expand/providers/expand\";\nimport {DomAdapter} from \"../render/dom-adapter\";\nimport {DatagridRenderOrganizer} from \"../render/render-organizer\";\n\n@Directive({selector: \"clr-dg-row\"})\nexport class DatagridRowExpandAnimation {\n    constructor(private el: ElementRef, private domAdapter: DomAdapter, private renderer: Renderer2,\n                private expand: Expand, private renderOrganizer: DatagridRenderOrganizer) {\n        if (expand && expand.animate) {\n            expand.animate.subscribe(() => {\n                // We already had an animation waiting, so we just have to run in, not prepare again\n                if (this.oldHeight) {\n                    setTimeout(() => this.run());\n                } else {\n                    this.animate();\n                }\n            });\n        }\n    }\n\n    private running: any;\n    private oldHeight: number;\n\n    /*\n     * Dirty manual animation handling, but we have no way to use dynamic heights in Angular's current API.\n     * They're working on it, but have no ETA.\n     */\n    private animate() {\n        // Check if we do have web-animations available. If not, just skip the animation.\n        if (!this.el.nativeElement.animate) {\n            return;\n        }\n\n        // We had an animation running, we skip to the end\n        if (this.running) {\n            this.running.finish();\n        }\n\n        this.oldHeight = this.domAdapter.computedHeight(this.el.nativeElement);\n        // We set the height of the element immediately to avoid a flicker before the animation starts.\n        this.renderer.setStyle(this.el.nativeElement, \"height\", this.oldHeight + \"px\");\n        this.renderer.setStyle(this.el.nativeElement, \"overflow-y\", \"hidden\");\n        setTimeout(() => {\n            if (this.expand.loading) {\n                return;\n            }\n            this.run();\n        });\n    }\n\n    private run() {\n        this.renderer.setStyle(this.el.nativeElement, \"height\", null);\n        // I don't like realigning the columns before the animation, since the scrollbar could appear or disappear\n        // halfway, but that's a compromise we have to make for now. We can look into a smarter fix later.\n        this.renderOrganizer.scrollbar.next();\n        const newHeight = this.domAdapter.computedHeight(this.el.nativeElement);\n        this.running = this.el.nativeElement.animate(\n            {height: [this.oldHeight + \"px\", newHeight + \"px\"], overflowY: [\"hidden\", \"hidden\"], easing: \"ease-in-out\"},\n            {duration: 200});\n        this.running.onfinish = () => {\n            this.renderer.setStyle(this.el.nativeElement, \"overflow-y\", null);\n            delete this.running;\n        };\n        delete this.oldHeight;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nexport abstract class CustomFilter {}",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\n\n/*\n * This provider implements some form of synchronous debouncing through a lock pattern\n * to avoid emitting multiple state changes for a single user action.\n */\n@Injectable()\nexport class StateDebouncer {\n    /**\n     * The Observable that lets other classes subscribe to global state changes\n     */\n    private _change = new Subject<void>();\n    // We do not want to expose the Subject itself, but the Observable which is read-only\n    public get change(): Observable<void> {\n        return this._change.asObservable();\n    }\n\n    /*\n     * This is the lock, to only emit once all the changes have finished processing\n     */\n    private nbChanges = 0;\n\n    public changeStart() {\n        this.nbChanges++;\n    }\n\n    public changeDone() {\n        if (--this.nbChanges === 0) {\n            this._change.next();\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\nimport {StateDebouncer} from \"./state-debouncer.provider\";\n\n@Injectable()\nexport class Page {\n    constructor(private stateDebouncer: StateDebouncer) {}\n\n    /**\n     * Page size, a value of 0 means no pagination\n     */\n    private _size = 0;\n    public get size(): number {\n        return this._size;\n    }\n    public set size(size: number) {\n        const oldSize = this._size;\n        if (size !== oldSize) {\n            this._size = size;\n            if (size === 0) {\n                this._current = 1;\n            } else {\n                // Yeap. That's the formula to keep the first item from the old page still\n                // displayed in the new one.\n                this._current = Math.floor(oldSize / size * (this._current - 1)) + 1;\n            }\n            // We always emit an event even if the current page index didn't change, because\n            // the size changing means the items inside the page are different\n            this._change.next(this._current);\n            this._sizeChange.next(this._size);\n        }\n    }\n\n\n    /**\n     * Total items (needed to guess the last page)\n     */\n    private _totalItems = 0;\n    public get totalItems(): number {\n        return this._totalItems;\n    }\n    public set totalItems(total: number) {\n        this._totalItems = total;\n        // If we have less items than before, we might need to change the current page\n        if (this.current > this.last) {\n            this.current = this.last;\n        }\n    }\n\n    /**\n     * Last page\n     */\n    private _last: number;\n    public get last(): number {\n        if (this._last) {\n            return this._last;\n        }\n        // If the last page isn't known, we compute it from the last item's index\n        if (this.size > 0 && this.totalItems) {\n            return Math.ceil(this.totalItems / this.size);\n        }\n        return 1;\n    }\n    public set last(page: number) {\n        this._last = page;\n    }\n\n    /**\n     * The Observable that lets other classes subscribe to page changes\n     */\n    private _change = new Subject<number>();\n    // We do not want to expose the Subject itself, but the Observable which is read-only\n    public get change(): Observable<number> {\n        return this._change.asObservable();\n    }\n\n    private _sizeChange = new Subject<number>();\n\n    public get sizeChange(): Observable<number> {\n        return this._sizeChange.asObservable();\n    }\n\n    /**\n     * Current page\n     */\n    private _current = 1;\n    public get current(): number {\n        return this._current;\n    }\n    public set current(page: number) {\n        if (page !== this._current) {\n            this.stateDebouncer.changeStart();\n            this._current = page;\n            this._change.next(page);\n            this.stateDebouncer.changeDone();\n        }\n    }\n\n    /**\n     * Moves to the previous page if it exists\n     */\n    public previous() {\n        if (this.current > 1) {\n            this.current--;\n        }\n    }\n\n    /**\n     * Moves to the next page if it exists\n     */\n    public next() {\n        if (this.current < this.last) {\n            this.current++;\n        }\n    }\n\n    /**\n     * Index of the first item displayed on the current page, starting at 0\n     */\n    public get firstItem(): number {\n        if (this.size === 0) {\n            return 0;\n        }\n        return (this.current - 1) * this.size;\n    }\n\n    /**\n     * Index of the last item displayed on the current page, starting at 0\n     */\n    public get lastItem(): number {\n        if (this.size === 0) {\n            return this.totalItems - 1;\n        }\n        let lastInPage = (this.current) * this.size - 1;\n        if (this.totalItems) {\n            lastInPage = Math.min(lastInPage, this.totalItems - 1);\n        }\n        return lastInPage;\n    }\n\n    /**\n     * Resets the page size to 0\n     */\n    public resetPageSize(): void {\n        this.size = 0;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\n\nimport {ClrDatagridFilterInterface} from \"../interfaces/filter.interface\";\nimport {Page} from \"./page\";\nimport {StateDebouncer} from \"./state-debouncer.provider\";\n\n@Injectable()\nexport class FiltersProvider {\n    constructor(private _page: Page, private stateDebouncer: StateDebouncer) {}\n    /**\n     * This subject is the list of filters that changed last, not the whole list.\n     * We emit a list rather than just one filter to allow batch changes to several at once.\n     */\n    private _change = new Subject<ClrDatagridFilterInterface<any>[]>();\n    // We do not want to expose the Subject itself, but the Observable which is read-only\n    public get change(): Observable<ClrDatagridFilterInterface<any>[]> {\n        return this._change.asObservable();\n    }\n\n    /**\n     * List of all filters, whether they're active or not\n     */\n    private _all: RegisteredFilter<any>[] = [];\n\n    /**\n     * Tests if at least one filter is currently active\n     */\n    public hasActiveFilters(): boolean {\n        // We do not use getActiveFilters() because this function will be called much more often\n        // and stopping the loop early might be relevant.\n        for (const {filter} of this._all) {\n            if (filter && filter.isActive()) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns a list of all currently active filters\n     */\n    public getActiveFilters(): ClrDatagridFilterInterface<any>[] {\n        const ret: ClrDatagridFilterInterface<any>[] = [];\n        for (const {filter} of this._all) {\n            if (filter && filter.isActive()) {\n                ret.push(filter);\n            }\n        }\n        return ret;\n    }\n\n    /**\n     * Registers a filter, and returns a deregistration function\n     */\n    public add<F extends ClrDatagridFilterInterface<any>>(filter: F): RegisteredFilter<F> {\n        const index = this._all.length;\n        const subscription = filter.changes.subscribe(() => this.resetPageAndEmitFilterChange([filter]));\n        let hasUnregistered = false;\n        const registered = new RegisteredFilter(filter, () => {\n            if (hasUnregistered) {\n                return;\n            }\n            subscription.unsubscribe();\n            this._all.splice(index, 1);\n            if (filter.isActive()) {\n                this.resetPageAndEmitFilterChange([]);\n            }\n            hasUnregistered = true;\n        });\n        this._all.push(registered);\n        if (filter.isActive()) {\n            this.resetPageAndEmitFilterChange([filter]);\n        }\n        return registered;\n    }\n\n    /**\n     * Accepts an item if it is accepted by all currently active filters\n     */\n    public accepts(item: any): boolean {\n        for (const {filter} of this._all) {\n            if (filter && filter.isActive() && !filter.accepts(item)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private resetPageAndEmitFilterChange(filters: ClrDatagridFilterInterface<any>[]) {\n        this.stateDebouncer.changeStart();\n        // filtering may change the page number such that current page number doesn't exist in the filtered dataset.\n        // So here we always set the current page to 1 so that it'll fetch first page's data with the given filter.\n        this._page.current = 1;\n        this._change.next(filters);\n        this.stateDebouncer.changeDone();\n    }\n}\n\nexport class RegisteredFilter<F extends ClrDatagridFilterInterface<any>> {\n    constructor(public filter: F, public unregister: () => void) {}\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {OnDestroy} from \"@angular/core\";\nimport {ClrDatagridFilterInterface} from \"../interfaces/filter.interface\";\nimport {FiltersProvider, RegisteredFilter} from \"../providers/filters\";\n\nexport abstract class DatagridFilterRegistrar<F extends ClrDatagridFilterInterface<any>> implements OnDestroy {\n    constructor(private filters: FiltersProvider) {}\n\n    public registered: RegisteredFilter<F>;\n\n    public get filter(): F {\n        return this.registered && this.registered.filter;\n    }\n\n    public setFilter(filter: F|RegisteredFilter<F>) {\n        // If we previously had another filter, we unregister it\n        this.deleteFilter();\n        if (filter instanceof RegisteredFilter) {\n            this.registered = <RegisteredFilter<F>>filter;\n        } else if (filter) {\n            this.registered = this.filters.add(<F>filter);\n        }\n    }\n\n    public deleteFilter() {\n        if (this.registered) {\n            this.registered.unregister();\n            delete this.registered;\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this.deleteFilter();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\n\nimport {Point} from \"../../popover/common/popover\";\nimport {PopoverOptions} from \"../../popover/common/popover-options.interface\";\n\nimport {ClrDatagridFilterInterface} from \"./interfaces/filter.interface\";\nimport {CustomFilter} from \"./providers/custom-filter\";\nimport {FiltersProvider, RegisteredFilter} from \"./providers/filters\";\nimport {DatagridFilterRegistrar} from \"./utils/datagrid-filter-registrar\";\n\n\n/**\n * Custom filter that can be added in any column to override the default object property string filter.\n * The reason this is not just an input on DatagridColumn is because we need the filter's template to be projected,\n * since it can be anything (not just a text input).\n */\n@Component({\n    selector: \"clr-dg-filter\",\n    // We register this component as a CustomFilter, for the parent column to detect it.\n    providers: [{provide: CustomFilter, useExisting: ClrDatagridFilter}],\n    template: `\n        <button #anchor class=\"datagrid-filter-toggle\" (click)=\"toggle()\"\n            [class.datagrid-filter-open]=\"open\" [class.datagrid-filtered]=\"active\"\n            type=\"button\"></button>\n\n        <ng-template [(clrPopoverOld)]=\"open\" [clrPopoverOldAnchor]=\"anchor\" [clrPopoverOldAnchorPoint]=\"anchorPoint\"\n             [clrPopoverOldPopoverPoint]=\"popoverPoint\" [clrPopoverOldOptions]=\"popoverOptions\">\n            <div class=\"datagrid-filter\">\n                <!-- FIXME: this whole filter part needs a final design before we can try to have a cleaner DOM -->\n                <div class=\"datagrid-filter-close-wrapper\">\n                    <button type=\"button\" class=\"close\" \n                        aria-label=\"Close\" (click)=\"open = false\"\n                        type=\"button\">\n                        <clr-icon aria-hidden=\"true\" shape=\"close\"></clr-icon>\n                    </button>\n                </div>\n    \n                <ng-content></ng-content>\n            </div>\n        </ng-template>\n    `\n})\nexport class ClrDatagridFilter extends DatagridFilterRegistrar<ClrDatagridFilterInterface<any>> implements\n    CustomFilter {\n    constructor(_filters: FiltersProvider) {\n        super(_filters);\n    }\n\n    public anchorPoint: Point = Point.RIGHT_BOTTOM;\n    public popoverPoint: Point = Point.RIGHT_TOP;\n    public popoverOptions: PopoverOptions = {allowMultipleOpen: true};\n    /**\n     * Tracks whether the filter dropdown is open or not\n     */\n    private _open = false;\n    public get open() {\n        return this._open;\n    }\n\n    @Input(\"clrDgFilterOpen\")\n    public set open(open: boolean) {\n        const boolOpen = !!open;\n        if (boolOpen !== this._open) {\n            this._open = boolOpen;\n            this.openChanged.emit(boolOpen);\n        }\n    }\n\n    @Output(\"clrDgFilterOpenChange\") public openChanged = new EventEmitter<boolean>(false);\n\n    @Input(\"clrDgFilter\")\n    public set customFilter(filter: ClrDatagridFilterInterface<any>|RegisteredFilter<ClrDatagridFilterInterface<any>>) {\n        this.setFilter(filter);\n    }\n\n    /**\n     * Indicates if the filter is currently active\n     */\n    public get active() {\n        return !!this.filter && this.filter.isActive();\n    }\n\n    /**\n     * Shows/hides the filter dropdown\n     */\n    public toggle() {\n        this.open = !this.open;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\nimport {ClrDatagridFilterInterface} from \"../../interfaces/filter.interface\";\nimport {ClrDatagridStringFilterInterface} from \"../../interfaces/string-filter.interface\";\n\nexport class DatagridStringFilterImpl implements ClrDatagridFilterInterface<any> {\n    constructor(public filterFn: ClrDatagridStringFilterInterface<any>) {}\n\n    /**\n     * The Observable required as part of the Filter interface\n     */\n    private _changes = new Subject<string>();\n    // We do not want to expose the Subject itself, but the Observable which is read-only\n    public get changes(): Observable<string> {\n        return this._changes.asObservable();\n    }\n\n    /**\n     * Raw input value\n     */\n    private _rawValue: string = \"\";\n    public get value(): string {\n        return this._rawValue;\n    }\n    /**\n     * Input value converted to lowercase\n     */\n    private _lowerCaseValue: string = \"\";\n    public get lowerCaseValue() {\n        return this._lowerCaseValue;\n    }\n    /**\n     * Common setter for the input value\n     */\n    public set value(value: string) {\n        if (!value) {\n            value = \"\";\n        }\n        if (value !== this._rawValue) {\n            this._rawValue = value;\n            this._lowerCaseValue = value.toLowerCase().trim();\n            this._changes.next(value);\n        }\n    }\n\n    /**\n     * Indicates if the filter is currently active, meaning the input is not empty\n     */\n    public isActive(): boolean {\n        return !!this.value;\n    }\n\n    /**\n     * Tests if an item matches a search text\n     */\n    public accepts(item: any): boolean {\n        // We always test with the lowercase value of the input, to stay case insensitive\n        return this.filterFn.accepts(item, this.lowerCaseValue);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {AfterViewInit, Component, ElementRef, EventEmitter, Input, Output, ViewChild} from \"@angular/core\";\n\nimport {ClrDatagridFilter} from \"../../datagrid-filter\";\nimport {ClrDatagridStringFilterInterface} from \"../../interfaces/string-filter.interface\";\nimport {CustomFilter} from \"../../providers/custom-filter\";\nimport {FiltersProvider, RegisteredFilter} from \"../../providers/filters\";\nimport {DomAdapter} from \"../../render/dom-adapter\";\nimport {DatagridFilterRegistrar} from \"../../utils/datagrid-filter-registrar\";\n\nimport {DatagridStringFilterImpl} from \"./datagrid-string-filter-impl\";\n\n@Component({\n    selector: \"clr-dg-string-filter\",\n    providers: [{provide: CustomFilter, useExisting: DatagridStringFilter}],\n    template: `\n        <clr-dg-filter [clrDgFilter]=\"registered\" [(clrDgFilterOpen)]=\"open\">\n            <!--\n                Even though this *ngIf looks useless because the filter container already has one,\n                it prevents NgControlStatus and other directives automatically added by Angular\n                on inputs with NgModel from freaking out because of their host binding changing\n                mid-change detection when the input is destroyed.\n            -->\n            <input #input type=\"text\" name=\"search\" [(ngModel)]=\"value\" *ngIf=\"open\"\n                (keyup.enter)=\"close()\" (keyup.escape)=\"close()\"/>\n        </clr-dg-filter>\n    `\n})\nexport class DatagridStringFilter extends DatagridFilterRegistrar<DatagridStringFilterImpl> implements CustomFilter,\n                                                                                                       AfterViewInit {\n    constructor(filters: FiltersProvider, private domAdapter: DomAdapter) {\n        super(filters);\n    }\n\n    /**\n     * Customizable filter logic based on a search text\n     */\n    @Input(\"clrDgStringFilter\")\n    set customStringFilter(value: ClrDatagridStringFilterInterface<any>|RegisteredFilter<DatagridStringFilterImpl>) {\n        if (value instanceof RegisteredFilter) {\n            this.setFilter(value);\n        } else {\n            this.setFilter(new DatagridStringFilterImpl(<ClrDatagridStringFilterInterface<any>>value));\n        }\n    }\n\n    /**\n     * Indicates if the filter dropdown is open\n     */\n    public open: boolean = false;\n\n    /**\n     * We need the actual input element to automatically focus on it\n     */\n    @ViewChild(\"input\") public input: ElementRef;\n\n    /**\n     * We grab the ClrDatagridFilter we wrap to register this StringFilter to it.\n     */\n    @ViewChild(ClrDatagridFilter) public filterContainer: ClrDatagridFilter;\n    ngAfterViewInit() {\n        this.filterContainer.openChanged.subscribe((open: boolean) => {\n            if (open) {\n                // We need the timeout because at the time this executes, the input isn't\n                // displayed yet.\n                setTimeout(() => {\n                    this.domAdapter.focus(this.input.nativeElement);\n                });\n            }\n        });\n    }\n\n    /**\n     * Common setter for the input value\n     */\n    public get value() {\n        return this.filter.value;\n    }\n    @Input(\"clrFilterValue\")\n    public set value(value: string) {\n        if (!this.filter) {\n            return;\n        }\n        if (!value) {\n            value = \"\";\n        }\n        if (value !== this.filter.value) {\n            this.filter.value = value;\n            this.filterValueChange.emit(value);\n        }\n    }\n\n    @Output(\"clrFilterValueChange\") filterValueChange = new EventEmitter();\n\n    public close() {\n        this.open = false;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {AfterContentChecked, ChangeDetectorRef, OnDestroy} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\nimport {WillyWonka} from \"./willy-wonka\";\n\nexport abstract class OompaLoompa implements AfterContentChecked, OnDestroy {\n    // FIXME: Request Injector once we move to Angular 4.2+, it'll allow easier refactors\n    constructor(cdr: ChangeDetectorRef, willyWonka: WillyWonka) {\n        this.subscription = willyWonka.chocolate.subscribe(() => {\n            if (this.latestFlavor !== this.flavor) {\n                cdr.detectChanges();\n            }\n        });\n    }\n\n    private subscription: Subscription;\n\n    private latestFlavor: any;\n\n    abstract get flavor(): any;\n\n    ngAfterContentChecked() {\n        this.latestFlavor = this.flavor;\n    }\n\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Injectable} from \"@angular/core\";\n\n@Injectable()\nexport class RowActionService {\n    private actionableCount = 0;\n\n    public register() {\n        this.actionableCount++;\n    }\n\n    public unregister() {\n        this.actionableCount--;\n    }\n\n    /**\n     * false means no rows with action\n     */\n    public get hasActionableRow(): boolean {\n        return this.actionableCount > 0;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {AfterViewChecked} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\n\n/*\n * After a conversation with the Angular core team, it turns out we don't have much of a choice for our\n * declarative API, we need to fight against change detection and its one-way flow. This is\n * currently the least dirty solution to do what we want.\n *\n * Do not modify or even use this class unless you know exactly what you're doing.\n * It has the potential to trigger change detection loops or kill app performances.\n */\nexport class WillyWonka implements AfterViewChecked {\n    private _chocolate = new Subject<void>();\n\n    public get chocolate(): Observable<void> {\n        return this._chocolate.asObservable();\n    }\n\n    ngAfterViewChecked() {\n        this._chocolate.next();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive} from \"@angular/core\";\nimport {WillyWonka} from \"../../../utils/chocolate/willy-wonka\";\n\n@Directive({selector: \"clr-datagrid\"})\nexport class DatagridWillyWonka extends WillyWonka {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {ChangeDetectorRef, Directive, Optional} from \"@angular/core\";\nimport {OompaLoompa} from \"../../../utils/chocolate/oompa-loompa\";\nimport {RowActionService} from \"../providers/row-action-service\";\nimport {DatagridWillyWonka} from \"./datagrid-willy-wonka\";\n\n@Directive({selector: \"clr-datagrid, clr-dg-row\"})\nexport class ActionableOompaLoompa extends OompaLoompa {\n    private rowActions: RowActionService;\n\n    constructor(cdr: ChangeDetectorRef, @Optional() willyWonka: DatagridWillyWonka, rowActions: RowActionService) {\n        if (!willyWonka) {\n            throw new Error(\"clr-dg-row should only be used inside of a clr-datagrid\");\n        }\n        super(cdr, willyWonka);\n        this.rowActions = rowActions;\n    }\n\n    get flavor() {\n        return this.rowActions.hasActionableRow;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Injectable} from \"@angular/core\";\n\n@Injectable()\nexport class ExpandableRowsCount {\n    private expandableCount = 0;\n\n    public register() {\n        this.expandableCount++;\n    }\n\n    public unregister() {\n        this.expandableCount--;\n    }\n\n    /**\n     * false means no rows with action\n     */\n    public get hasExpandableRow(): boolean {\n        return this.expandableCount > 0;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {ChangeDetectorRef, Directive, Optional} from \"@angular/core\";\nimport {OompaLoompa} from \"../../../utils/chocolate/oompa-loompa\";\nimport {ExpandableRowsCount} from \"../providers/global-expandable-rows\";\nimport {DatagridWillyWonka} from \"./datagrid-willy-wonka\";\n\n@Directive({selector: \"clr-datagrid, clr-dg-row\"})\nexport class ExpandableOompaLoompa extends OompaLoompa {\n    private expandableCount: ExpandableRowsCount;\n\n    constructor(cdr: ChangeDetectorRef, @Optional() willyWonka: DatagridWillyWonka,\n                expandableCount: ExpandableRowsCount) {\n        if (!willyWonka) {\n            throw new Error(\"clr-dg-row should only be used inside of a clr-datagrid\");\n        }\n        super(cdr, willyWonka);\n        this.expandableCount = expandableCount;\n    }\n\n    get flavor() {\n        return this.expandableCount.hasExpandableRow;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n/**\n * Generic accessor for deep object properties\n * that can be specified as simple dot-separated strings.\n */\nexport class NestedProperty {\n    private splitProp: string[];\n\n    constructor(private prop: string) {\n        if (prop.indexOf(\".\") >= 0) {\n            this.splitProp = prop.split(\".\");\n        }\n    }\n\n    // Safe getter for a deep object property, will not throw an error but return\n    // undefined if one of the intermediate properties is null or undefined.\n    public getPropValue(item: any): any {\n        if (this.splitProp) {\n            let value = item;\n            for (const nestedProp of this.splitProp) {\n                if (value == null || typeof value === \"undefined\" || typeof value[nestedProp] === \"undefined\") {\n                    return undefined;\n                }\n                value = value[nestedProp];\n            }\n            return value;\n        } else {\n            return item[this.prop];\n        }\n    }\n}",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {ClrDatagridComparatorInterface} from \"../../interfaces/comparator.interface\";\nimport {NestedProperty} from \"../nested-property\";\n\nexport class DatagridPropertyComparator implements ClrDatagridComparatorInterface<any> {\n    private nestedProp: NestedProperty;\n\n    constructor(public prop: string) {\n        this.nestedProp = new NestedProperty(prop);\n    }\n\n    public compare(a: any, b: any): number {\n        let propA = this.nestedProp.getPropValue(a);\n        let propB = this.nestedProp.getPropValue(b);\n\n        if (typeof propA === \"string\") {\n            propA = propA.toLowerCase();\n        }\n\n        if (typeof propB === \"string\") {\n            propB = propB.toLowerCase();\n        }\n\n        if (typeof propA === \"undefined\" || propA === null) {\n            if (typeof propB === \"undefined\" || propB === null) {\n                return 0;\n            } else {\n                return 1;\n            }\n        } else {\n            if (typeof propB === \"undefined\" || propB === null) {\n                return -1;\n            } else if (propA < propB) {\n                return -1;\n            } else if (propA > propB) {\n                return 1;\n            } else {\n                return 0;\n            }\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {ClrDatagridStringFilterInterface} from \"../../interfaces/string-filter.interface\";\nimport {NestedProperty} from \"../nested-property\";\n\nexport class DatagridPropertyStringFilter implements ClrDatagridStringFilterInterface<any> {\n    private nestedProp: NestedProperty;\n\n    constructor(public prop: string, public exact = false) {\n        this.nestedProp = new NestedProperty(prop);\n    }\n\n    accepts(item: any, search: string): boolean {\n        const propValue = this.nestedProp.getPropValue(item);\n        if (typeof propValue === \"undefined\") {\n            return false;\n        } else if (this.exact) {\n            return (\"\" + propValue).toLowerCase() === search;\n        } else {\n            return (\"\" + propValue).toLowerCase().indexOf(search) >= 0;\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {ElementRef, Injectable, NgZone, Renderer2} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\n\n@Injectable()\nexport class DragDispatcher {\n    private _listeners: Function[];\n\n    // Will be listening to Drag events on the following element\n    handleRef: ElementRef;\n\n    // Extra element to be used for tracking drag movements.\n    handleTrackerRef: ElementRef;\n\n    private _onDragStart: Subject<void> = new Subject<void>();\n    private _onDragMove: Subject<void> = new Subject<void>();\n    private _onDragEnd: Subject<void> = new Subject<void>();\n\n    get onDragStart(): Observable<any> {\n        return this._onDragStart;\n    }\n\n    get onDragMove(): Observable<any> {\n        return this._onDragMove;\n    }\n\n    get onDragEnd(): Observable<any> {\n        return this._onDragEnd;\n    }\n\n    constructor(private _ngZone: NgZone, private _renderer: Renderer2) {}\n\n    addDragListener() {\n        const handleEl = this.handleRef.nativeElement;\n        this._listeners = [\n            this.customDragEvent(handleEl, \"mousedown\", \"mousemove\", \"mouseup\"),\n            this.customDragEvent(handleEl, \"touchstart\", \"touchmove\", \"touchend\")\n        ];\n    }\n\n    customDragEvent(element: HTMLElement, startOnEvent: string, moveOnEvent: string, endOnEvent: string): Function {\n        let dragMoveListener: any;\n        let dragEndListener: any;\n\n        return this._renderer.listen(element, startOnEvent, (startEvent: any) => {\n            this.notifyDragStart(startEvent);\n\n            dragMoveListener = this._ngZone.runOutsideAngular(() => {\n                return this._renderer.listen(\"document\", moveOnEvent, (moveEvent: any) => {\n                    this.notifyDragMove(moveEvent);\n                });\n            });\n\n            dragEndListener = this._renderer.listen(\"document\", endOnEvent, (endEvent: any) => {\n                // Unsubscribing from mouseMoveListener\n                dragMoveListener();\n                this.notifyDragEnd(endEvent);\n                // Unsubscribing from itself\n                dragEndListener();\n            });\n        });\n    }\n\n    notifyDragStart(event: any) {\n        return this._onDragStart.next(event);\n    }\n\n    notifyDragMove(event: any) {\n        return this._onDragMove.next(event);\n    }\n\n    notifyDragEnd(event: any) {\n        return this._onDragEnd.next(event);\n    }\n\n    destroy() {\n        if (this._listeners) {\n            this._listeners.map(event => event());\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\n\nimport {ClrDatagridComparatorInterface} from \"../interfaces/comparator.interface\";\nimport {StateDebouncer} from \"./state-debouncer.provider\";\n\n@Injectable()\nexport class Sort {\n    constructor(private stateDebouncer: StateDebouncer) {}\n\n    /**\n     * Currently active comparator\n     */\n    private _comparator: ClrDatagridComparatorInterface<any>;\n    public get comparator(): ClrDatagridComparatorInterface<any> {\n        return this._comparator;\n    }\n    public set comparator(value: ClrDatagridComparatorInterface<any>) {\n        this.stateDebouncer.changeStart();\n        this._comparator = value;\n        this.emitChange();\n        this.stateDebouncer.changeDone();\n    }\n\n    /**\n     * Ascending order if false, descending if true\n     */\n    private _reverse: boolean = false;\n    public get reverse(): boolean {\n        return this._reverse;\n    }\n    public set reverse(value: boolean) {\n        this.stateDebouncer.changeStart();\n        this._reverse = value;\n        this.emitChange();\n        this.stateDebouncer.changeDone();\n    }\n\n    /**\n     * The Observable that lets other classes subscribe to sort changes\n     */\n    private _change = new Subject<Sort>();\n    private emitChange() {\n        this._change.next(this);\n    }\n    // We do not want to expose the Subject itself, but the Observable which is read-only\n    public get change(): Observable<Sort> {\n        return this._change.asObservable();\n    }\n\n    /**\n     * Sets a comparator as the current one, or toggles reverse if the comparator is already used. The\n     * optional forceReverse input parameter allows to override that toggling behavior by sorting in\n     * reverse order if `true`.\n     *\n     * @memberof Sort\n     */\n    public toggle(sortBy: ClrDatagridComparatorInterface<any>, forceReverse?: boolean) {\n        this.stateDebouncer.changeStart();\n        // We modify private properties directly, to batch the change event\n        if (this.comparator === sortBy) {\n            this._reverse = typeof forceReverse !== \"undefined\" ? forceReverse || !this._reverse : !this._reverse;\n        } else {\n            this._comparator = sortBy;\n            this._reverse = typeof forceReverse !== \"undefined\" ? forceReverse : false;\n        }\n        this.emitChange();\n        this.stateDebouncer.changeDone();\n    }\n\n    /**\n     * Clears the current sorting order\n     */\n    public clear() {\n        this.comparator = null;\n    }\n\n    /**\n     * Compares two objects according to the current comparator\n     */\n    public compare(a: any, b: any): number {\n        return (this.reverse ? -1 : 1) * this.comparator.compare(a, b);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, ContentChild, ElementRef, EventEmitter, HostBinding, Input, Output, ViewChild} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {DatagridPropertyComparator} from \"./built-in/comparators/datagrid-property-comparator\";\nimport {DatagridPropertyStringFilter} from \"./built-in/filters/datagrid-property-string-filter\";\nimport {DatagridStringFilterImpl} from \"./built-in/filters/datagrid-string-filter-impl\";\nimport {DatagridHideableColumnModel} from \"./datagrid-hideable-column.model\";\nimport {ClrDatagridComparatorInterface} from \"./interfaces/comparator.interface\";\nimport {ClrDatagridSortOrder} from \"./interfaces/sort-order\";\nimport {CustomFilter} from \"./providers/custom-filter\";\nimport {DragDispatcher} from \"./providers/drag-dispatcher\";\nimport {FiltersProvider} from \"./providers/filters\";\nimport {Sort} from \"./providers/sort\";\nimport {DatagridFilterRegistrar} from \"./utils/datagrid-filter-registrar\";\n\nlet nbCount: number = 0;\n\n@Component({\n    selector: \"clr-dg-column\",\n    template: `\n        <div class=\"datagrid-column-flex\">\n            <!-- I'm really not happy with that select since it's not very scalable -->\n            <ng-content select=\"clr-dg-filter, clr-dg-string-filter\"></ng-content>\n\n            <clr-dg-string-filter\n                    *ngIf=\"field && !customFilter\"\n                    [clrDgStringFilter]=\"registered\"\n                    [(clrFilterValue)]=\"filterValue\"></clr-dg-string-filter>\n\n            <ng-template #columnTitle><ng-content></ng-content></ng-template>\n\n            <button class=\"datagrid-column-title\" *ngIf=\"sortable\" (click)=\"sort()\" type=\"button\">\n               <ng-container *ngTemplateOutlet=\"columnTitle\"></ng-container>\n            </button>\n\n            <span class=\"datagrid-column-title\" *ngIf=\"!sortable\">\n               <ng-container *ngTemplateOutlet=\"columnTitle\"></ng-container>\n            </span>\n\n            <div class=\"datagrid-column-separator\">\n                <button #columnHandle class=\"datagrid-column-handle\" tabindex=\"-1\" type=\"button\"></button>\n                <div #columnHandleTracker class=\"datagrid-column-handle-tracker\"></div>\n            </div>\n        </div>\n    `,\n    host: {\"[class.datagrid-column]\": \"true\", \"[class.datagrid-column--hidden]\": \"hidden\"}\n})\nexport class ClrDatagridColumn extends DatagridFilterRegistrar<DatagridStringFilterImpl> {\n    constructor(private _sort: Sort, filters: FiltersProvider, private _dragDispatcher: DragDispatcher) {\n        super(filters);\n        this._sortSubscription = _sort.change.subscribe(sort => {\n            // We're only listening to make sure we emit an event when the column goes from sorted to unsorted\n            if (this.sortOrder !== ClrDatagridSortOrder.UNSORTED && sort.comparator !== this._sortBy) {\n                this._sortOrder = ClrDatagridSortOrder.UNSORTED;\n                this.sortOrderChange.emit(this._sortOrder);\n            }\n            // deprecated: to be removed - START\n            if (this.sorted && sort.comparator !== this._sortBy) {\n                this._sorted = false;\n                this.sortedChange.emit(false);\n            }\n            // deprecated: to be removed - END\n        });\n\n        this.columnId = \"dg-col-\" + nbCount.toString();  // Approximate a GUID\n        nbCount++;\n        // put index here\n    }\n\n    /**\n     * @property columnId\n     *\n     * @description\n     * A ClrDatagridColumn class variable that holds the number of ClrDatagridColumn instances for a Datagrid.\n     * It is used to generate a unique id for the ClrDatagridColumn instance.\n     *\n     */\n    public columnId: string;\n\n    /**\n     * @property hidden\n     *\n     * @description\n     * A property that allows the column to be hidden / shown with css\n     * Note the default allows the ClrDatagridColumn to have an *ngIf on it. (EHCAIWC - will occur if its not\n     * initialized)\n     *\n     * @default false\n     *\n     */\n    public get hidden(): boolean {\n        return !!this.hideable && this.hideable.hidden;\n    }\n\n    @ViewChild(\"columnHandle\")\n    set handleElRef(value: ElementRef) {\n        this._dragDispatcher.handleRef = value;\n    }\n\n    @ViewChild(\"columnHandleTracker\")\n    set handleTrackerElRef(value: ElementRef) {\n        this._dragDispatcher.handleTrackerRef = value;\n    }\n\n    /**\n     * Subscription to the sort service changes\n     */\n    private _sortSubscription: Subscription;\n\n    ngOnDestroy() {\n        this._sortSubscription.unsubscribe();\n    }\n\n    /*\n     * Simple object property shortcut, activates both sorting and filtering\n     * based on native comparison of the specified property on the items.\n     */\n    private _field: string;\n    public get field() {\n        return this._field;\n    }\n\n    @Input(\"clrDgField\")\n    public set field(field: string) {\n        if (typeof field === \"string\") {\n            this._field = field;\n            if (!this.customFilter) {\n                this.setFilter(new DatagridStringFilterImpl(new DatagridPropertyStringFilter(field)));\n            }\n            if (!this._sortBy) {\n                this._sortBy = new DatagridPropertyComparator(field);\n            }\n        }\n    }\n\n    /**\n     * ClrDatagridComparatorInterface to use when sorting the column\n     */\n\n    private _sortBy: ClrDatagridComparatorInterface<any>;\n\n    public get sortBy() {\n        return this._sortBy;\n    }\n\n    @Input(\"clrDgSortBy\")\n    public set sortBy(comparator: ClrDatagridComparatorInterface<any>|string) {\n        if (typeof comparator === \"string\") {\n            this._sortBy = new DatagridPropertyComparator(comparator);\n        } else {\n            if (comparator) {\n                this._sortBy = comparator;\n            } else {\n                if (this._field) {\n                    this._sortBy = new DatagridPropertyComparator(this._field);\n                } else {\n                    delete this._sortBy;\n                }\n            }\n        }\n    }\n\n    /**\n     * Indicates if the column is sortable\n     */\n    public get sortable(): boolean {\n        return !!this._sortBy;\n    }\n\n    // deprecated: to be removed - START\n    /**\n     * Indicates if the column is currently sorted\n     *\n     * @deprecated This will be removed soon, in favor of the sortOrder mechanism\n     */\n    private _sorted = false;\n    public get sorted() {\n        return this._sorted;\n    }\n\n    /**\n     * @deprecated This will be removed soon, in favor of the sortOrder mechanism\n     */\n    @Input(\"clrDgSorted\")\n    public set sorted(value: boolean) {\n        if (!value && this.sorted) {\n            this._sorted = false;\n            this._sort.clear();\n        } else if (value && !this.sorted) {\n            this.sort();\n        }\n    }\n\n    /**\n     * @deprecated This will be removed soon, in favor of the sortOrder mechanism\n     */\n    @Output(\"clrDgSortedChange\") public sortedChange = new EventEmitter<boolean>();\n\n    // deprecated: to be removed - END\n\n    /**\n     * Indicates how the column is currently sorted\n     */\n    private _sortOrder: ClrDatagridSortOrder = ClrDatagridSortOrder.UNSORTED;\n    public get sortOrder() {\n        return this._sortOrder;\n    }\n\n    @Input(\"clrDgSortOrder\")\n    public set sortOrder(value: ClrDatagridSortOrder) {\n        if (typeof value === \"undefined\") {\n            return;\n        }\n\n        // only if the incoming order is different from the current one\n        if (this._sortOrder === value) {\n            return;\n        }\n\n        switch (value) {\n            // the Unsorted case happens when the current state is either Asc or Desc\n            default:\n            case ClrDatagridSortOrder.UNSORTED:\n                this._sort.clear();\n                break;\n            case ClrDatagridSortOrder.ASC:\n                this.sort(false);\n                break;\n            case ClrDatagridSortOrder.DESC:\n                this.sort(true);\n                break;\n        }\n    }\n\n    @Output(\"clrDgSortOrderChange\") public sortOrderChange = new EventEmitter<ClrDatagridSortOrder>();\n\n    /**\n     * Sorts the datagrid based on this column\n     */\n    public sort(reverse?: boolean) {\n        if (!this.sortable) {\n            return;\n        }\n\n        this._sort.toggle(this._sortBy, reverse);\n\n        // setting the private variable to not retrigger the setter logic\n        this._sortOrder = this._sort.reverse ? ClrDatagridSortOrder.DESC : ClrDatagridSortOrder.ASC;\n        this.sortOrderChange.emit(this._sortOrder);\n\n        // deprecated: to be removed - START\n        this._sorted = true;\n        this.sortedChange.emit(true);\n        // deprecated: to be removed - END\n    }\n\n    /**\n     * Indicates if the column is currently sorted in ascending order\n     */\n    @HostBinding(\"class.asc\")\n    public get asc() {\n        // deprecated: if condition to be removed - START\n        if (typeof this.sortOrder === \"undefined\") {\n            return this.sorted && !this._sort.reverse;\n        } else {\n            return this.sortOrder === ClrDatagridSortOrder.ASC;\n        }\n        // deprecated: if condition to be removed - END\n    }\n\n    /**\n     * Indicates if the column is currently sorted in descending order\n     */\n    @HostBinding(\"class.desc\")\n    public get desc() {\n        // deprecated: if condition to be removed - START\n        if (typeof this.sortOrder === \"undefined\") {\n            return this.sorted && this._sort.reverse;\n        } else {\n            return this.sortOrder === ClrDatagridSortOrder.DESC;\n        }\n        // deprecated: if condition to be removed - END\n    }\n\n    /**\n     * A custom filter for this column that can be provided in the projected content\n     */\n    public customFilter = false;\n\n    @ContentChild(CustomFilter)\n    public set projectedFilter(custom: any) {\n        if (custom) {\n            this.deleteFilter();\n            this.customFilter = true;\n        }\n    }\n\n    public get filterValue() {\n        return this.filter.value;\n    }\n\n    @Input(\"clrFilterValue\")\n    public set updateFilterValue(newValue: string) {\n        if (!this.filter) {\n            return;\n        }\n        if (!newValue) {\n            newValue = \"\";\n        }\n        if (newValue !== this.filter.value) {\n            this.filter.value = newValue;\n        }\n    }\n\n    public set filterValue(newValue: string) {\n        this.updateFilterValue = newValue;\n        this.filterValueChange.emit(this.filter.value);\n    }\n\n    @Output(\"clrFilterValueChange\") filterValueChange = new EventEmitter();\n\n    /***********\n     *\n     * @property hideable\n     *\n     * @description\n     * When a column is hideable this is defined with an instance of DatagridHideableColumnModel.\n     * When its not hideable should be undefined.\n     *\n     */\n    public hideable: DatagridHideableColumnModel;\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Injectable, TrackByFunction} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {FiltersProvider} from \"./filters\";\nimport {Page} from \"./page\";\nimport {Sort} from \"./sort\";\n\n@Injectable()\nexport class Items {\n    constructor(private _filters: FiltersProvider, private _sort: Sort, private _page: Page) {}\n\n    /**\n     * Indicates if the data is currently loading\n     */\n    public loading = false;\n\n    // TODO: Verify that trackBy is registered for the *ngFor case too\n    /**\n     * Tracking function to identify objects. Default is reference equality.\n     */\n    public trackBy: TrackByFunction<any> = (index: number, item: any) => item;\n\n    /**\n     * Subscriptions to the other providers changes.\n     */\n    private _filtersSub: Subscription;\n    private _sortSub: Subscription;\n    private _pageSub: Subscription;\n    /**\n     * Cleans up our subscriptions to other providers\n     */\n    public destroy() {\n        if (this._filtersSub) {\n            this._filtersSub.unsubscribe();\n        }\n        if (this._sortSub) {\n            this._sortSub.unsubscribe();\n        }\n        if (this._pageSub) {\n            this._pageSub.unsubscribe();\n        }\n    }\n\n    /**\n     * Whether we should use smart items for this datagrid or let the user handle\n     * everything.\n     */\n    private _smart = false;\n    public get smart(): boolean {\n        return this._smart;\n    }\n    public smartenUp() {\n        this._smart = true;\n        /*\n         * These observers trigger a chain of function: filter -> sort -> paginate\n         * An observer up the chain re-triggers all the operations that follow it.\n         */\n        this._filtersSub = this._filters.change.subscribe(() => this._filterItems());\n        this._sortSub = this._sort.change.subscribe(() => {\n            // Special case, if the datagrid went from sorted to unsorted, we have to re-filter\n            // to get the original order back\n            if (!this._sort.comparator) {\n                this._filterItems();\n            } else {\n                this._sortItems();\n            }\n        });\n        this._pageSub = this._page.change.subscribe(() => this._changePage());\n    }\n\n    /**\n     * List of all items in the datagrid\n     */\n    private _all: any[];\n    public get all() {\n        return this._all;\n    }\n    public set all(items: any[]) {\n        this._all = items;\n        this.emitAllChanges(items);\n        if (this.smart) {\n            this._filterItems();\n        } else {\n            this._displayed = items;\n            this.emitChange();\n        }\n    }\n\n    /**\n     * Manually recompute the list of displayed items\n     */\n    public refresh() {\n        if (this.smart) {\n            this._filterItems();\n        }\n    }\n\n    /**\n     * Internal temporary step, which we preserve to avoid re-filtering or re-sorting if not necessary\n     */\n    private _filtered: any[];\n\n    /**\n     * List of items currently displayed\n     */\n    private _displayed: any[] = [];\n    public get displayed(): any[] {\n        // Ideally we could return an immutable array, but we don't have it in Clarity yet.\n        return this._displayed;\n    }\n\n    /**\n     * The Observable that lets other classes subscribe to items changes\n     */\n    private _change = new Subject<any[]>();\n    private emitChange() {\n        this._change.next(this.displayed);\n    }\n    // We do not want to expose the Subject itself, but the Observable which is read-only\n    public get change(): Observable<any[]> {\n        return this._change.asObservable();\n    }\n\n    private _allChanges = new Subject<any[]>();\n    private emitAllChanges(items: any[]): void {\n        this._allChanges.next(items);\n    }\n\n    public get allChanges(): Observable<any[]> {\n        return this._allChanges.asObservable();\n    }\n\n    /**\n     * Checks if we don't have data to process yet, to abort early operations\n     */\n    private get uninitialized() {\n        return !this._all;\n    }\n\n    /**\n     * FiltersProvider items from the raw list\n     */\n    private _filterItems() {\n        if (this.uninitialized) {\n            return;\n        }\n        if (this._filters.hasActiveFilters()) {\n            this._filtered = this._all.filter((item) => this._filters.accepts(item));\n        } else {\n            // Work on a shallow copy of the array, to not modify the user's model\n            this._filtered = this._all.slice();\n        }\n        this._page.totalItems = this._filtered.length;\n        this._sortItems();\n    }\n\n    /**\n     * Sorts items in the filtered list\n     */\n    private _sortItems() {\n        if (this.uninitialized) {\n            return;\n        }\n        if (this._sort.comparator) {\n            this._filtered.sort((a, b) => this._sort.compare(a, b));\n        }\n        this._changePage();\n    }\n\n    /**\n     * Extracts the current page from the sorted list\n     */\n    private _changePage() {\n        if (this.uninitialized) {\n            return;\n        }\n        if (this._page.size > 0) {\n            this._displayed = this._filtered.slice(this._page.firstItem, this._page.lastItem + 1);\n        } else {\n            this._displayed = this._filtered;\n        }\n        this.emitChange();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {\n    Directive,\n    DoCheck,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    OnChanges,\n    SimpleChanges,\n    TemplateRef,\n    TrackByFunction\n} from \"@angular/core\";\n\nimport {Items} from \"./providers/items\";\n\n@Directive({\n    selector: \"[clrDgItems][clrDgItemsOf]\",\n})\nexport class ClrDatagridItems implements OnChanges, DoCheck {\n    private _rawItems: any[];\n    @Input(\"clrDgItemsOf\")\n    public set rawItems(items: any[]) {\n        this._rawItems = items ? items : [];\n    }\n    private _differ: IterableDiffer<any>;\n\n    constructor(public template: TemplateRef<any>, private _differs: IterableDiffers, private _items: Items) {\n        _items.smartenUp();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (\"rawItems\" in changes) {\n            const currentItems = changes.rawItems.currentValue;\n            if (!this._differ && currentItems) {\n                this._differ = this._differs.find(currentItems).create(this._items.trackBy);\n            }\n        }\n    }\n\n    @Input(\"clrDgItemsTrackBy\")\n    set trackBy(value: TrackByFunction<any>) {\n        this._items.trackBy = value;\n    }\n\n    ngDoCheck() {\n        if (this._differ) {\n            const changes = this._differ.diff(this._rawItems);\n            if (changes) {\n                // TODO: not very efficient right now,\n                // but premature optimization is the root of all evil.\n                this._items.all = this._rawItems;\n            }\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component} from \"@angular/core\";\nimport {Items} from \"./providers/items\";\n\n@Component({\n    selector: \"clr-dg-placeholder\",\n    template: `\n        <div\n            class=\"datagrid-placeholder\"\n            [class.datagrid-empty]=\"emptyDatagrid\">\n                <div class=\"datagrid-placeholder-image\" *ngIf=\"emptyDatagrid\"></div>\n                <ng-content *ngIf=\"emptyDatagrid\"></ng-content>\n        </div>\n    `,\n    host: {\"[class.datagrid-placeholder-container]\": \"true\"}\n})\nexport class ClrDatagridPlaceholder {\n    constructor(private items: Items) {}\n\n    /**\n     * Tests if the datagrid is empty, meaning it doesn't contain any items\n     */\n    public get emptyDatagrid() {\n        return !this.items.loading && (!this.items.displayed || this.items.displayed.length === 0);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {ElementRef, InjectionToken} from \"@angular/core\";\n\nexport const POPOVER_HOST_ANCHOR = new InjectionToken<ElementRef>(\"POPOVER_HOST_ANCHOR\");\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, ElementRef, HostListener, OnDestroy, Renderer2} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {IfOpenService} from \"../../utils/conditional/if-open.service\";\n\n@Directive({selector: \"[clrSignpostTrigger]\", host: {\"class\": \"signpost-trigger\"}})\n\n/*********\n *\n * @description\n * A Directive added to the ClrSignpost Trigger button that will call the ClrSignpost.toggle() function to hide/show the\n * ClrSignpostContent.\n *\n */\nexport class ClrSignpostTrigger implements OnDestroy {\n    private subscriptions: Subscription[] = [];\n\n    constructor(private ifOpenService: IfOpenService, private renderer: Renderer2, private el: ElementRef) {\n        this.subscriptions.push(this.ifOpenService.openChange.subscribe((isOpen: boolean) => {\n            if (isOpen) {\n                this.renderer.addClass(this.el.nativeElement, \"active\");\n            } else {\n                this.renderer.removeClass(this.el.nativeElement, \"active\");\n            }\n        }));\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\n    }\n\n    /**********\n     *\n     * @description\n     * click handler for the ClrSignpost trigger button used to hide/show ClrSignpostContent.\n     */\n    @HostListener(\"click\", [\"$event\"])\n    onSignpostTriggerClick(event: Event): void {\n        this.ifOpenService.toggleWithEvent(event);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {\n    Component,\n    ContentChild,\n    ElementRef,\n} from \"@angular/core\";\n\nimport {IfOpenService} from \"../../utils/conditional/if-open.service\";\nimport {POPOVER_HOST_ANCHOR} from \"../common/popover-host-anchor.token\";\n\nimport {ClrSignpostTrigger} from \"./signpost-trigger\";\n\n@Component({\n    selector: \"clr-signpost\",\n    template: `\n        <ng-container *ngIf=\"!useCustomTrigger\">\n            <button\n                type=\"button\"\n                class=\"signpost-action btn btn-small btn-link\"\n                clrSignpostTrigger>\n                <clr-icon shape=\"info\"></clr-icon>\n            </button>\n        </ng-container>\n        \n        <ng-content></ng-content>\n    `,\n    host: {\"[class.signpost]\": \"true\"},\n    providers: [IfOpenService, {provide: POPOVER_HOST_ANCHOR, useExisting: ElementRef}]\n})\n\n/*********\n *\n * @class ClrSignpost\n *\n * @description\n * Class used to configure and control the state of a ClrSignpost and its associated ClrSignpostContent.\n * It supports the clrPosition with a 'right-middle' default.\n *\n */\nexport class ClrSignpost {\n    /**********\n     * @property useCustomTrigger\n     *\n     * @description\n     * Flag used to determine if we need to use the default trigger or a user supplied trigger element.\n     *\n     */\n    public useCustomTrigger: boolean = false;\n\n    /**********\n     * @property signPostTrigger\n     *\n     * @description\n     * Uses ContentChild to check for a user supplied element with the ClrSignpostTrigger on it.\n     *\n     */\n    @ContentChild(ClrSignpostTrigger)\n    set customTrigger(trigger: ClrSignpostTrigger) {\n        this.useCustomTrigger = !!trigger;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Injectable} from \"@angular/core\";\nimport {BehaviorSubject} from \"rxjs/BehaviorSubject\";\nimport {Observable} from \"rxjs/Observable\";\n\nimport {DatagridHideableColumnModel} from \"../datagrid-hideable-column.model\";\n\n\n/**\n *\n * @description\n * An @Injectable provider class that enables\n *\n * 1. Managing, track hideability of DatagridColumns\n *\n */\n@Injectable()\nexport class HideableColumnService {\n    /**********\n     * @property dgHiddenColumnMap\n     *\n     * @description\n     * An array of DatagridHideableColumn.\n     * NOTE: because we can have columns w/o the *clrDgHideableColumn directive\n     * this array will have empty spaces a.k.a nulls. This is needed to be able to map\n     * DatagridCells to DatagridColumns in the RowRenderer.\n     *\n     */\n    private _columnList: DatagridHideableColumnModel[] = [];\n\n    /**********\n     *\n     * @property dgHiddenColumnMapChange\n     *\n     * @description\n     * A behavior subject that can broadcast updates to the column list.\n     * NOTE: I am using BehaviorSubject because <clr-dg-column-toggle> is not getting the latest _columnListChange\n     * on page load.\n     *\n     */\n    private _columnListChange: BehaviorSubject<DatagridHideableColumnModel[]> =\n        new BehaviorSubject<DatagridHideableColumnModel[]>(this._columnList);\n\n    /**********\n     *\n     * @property canHideNextColumn\n     *\n     * @description\n     * Service function that is called by clr-dg-column-toggle component. Use this if you need to ask if you can hide\n     * a column. It acts as a guard against hiding all the columns making sure there is at least one column displayed.\n     *\n     */\n    public get canHideNextColumn(): boolean {\n        const hiddenColumns = this._columnList.filter(column => column !== undefined).filter(column => column.hidden);\n        return (this._columnList.length - hiddenColumns.length > 1);\n    }\n\n    /**********\n     *\n     * @property checkForAllColumnsVisible\n     *\n     * @description\n     * For when you need to know if the datagrid's columns are all showing.\n     *\n     */\n    public get checkForAllColumnsVisible(): boolean {\n        return !this._columnList.some(column => column && column.hidden);\n    }\n\n    /***********\n     * @property columnListChange\n     *\n     * @description\n     * A public property that enables subscribers to hear updates to the column map.\n     * Use this if you need to do something whenever the Datagrid's column list is changed (i.e *ngIf on a column).\n     *\n     */\n    public get columnListChange(): Observable<DatagridHideableColumnModel[]> {\n        return this._columnListChange.asObservable();\n    }\n\n    /**********\n     *\n     * @description\n     * Public function that returns the current list of columns. I needed an array of to iterate on in the RowRenderer\n     * but subscribing to the _columnListChange changes did not seem like the correct way to get it.\n     *\n     */\n    public getColumns(): DatagridHideableColumnModel[] {\n        return this._columnList;\n    }\n\n    /**********\n     *\n     * @description\n     * Iterate through the current _columnList:\n     * - if it has a DatagridHideableColumn and is hidden then show it.\n     * - if it's DatagridHideableColumn was previously the last column visible, turn that flag off.\n     *\n     */\n    public showHiddenColumns() {\n        this._columnList.forEach((column) => {\n            if (column && column.hidden === true) {\n                column.hidden = false;\n            }\n\n            if (column && column.lastVisibleColumn) {\n                column.lastVisibleColumn = false;\n            }\n        });\n    }\n\n    /**\n     *\n     * @param columns: DatagridColumn[]\n     *\n     * @description\n     * Creates an array of DatagridHideableColumn's || null based column array passed as param.\n     * Is dependent on the order in @ContentChildren in Datagrid.\n     *\n     */\n    public updateColumnList(columns: DatagridHideableColumnModel[]) {\n        this._columnList = columns;                     // clear the list\n        this.updateForLastVisibleColumn();              // Update our visibility state for UI\n        this._columnListChange.next(this._columnList);  // Broadcast it\n    }\n\n    /**********\n     *\n     * @description\n     * Gets the current visible count for all columns.\n     * When it is greater than 1 it marks everything as false for the lastVisibleColumn.\n     * When visible count is not > 1 (i.e) 1. , it finds the only column that is not hidden and marks it as the\n     * lastVisibleColumn.\n     *\n     */\n    public updateForLastVisibleColumn(): void {\n        // There is more than one column showing, make sure nothing is marked lastVisibleColumn\n        if (this.canHideNextColumn) {\n            this._columnList.map((column) => {\n                if (column && column.lastVisibleColumn) {\n                    column.lastVisibleColumn = false;\n                }\n            });\n        } else {\n            // The visibleCount is down to only one column showing. Find it and flag it as the lastVisibleColumn\n            this._columnList.map((column) => {\n                if (column && !column.hidden) {\n                    column.lastVisibleColumn = true;\n                }\n            });\n        }\n    }\n\n    /**********\n     *\n     * @description\n     * Return a HideableColumn in this._columnList for the given id.\n     *\n     *\n     */\n    public getColumnById(id: string): undefined|DatagridHideableColumnModel {\n        if (id) {\n            return this._columnList.find(column => column && column.id === id);\n        }\n        return;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, ContentChildren, ElementRef, QueryList, Renderer2} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\nimport {ClrSignpost} from \"../../popover/signpost/signpost\";\nimport {HideableColumnService} from \"./providers/hideable-column.service\";\n\n@Component({\n    selector: \"clr-dg-cell\",\n    template: `\n        <ng-content></ng-content>\n    `,\n    host: {\"[class.datagrid-cell]\": \"true\", \"[class.datagrid-signpost-trigger]\": \"signpost.length > 0\"}\n})\nexport class ClrDatagridCell {\n    /*********\n     * @property signpost\n     *\n     * @description\n     * @ContentChild is used to detect the presence of a Signpost in the projected content.\n     * On the host, we set the .datagrid-signpost-trigger class on the cell when signpost.length is greater than 0.\n     *\n     */\n    @ContentChildren(ClrSignpost) signpost: QueryList<ClrSignpost>;\n\n    /**\n     * @property id\n     *\n     * @description\n     * An identifier for an instance of this cell that maps it to a specific column\n     *\n     */\n    private _id: string;\n\n    set id(value: string) {\n        this._id = value;\n        this.mapHideableColumn(this._id);\n    }\n\n    private hiddenStateSubscription: Subscription;\n\n    constructor(public hideableColumnService: HideableColumnService, private _el: ElementRef,\n                private _renderer: Renderer2) {}\n\n\n    private mapHideableColumn(columnId: string) {\n        if (!columnId) {\n            return;\n        }\n\n        const hideableColumn = this.hideableColumnService.getColumnById(this._id);\n\n        this.setHiddenClass(hideableColumn.hidden);\n        this.hiddenStateSubscription = hideableColumn.hiddenChangeState.subscribe(() => {\n            this.setHiddenClass(hideableColumn.hidden);\n        });\n    }\n\n    private setHiddenClass(hideableColumnValue: boolean) {\n        if (hideableColumnValue) {\n            this._renderer.addClass(this._el.nativeElement, \"datagrid-cell--hidden\");\n        } else {\n            this._renderer.removeClass(this._el.nativeElement, \"datagrid-cell--hidden\");\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.hiddenStateSubscription) {\n            this.hiddenStateSubscription.unsubscribe();\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Injectable, TrackByFunction} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {FiltersProvider} from \"./filters\";\nimport {Items} from \"./items\";\n\nlet nbSelection: number = 0;\n\nexport enum SelectionType {\n    None,\n    Single,\n    Multi\n}\n\n@Injectable()\nexport class Selection {\n    public id: string;\n    private selected: any[] = [];  // Refs of selected items\n    private selectedSingle: any;   // Ref of single selected item\n\n    constructor(private _items: Items, private _filters: FiltersProvider) {\n        this.id = \"clr-dg-selection\" + (nbSelection++);\n\n        this.subscriptions.push(this._filters.change.subscribe(() => {\n            if (!this._selectable) {\n                return;\n            }\n            this.clearSelection();\n        }));\n\n        this.subscriptions.push(this._items.allChanges.subscribe(updatedItems => {\n            if (!this._selectable) {\n                return;\n            }\n            let leftOver: any[] = this.current.slice();\n            let newSingle: any;\n\n            // Calculate the references for each item\n            const trackBy: TrackByFunction<any> = this._items.trackBy;\n            const matched = [];\n            updatedItems.forEach((item, index) => {\n                const ref = trackBy(index, item);\n                // Look in current selected refs array if item is selected, and update actual value\n                if (this.selectedSingle === ref) {\n                    newSingle = item;\n                } else if (this.selected.length) {\n                    const selectedIndex = this.selected.indexOf(ref);\n                    if (selectedIndex > -1) {\n                        matched.push(selectedIndex);\n                        leftOver[selectedIndex] = item;\n                    }\n                }\n            });\n\n            // Filter out any unmatched items if we're using smart datagrids where we expect all items to be present\n            if (this._items.smart) {\n                leftOver = leftOver.filter(selected => updatedItems.indexOf(selected) > -1);\n            }\n\n            // TODO: Discussed this with Eudes and this is fine for now.\n            // But we need to figure out a different pattern for the\n            // child triggering the parent change detection problem.\n            // Using setTimeout for now to fix this.\n            setTimeout(() => {\n                if (typeof newSingle !== \"undefined\") {\n                    this.currentSingle = newSingle;\n                }\n                this.current = leftOver;\n            }, 0);\n        }));\n    }\n\n    public clearSelection(): void {\n        this.current.length = 0;\n        this.emitChange();\n    }\n\n    private _selectionType: SelectionType = SelectionType.None;\n    public get selectionType(): SelectionType {\n        return this._selectionType;\n    }\n    public set selectionType(value: SelectionType) {\n        if (value === this.selectionType) {\n            return;\n        }\n        this._selectionType = value;\n        if (value === SelectionType.None) {\n            delete this.current;\n        } else {\n            this.current = [];\n        }\n    }\n\n    public rowSelectionMode: boolean = false;\n\n    private get _selectable(): boolean {\n        return (this._selectionType === SelectionType.Multi) || (this._selectionType === SelectionType.Single);\n    }\n    /**\n     * Ignore items changes in the same change detection cycle.\n     */\n    private debounce: boolean = false;\n\n    /**\n     * Subscriptions to the other providers changes.\n     */\n    private subscriptions: Subscription[] = [];\n\n\n    /**\n     * Cleans up our subscriptions to other providers\n     */\n    public destroy() {\n        this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n    /**\n     * The current selection in single selection type\n     */\n    private _currentSingle: any;\n    public get currentSingle(): any {\n        return this._currentSingle;\n    }\n    public set currentSingle(value: any) {\n        if (value === this._currentSingle) {\n            return;\n        }\n        this._currentSingle = value;\n        if (this._items.all && this._items.trackBy && value) {\n            const lookup = this._items.all.findIndex(maybe => maybe === value);\n            this.selectedSingle = this._items.trackBy(lookup, value);\n        }\n        this.emitChange();\n        // Ignore items changes in the same change detection cycle.\n        // @TODO This can likely be removed!\n        this.debounce = true;\n        setTimeout(() => this.debounce = false);\n    }\n\n    /**\n     * The current selection\n     */\n    private _current: any[];\n    public get current(): any[] {\n        return this._current;\n    }\n    public set current(value: any[]) {\n        this._current = value;\n        this.emitChange();\n        // Ignore items changes in the same change detection cycle.\n        // @TODO This can likely be removed!\n        this.debounce = true;\n        setTimeout(() => this.debounce = false);\n    }\n\n    /**\n     * The Observable that lets other classes subscribe to selection changes\n     */\n    private _change = new Subject<any[]|any>();\n    private emitChange() {\n        if (this._selectionType === SelectionType.Single) {\n            this._change.next(this.currentSingle);\n        } else if (this._selectionType === SelectionType.Multi) {\n            this._change.next(this.current);\n        }\n    }\n    // We do not want to expose the Subject itself, but the Observable which is read-only\n    public get change(): Observable<any[]|any> {\n        return this._change.asObservable();\n    }\n\n    /**\n     * Checks if an item is currently selected\n     */\n    public isSelected(item: any): boolean {\n        if (this._selectionType === SelectionType.Single) {\n            return this.currentSingle === item;\n        } else if (this._selectionType === SelectionType.Multi) {\n            return this.current.indexOf(item) >= 0;\n        }\n        return false;\n    }\n\n    /**\n     * Selects an item\n     */\n    private selectItem(item: any): void {\n        this.current.push(item);\n        if (this._items.trackBy) {\n            // Push selected ref onto array\n            const lookup = this._items.all.findIndex(maybe => maybe === item);\n            this.selected.push(this._items.trackBy(lookup, item));\n        }\n    }\n\n    /**\n     * Deselects an item\n     */\n    private deselectItem(indexOfItem: number): void {\n        this.current.splice(indexOfItem, 1);\n        if (this._items.trackBy && indexOfItem < this.selected.length) {\n            // Keep selected refs array in sync\n            this.selected.splice(indexOfItem, 1);\n        }\n    }\n\n    /**\n     * Selects or deselects an item\n     */\n    public setSelected(item: any, selected: boolean) {\n        switch (this._selectionType) {\n            case SelectionType.None:\n                break;\n            case SelectionType.Single:\n                // in single selection, set currentSingle method should be used\n                break;\n            case SelectionType.Multi:\n                const index = this.current.indexOf(item);\n                if (index >= 0 && !selected) {\n                    this.deselectItem(index);\n                    this.emitChange();\n                } else if (index < 0 && selected) {\n                    this.selectItem(item);\n                    this.emitChange();\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Checks if all currently displayed items are selected\n     */\n    public isAllSelected(): boolean {\n        if ((this._selectionType !== SelectionType.Multi) || !this._items.displayed) {\n            return false;\n        }\n        const displayedItems: any[] = this._items.displayed;\n        const nbDisplayed = this._items.displayed.length;\n        if (nbDisplayed < 1) {\n            return false;\n        }\n        const temp: any[] = displayedItems.filter(item => this.current.indexOf(item) > -1);\n        return temp.length === displayedItems.length;\n    }\n\n    /**\n     * Selects or deselects all currently displayed items\n     */\n    public toggleAll() {\n        if (this._selectionType === SelectionType.None || this._selectionType === SelectionType.Single) {\n            return;\n        }\n        /*\n         * If every currently displayed item is already selected, we clear them.\n         * If at least one item isn't selected, we select every currently displayed item.\n         */\n        if (this.isAllSelected()) {\n            this._items.displayed.forEach((item, displayIndex) => {\n                const currentIndex = this.current.indexOf(item);\n                if (currentIndex > -1) {\n                    this.deselectItem(currentIndex);\n                }\n            });\n        } else {\n            this._items.displayed.forEach(item => {\n                if (this.current.indexOf(item) < 0) {\n                    this.selectItem(item);\n                }\n            });\n        }\n        this.emitChange();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {\n    AfterContentInit,\n    Component,\n    ContentChildren,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    Output,\n    QueryList\n} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {Expand} from \"../../utils/expand/providers/expand\";\nimport {LoadingListener} from \"../../utils/loading/loading-listener\";\n\nimport {ClrDatagridCell} from \"./datagrid-cell\";\nimport {DatagridHideableColumnModel} from \"./datagrid-hideable-column.model\";\nimport {ExpandableRowsCount} from \"./providers/global-expandable-rows\";\nimport {HideableColumnService} from \"./providers/hideable-column.service\";\nimport {RowActionService} from \"./providers/row-action-service\";\nimport {Selection, SelectionType} from \"./providers/selection\";\n\n\nlet nbRow: number = 0;\n\n@Component({\n    selector: \"clr-dg-row\",\n    template: `\n        <div class=\"datagrid-row-master datagrid-row-flex\">\n            <clr-dg-cell *ngIf=\"selection.selectionType === SELECTION_TYPE.Multi\"\n                         class=\"datagrid-select datagrid-fixed-column\">\n                <clr-checkbox [clrChecked]=\"selected\" (clrCheckedChange)=\"toggle($event)\"></clr-checkbox>\n            </clr-dg-cell>\n            <clr-dg-cell *ngIf=\"selection.selectionType === SELECTION_TYPE.Single\"\n                         class=\"datagrid-select datagrid-fixed-column\">\n                <div class=\"radio\">\n                    <input type=\"radio\" [id]=\"id\" [name]=\"selection.id + '-radio'\" [value]=\"item\"\n                           [(ngModel)]=\"selection.currentSingle\" [checked]=\"selection.currentSingle === item\">\n                    <label for=\"{{id}}\"></label>\n                </div>\n            </clr-dg-cell>\n            <clr-dg-cell *ngIf=\"rowActionService.hasActionableRow\"\n                         class=\"datagrid-row-actions datagrid-fixed-column\">\n                <ng-content select=\"clr-dg-action-overflow\"></ng-content>\n            </clr-dg-cell>\n            <clr-dg-cell *ngIf=\"globalExpandable.hasExpandableRow\"\n                         class=\"datagrid-expandable-caret datagrid-fixed-column\">\n                <ng-container *ngIf=\"expand.expandable\">\n                    <button (click)=\"toggleExpand()\" *ngIf=\"!expand.loading\" type=\"button\" class=\"datagrid-expandable-caret-button\">\n                        <clr-icon shape=\"caret\" [attr.dir]=\"expand.expanded?'down':'right'\" class=\"datagrid-expandable-caret-icon\"></clr-icon>\n                    </button>\n                    <div class=\"spinner spinner-sm\" *ngIf=\"expand.loading\"></div>\n                </ng-container>\n            </clr-dg-cell>\n            <ng-content *ngIf=\"!expand.replace || !expand.expanded || expand.loading\"></ng-content>\n\n            <ng-template *ngIf=\"expand.replace && expand.expanded && !expand.loading\"\n                         [ngTemplateOutlet]=\"detail\"></ng-template>\n        </div>\n\n        <ng-template *ngIf=\"!expand.replace && expand.expanded && !expand.loading\"\n                     [ngTemplateOutlet]=\"detail\"></ng-template>\n\n        <!-- \n            We need the \"project into template\" hack because we need this in 2 different places\n            depending on whether the details replace the row or not.\n        -->\n        <ng-template #detail>\n            <ng-content select=\"clr-dg-row-detail\"></ng-content>\n        </ng-template>\n    `,\n    host: {\n        \"[class.datagrid-row]\": \"true\",\n        \"[class.datagrid-selected]\": \"selected\",\n        \"[attr.tabindex]\": \"selection.rowSelectionMode ? 0 : null\"\n    },\n    providers: [Expand, {provide: LoadingListener, useExisting: Expand}]\n})\nexport class ClrDatagridRow implements AfterContentInit {\n    public id: string;\n\n    /* reference to the enum so that template can access */\n    public SELECTION_TYPE = SelectionType;\n\n    private readonly ENTER_KEY_CODE = 13;\n    private readonly SPACE_KEY_CODE = 32;\n\n    /**\n     * Model of the row, to use for selection\n     */\n    @Input(\"clrDgItem\") item: any;\n\n    @HostBinding(\"attr.role\") role: string;\n\n    constructor(public selection: Selection, public rowActionService: RowActionService,\n                public globalExpandable: ExpandableRowsCount, public expand: Expand,\n                public hideableColumnService: HideableColumnService) {\n        this.id = \"clr-dg-row\" + (nbRow++);\n        this.role = selection.rowSelectionMode ? \"button\" : null;\n    }\n\n    private _selected = false;\n    /**\n     * Indicates if the row is selected\n     */\n    public get selected() {\n        if (this.selection.selectionType === SelectionType.None) {\n            return this._selected;\n        } else {\n            return this.selection.isSelected(this.item);\n        }\n    }\n\n    @Input(\"clrDgSelected\")\n    public set selected(value: boolean) {\n        if (this.selection.selectionType === SelectionType.None) {\n            this._selected = value;\n        } else {\n            this.selection.setSelected(this.item, value);\n        }\n    }\n\n    @Output(\"clrDgSelectedChange\") selectedChanged = new EventEmitter<boolean>(false);\n\n    public toggle(selected = !this.selected) {\n        if (selected !== this.selected) {\n            this.selected = selected;\n            this.selectedChanged.emit(selected);\n        }\n    }\n\n    public get expanded() {\n        return this.expand.expanded;\n    }\n\n    @Input(\"clrDgExpanded\")\n    public set expanded(value: boolean) {\n        this.expand.expanded = value;\n    }\n\n    @Output(\"clrDgExpandedChange\") expandedChange = new EventEmitter<boolean>(false);\n\n    public toggleExpand() {\n        if (this.expand.expandable) {\n            this.expanded = !this.expanded;\n            this.expandedChange.emit(this.expanded);\n        }\n    }\n\n    @HostListener(\"click\")\n    public toggleSelection() {\n        if (!this.selection.rowSelectionMode) {\n            return;\n        }\n\n        switch (this.selection.selectionType) {\n            case SelectionType.None:\n                break;\n            case SelectionType.Single:\n                this.selection.currentSingle = this.item;\n                break;\n            case SelectionType.Multi:\n                this.toggle();\n                break;\n            default:\n                break;\n        }\n    }\n\n    @HostListener(\"keypress\", [\"$event\"])\n    public keypress(event: KeyboardEvent) {\n        if (!this.selection.rowSelectionMode) {\n            return;\n        }\n\n        // Check to see if space or enter were pressed\n        if (event.keyCode === this.ENTER_KEY_CODE || event.keyCode === this.SPACE_KEY_CODE) {\n            // Prevent the default action to stop scrolling when space is pressed\n            event.preventDefault();\n            this.toggleSelection();\n        }\n    }\n\n    private subscription: Subscription;\n\n    /*****\n     * property dgCells\n     *\n     * @description\n     * A Query List of the ClrDatagrid cells in this row.\n     *\n     */\n    @ContentChildren(ClrDatagridCell) dgCells: QueryList<ClrDatagridCell>;\n\n    ngAfterContentInit() {\n        // Make sure things get started\n        const columnsList = this.hideableColumnService.getColumns();\n        this.updateCellsForColumns(columnsList);\n\n        // Triggered when the Cells list changes per row-renderer\n        this.dgCells.changes.subscribe((cellList) => {\n            const columnList = this.hideableColumnService.getColumns();\n            if (cellList.length === columnList.length) {\n                this.updateCellsForColumns(columnList);\n            }\n        });\n\n        // Used to set things up the first time but only after all the columns are ready.\n        this.subscription = this.hideableColumnService.columnListChange.subscribe((columnList) => {\n            // Prevents cell updates when cols and cells array are not aligned - only seems to run on init / first time.\n            if (columnList.length === this.dgCells.length) {\n                this.updateCellsForColumns(columnList);\n            }\n        });\n    }\n\n    /**********\n     *\n     * @description\n     * 1. Maps the new columnListChange to the dgCells list by index\n     * 2. Sets the hidden state on the cell\n     * Take a Column list and use index to access the columns for hideable properties.\n     *\n     */\n    public updateCellsForColumns(columnList: DatagridHideableColumnModel[]) {\n        // Map cells to columns with Array.index\n        this.dgCells.forEach((cell, index) => {\n            const currentColumn = columnList[index];  // Accounts for null space.\n            if (currentColumn) {\n                cell.id = currentColumn.id;\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Injectable, TemplateRef} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\n\nexport type ColumnToggleButtons = \"ok\"|\"selectAll\";\n\n@Injectable()\nexport class ColumnToggleButtonsService {\n    buttons: TemplateRef<any> = null;\n    selectAllDisabled: boolean = false;\n\n    private _okButtonClicked = new Subject<any>();\n    public get okButtonClicked(): Observable<any> {\n        return this._okButtonClicked.asObservable();\n    }\n\n    private _selectAllButtonClicked = new Subject<any>();\n    public get selectAllButtonClicked(): Observable<any> {\n        return this._selectAllButtonClicked.asObservable();\n    }\n\n    public buttonClicked(type: ColumnToggleButtons): void {\n        switch (type.toLowerCase()) {\n            case \"ok\":\n                this._okButtonClicked.next();\n                break;\n            case \"selectall\":\n                this._selectAllButtonClicked.next();\n                break;\n            default:\n                break;\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {map} from \"rxjs/operators/map\";\n\nimport {DatagridPropertyComparator} from \"../built-in/comparators/datagrid-property-comparator\";\nimport {DatagridPropertyStringFilter} from \"../built-in/filters/datagrid-property-string-filter\";\nimport {DatagridStringFilterImpl} from \"../built-in/filters/datagrid-string-filter-impl\";\nimport {ClrDatagridStateInterface} from \"../interfaces/state.interface\";\n\nimport {FiltersProvider} from \"./filters\";\nimport {Page} from \"./page\";\nimport {Sort} from \"./sort\";\nimport {StateDebouncer} from \"./state-debouncer.provider\";\n\n/**\n * This provider aggregates state changes from the various providers of the Datagrid\n */\n@Injectable()\nexport class StateProvider {\n    constructor(private filters: FiltersProvider, private sort: Sort, private page: Page,\n                private debouncer: StateDebouncer) {}\n\n    /**\n     * The Observable that lets other classes subscribe to global state changes\n     */\n    change: Observable<ClrDatagridStateInterface> = this.debouncer.change.pipe(map(() => this.state));\n\n    /*\n     * By making this a getter, we open the possibility for a setter in the future.\n     * It's been requested a couple times.\n     */\n    get state(): ClrDatagridStateInterface {\n        const state: ClrDatagridStateInterface = {};\n        if (this.page.size > 0) {\n            state.page = {from: this.page.firstItem, to: this.page.lastItem, size: this.page.size};\n        }\n        if (this.sort.comparator) {\n            if (this.sort.comparator instanceof DatagridPropertyComparator) {\n                /*\n                 * Special case for the default object property comparator,\n                 * we give the property name instead of the actual comparator.\n                 */\n                state.sort = {by: (<DatagridPropertyComparator>this.sort.comparator).prop, reverse: this.sort.reverse};\n            } else {\n                state.sort = {by: this.sort.comparator, reverse: this.sort.reverse};\n            }\n        }\n\n        const activeFilters = this.filters.getActiveFilters();\n        if (activeFilters.length > 0) {\n            state.filters = [];\n            for (const filter of activeFilters) {\n                if (filter instanceof DatagridStringFilterImpl) {\n                    const stringFilter = (<DatagridStringFilterImpl>filter).filterFn;\n                    if (stringFilter instanceof DatagridPropertyStringFilter) {\n                        /*\n                         * Special case again for the default object property filter,\n                         * we give the property name instead of the full filter object.\n                         */\n                        state.filters.push({\n                            property: (<DatagridPropertyStringFilter>stringFilter).prop,\n                            value: (<DatagridStringFilterImpl>filter).value\n                        });\n                        continue;\n                    }\n                }\n                state.filters.push(filter);\n            }\n        }\n        return state;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Component,\n    ContentChild,\n    ContentChildren,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Output,\n    QueryList\n} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {ClrDatagridColumn} from \"./datagrid-column\";\nimport {ClrDatagridItems} from \"./datagrid-items\";\nimport {ClrDatagridPlaceholder} from \"./datagrid-placeholder\";\nimport {ClrDatagridRow} from \"./datagrid-row\";\nimport {ClrDatagridStateInterface} from \"./interfaces/state.interface\";\nimport {ColumnToggleButtonsService} from \"./providers/column-toggle-buttons.service\";\nimport {FiltersProvider} from \"./providers/filters\";\nimport {ExpandableRowsCount} from \"./providers/global-expandable-rows\";\nimport {HideableColumnService} from \"./providers/hideable-column.service\";\nimport {Items} from \"./providers/items\";\nimport {Page} from \"./providers/page\";\nimport {RowActionService} from \"./providers/row-action-service\";\nimport {Selection, SelectionType} from \"./providers/selection\";\nimport {Sort} from \"./providers/sort\";\nimport {StateDebouncer} from \"./providers/state-debouncer.provider\";\nimport {StateProvider} from \"./providers/state.provider\";\nimport {DatagridRenderOrganizer} from \"./render/render-organizer\";\n\n@Component({\n    selector: \"clr-datagrid\",\n    template: `<!--\n  ~ Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<ng-content select=\"clr-dg-action-bar\"></ng-content>\n<div class=\"datagrid-overlay-wrapper\">\n    <div class=\"datagrid-scroll-wrapper\">\n        <div class=\"datagrid\" #datagrid>\n            <clr-dg-table-wrapper class=\"datagrid-table-wrapper\">\n                <div clrDgHead class=\"datagrid-head\">\n                    <div class=\"datagrid-row datagrid-row-flex\">\n                        <!-- header for datagrid where you can select multiple rows -->\n                        <div class=\"datagrid-column datagrid-select datagrid-fixed-column\"\n                             *ngIf=\"selection.selectionType === SELECTION_TYPE.Multi\">\n                        <span class=\"datagrid-column-title\">\n                            <clr-checkbox [(ngModel)]=\"allSelected\"></clr-checkbox>\n                        </span>\n                            <div class=\"datagrid-column-separator\"></div>\n                        </div>\n                        <!-- header for datagrid where you can select one row only -->\n                        <div class=\"datagrid-column datagrid-select datagrid-fixed-column\"\n                             *ngIf=\"selection.selectionType === SELECTION_TYPE.Single\">\n                            <div class=\"datagrid-column-separator\"></div>\n                        </div>\n                        <!-- header for single row action; only display if we have at least one actionable row in datagrid -->\n                        <div class=\"datagrid-column datagrid-row-actions datagrid-fixed-column\"\n                             *ngIf=\"rowActionService.hasActionableRow\">\n                            <div class=\"datagrid-column-separator\"></div>\n                        </div>\n                        <!-- header for carets; only display if we have at least one expandable row in datagrid -->\n                        <div class=\"datagrid-column datagrid-expandable-caret datagrid-fixed-column\"\n                             *ngIf=\"expandableRows.hasExpandableRow\">\n                            <div class=\"datagrid-column-separator\"></div>\n                        </div>\n                        <ng-content select=\"clr-dg-column\"></ng-content>\n                    </div>\n                </div>\n\n                <ng-template *ngIf=\"iterator\"\n                             ngFor [ngForOf]=\"items.displayed\" [ngForTrackBy]=\"items.trackBy\"\n                             [ngForTemplate]=\"iterator.template\"></ng-template>\n                <ng-content *ngIf=\"!iterator\"></ng-content>\n\n                <!-- Custom placeholder overrides the default empty one -->\n                <ng-content select=\"clr-dg-placeholder\"></ng-content>\n                <clr-dg-placeholder *ngIf=\"!placeholder\"></clr-dg-placeholder>\n            </clr-dg-table-wrapper>\n\n            <!--\n                This is not inside the table because there is no good way of having a single column span\n                everything when using custom elements with display:table-cell.\n            -->\n            <ng-content select=\"clr-dg-footer\"></ng-content>\n        </div>\n    </div>\n    <div class=\"datagrid-spinner\" *ngIf=\"loading\">\n        <div class=\"spinner\">Loading...</div>\n    </div>\n</div>\n`,\n    providers: [\n        Selection,\n        Sort,\n        FiltersProvider,\n        Page,\n        Items,\n        DatagridRenderOrganizer,\n        RowActionService,\n        ExpandableRowsCount,\n        HideableColumnService,\n        StateDebouncer,\n        StateProvider,\n        ColumnToggleButtonsService,\n    ],\n    host: {\"[class.datagrid-host]\": \"true\"}\n})\nexport class ClrDatagrid implements AfterContentInit, AfterViewInit, OnDestroy {\n    constructor(private columnService: HideableColumnService, private organizer: DatagridRenderOrganizer,\n                public items: Items, public expandableRows: ExpandableRowsCount, public selection: Selection,\n                public rowActionService: RowActionService, private stateProvider: StateProvider) {}\n\n    /* reference to the enum so that template can access */\n    public SELECTION_TYPE = SelectionType;\n\n    /**\n     * Freezes the datagrid while data is loading\n     */\n    public get loading(): boolean {\n        return this.items.loading;\n    }\n\n    @Input(\"clrDgLoading\")\n    public set loading(value: boolean) {\n        this.items.loading = value;\n    }\n\n    /**\n     * Output emitted whenever the data needs to be refreshed, based on user action or external ones\n     */\n    @Output(\"clrDgRefresh\") public refresh = new EventEmitter<ClrDatagridStateInterface>(false);\n\n    /**\n     * Public method to re-trigger the computation of displayed items manually\n     */\n    public dataChanged() {\n        this.items.refresh();\n    }\n\n    /**\n     * We grab the smart iterator from projected content\n     */\n    @ContentChild(ClrDatagridItems) public iterator: ClrDatagridItems;\n\n    /**\n     * Array of all selected items\n     */\n    @Input(\"clrDgSelected\")\n    set selected(value: any[]) {\n        if (value) {\n            this.selection.selectionType = SelectionType.Multi;\n        } else {\n            this.selection.selectionType = SelectionType.None;\n        }\n        this.selection.current = value;\n    }\n\n    @Output(\"clrDgSelectedChange\") selectedChanged = new EventEmitter<any[]>(false);\n\n    /**\n     * Selected item in single-select mode\n     */\n    @Input(\"clrDgSingleSelected\")\n    set singleSelected(value: any) {\n        this.selection.selectionType = SelectionType.Single;\n        if (value) {\n            this.selection.currentSingle = value;\n        } else {\n            this.selection.currentSingle = null;\n        }\n    }\n\n    @Output(\"clrDgSingleSelectedChange\") singleSelectedChanged = new EventEmitter<any>(false);\n\n    /**\n     * Selection/Deselection on row click mode\n     */\n    @Input(\"clrDgRowSelection\")\n    set rowSelectionMode(value: boolean) {\n        this.selection.rowSelectionMode = value;\n    }\n\n    /**\n     * stay backwards compatible , will be renamed to clrDgRowSelection\n     * @deprecated since 0.12\n     */\n    @Input(\"clDgRowSelection\")\n    set rowSelectionModeDeprecated(value: boolean) {\n        this.rowSelectionMode = value;\n    }\n\n    /**\n     * Indicates if all currently displayed items are selected\n     */\n    public get allSelected() {\n        return this.selection.isAllSelected();\n    }\n\n    /**\n     * Selects/deselects all currently displayed items\n     * @param value\n     */\n    public set allSelected(value: boolean) {\n        /*\n         * This is a setter but we ignore the value.\n         * It's strange, but it lets us have an indeterminate state where only\n         * some of the items are selected.\n         */\n        this.selection.toggleAll();\n    }\n\n    /**\n     * Custom placeholder detection\n     */\n    @ContentChild(ClrDatagridPlaceholder) public placeholder: ClrDatagridPlaceholder;\n\n    /**\n     * Hideable Column data source / detection.\n     */\n    @ContentChildren(ClrDatagridColumn) public columns: QueryList<ClrDatagridColumn>;\n\n    /**\n     * When the datagrid is user-managed without the smart iterator, we get the items displayed\n     * by querying the projected content. This is needed to keep track of the models currently\n     * displayed, typically for selection.\n     */\n\n    @ContentChildren(ClrDatagridRow) rows: QueryList<ClrDatagridRow>;\n\n    ngAfterContentInit() {\n        this._subscriptions.push(this.rows.changes.subscribe(() => {\n            if (!this.items.smart) {\n                this.items.all = this.rows.map((row: ClrDatagridRow) => row.item);\n            }\n        }));\n        if (!this.items.smart) {\n            this.items.all = this.rows.map((row: ClrDatagridRow) => row.item);\n        }\n\n        this._subscriptions.push(this.columns.changes.subscribe((columns: ClrDatagridColumn[]) => {\n            this.columnService.updateColumnList(this.columns.map(col => col.hideable));\n        }));\n\n        // Get ColumnService ready for HideableColumns.\n        this.columnService.updateColumnList(this.columns.map(col => col.hideable));\n    }\n\n    /**\n     * Our setup happens in the view of some of our components, so we wait for it to be done before starting\n     */\n    ngAfterViewInit() {\n        // TODO: determine if we can get rid of provider wiring in view init so that subscriptions can be done earlier\n        this.refresh.emit(this.stateProvider.state);\n        this._subscriptions.push(this.stateProvider.change.subscribe(state => this.refresh.emit(state)));\n        this._subscriptions.push(this.selection.change.subscribe(s => {\n            if (this.selection.selectionType === SelectionType.Single) {\n                this.singleSelectedChanged.emit(s);\n            } else if (this.selection.selectionType === SelectionType.Multi) {\n                this.selectedChanged.emit(s);\n            }\n        }));\n    }\n\n    /**\n     * Subscriptions to all the services and queries changes\n     */\n    private _subscriptions: Subscription[] = [];\n\n    ngOnDestroy() {\n        this._subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\n    }\n\n    resize(): void {\n        this.organizer.resize();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component} from \"@angular/core\";\n\n@Component({\n    selector: \"clr-dg-action-bar\",\n    template: `\n        <ng-content></ng-content>\n    `,\n    host: {\"[class.datagrid-action-bar]\": \"true\"}\n})\nexport class ClrDatagridActionBar {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, EventEmitter, Input, OnDestroy, Output} from \"@angular/core\";\n\nimport {Point} from \"../../popover/common/popover\";\n\nimport {RowActionService} from \"./providers/row-action-service\";\n\n@Component({\n    selector: \"clr-dg-action-overflow\",\n    template: `\n        <button (click)=\"toggle($event)\" type=\"button\" class=\"datagrid-action-toggle\" #anchor>\n            <clr-icon shape=\"ellipsis-vertical\"></clr-icon>\n        </button>\n        <ng-template [(clrPopoverOld)]=\"open\" [clrPopoverOldAnchor]=\"anchor\" [clrPopoverOldAnchorPoint]=\"anchorPoint\"\n                     [clrPopoverOldPopoverPoint]=\"popoverPoint\">\n            <div #menu class=\"datagrid-action-overflow\" (clrOutsideClick)=\"close($event)\" [clrStrict]=\"true\">\n                <ng-content></ng-content>\n            </div>\n        </ng-template>\n    `\n})\n\nexport class ClrDatagridActionOverflow implements OnDestroy {\n    public anchorPoint: Point = Point.RIGHT_CENTER;\n    public popoverPoint: Point = Point.LEFT_CENTER;\n\n    constructor(private rowActionService: RowActionService) {\n        this.rowActionService.register();\n    }\n\n    ngOnDestroy() {\n        this.rowActionService.unregister();\n    }\n\n    /**\n     * Tracks whether the action overflow menu is open or not\n     */\n    private _open = false;\n    public get open() {\n        return this._open;\n    }\n\n    @Input(\"clrDgActionOverflowOpen\")\n    public set open(open: boolean) {\n        const boolOpen = !!open;\n        if (boolOpen !== this._open) {\n            this._open = boolOpen;\n            this.openChanged.emit(boolOpen);\n        }\n    }\n\n    @Output(\"clrDgActionOverflowOpenChange\") public openChanged = new EventEmitter<boolean>(false);\n\n    /*\n     * We need to remember the click that opens the menu, to make sure it doesn't close the menu instantly\n     * when the event bubbles up the DOM all the way to the document, which we also listen to.\n     */\n    private openingEvent: any;\n\n    /**\n     * Shows/hides the action overflow menu\n     */\n    public toggle(event: any) {\n        this.openingEvent = event;\n        this.open = !this.open;\n    }\n\n    public close(event: MouseEvent) {\n        /*\n         * Because this listener is added synchonously, before the event finishes bubbling up the DOM,\n         * we end up firing on the very click that just opened the menu, p\n         * otentially closing it immediately every time. So we just ignore it.\n         */\n        if (event === this.openingEvent) {\n            delete this.openingEvent;\n            return;\n        }\n        this.open = false;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, Input} from \"@angular/core\";\n\nimport {ColumnToggleButtons, ColumnToggleButtonsService} from \"./providers/column-toggle-buttons.service\";\n\n@Component({\n    selector: \"clr-dg-column-toggle-button\",\n    template: `\n        <button\n            (click)=\"click()\"\n            [disabled]=\"toggleButtons.selectAllDisabled && !isOk()\"\n            [ngClass]=\"getClasses()\"\n            type=\"button\">\n            <ng-content></ng-content>\n        </button>\n    `,\n    host: {\"[class.action-right]\": \"isOk()\", \"[style.display]\": \"block\"}\n})\n\nexport class ClrDatagridColumnToggleButton {\n    @Input() clrType: ColumnToggleButtons;\n\n    constructor(public toggleButtons: ColumnToggleButtonsService) {}\n\n    getClasses() {\n        let classes = \"btn \";\n        if (this.isOk()) {\n            classes += \"btn-primary\";\n        } else {\n            classes += \"btn-sm btn-link p6 text-uppercase\";\n        }\n        return classes;\n    }\n\n    isOk() {\n        return this.clrType === \"ok\";\n    }\n\n    click() {\n        this.toggleButtons.buttonClicked(this.clrType);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component} from \"@angular/core\";\n\n@Component({\n    selector: \"clr-dg-column-toggle-title\",\n    template: `<ng-content></ng-content>`,\n})\nexport class ClrDatagridColumnToggleTitle {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, ContentChild, ContentChildren, OnDestroy, OnInit, QueryList} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {Point} from \"../../popover/common/popover\";\n\nimport {ClrDatagridColumnToggleButton} from \"./datagrid-column-toggle-button\";\nimport {ClrDatagridColumnToggleTitle} from \"./datagrid-column-toggle-title\";\nimport {DatagridHideableColumnModel} from \"./datagrid-hideable-column.model\";\nimport {ColumnToggleButtonsService} from \"./providers/column-toggle-buttons.service\";\nimport {HideableColumnService} from \"./providers/hideable-column.service\";\n\n@Component({\n    selector: \"clr-dg-column-toggle\",\n    template: `\n        <button\n                #anchor\n                (click)=\"toggleUI()\"\n                class=\"btn btn-sm btn-link column-toggle--action\"\n                type=\"button\">\n            <clr-icon shape=\"view-columns\"></clr-icon>\n        </button>\n        <div class=\"column-switch\"\n             *clrPopoverOld=\"open; anchor: anchor; anchorPoint: anchorPoint; popoverPoint: popoverPoint\">\n            <div class=\"switch-header\">\n                <ng-container *ngIf=\"!title\">Show Columns</ng-container>\n                <ng-content select=\"clr-dg-column-toggle-title\"></ng-content>\n                <button\n                    class=\"btn btn-sm btn-link\"\n                    (click)=\"toggleUI()\"\n                    type=\"button\">\n                    <clr-icon\n                            shape=\"close\"></clr-icon>\n                </button>\n            </div>\n            <ul class=\"switch-content list-unstyled\">\n                <li *ngFor=\"let column of columns\">\n                    <clr-checkbox [clrChecked]=\"!column.hidden\"\n                                  [clrDisabled]=\"column.lastVisibleColumn\"\n                                  (clrCheckedChange)=\"toggleColumn($event, column)\">\n                        <ng-template [ngTemplateOutlet]=\"column.template\"></ng-template>\n                    </clr-checkbox>\n                </li>\n            </ul>\n            <div class=\"switch-footer\" *ngIf=\"buttons.length > 0\">\n                <ng-content select=\"clr-dg-column-toggle-button\"></ng-content>\n            </div>\n            <div class=\"switch-footer\" *ngIf=\"buttons.length === 0\">\n                <div>\n                    <button\n                            class=\"btn btn-sm btn-link p6 text-uppercase\"\n                            [disabled]=\"allColumnsVisible\"\n                            (click)=\"selectAll()\"\n                            type=\"button\">Select All\n                    </button>\n                </div>\n                <div class=\"action-right\">\n                    <button\n                            (click)=\"toggleUI()\"\n                            class=\"btn btn-primary\"\n                            type=\"button\">\n                        Ok\n                    </button>\n                </div>\n            </div>\n        </div>\n    `,\n    host: {\"[class.column-switch-wrapper]\": \"true\", \"[class.active]\": \"open\"}\n})\n\nexport class ClrDatagridColumnToggle implements OnInit, OnDestroy {\n    private subscriptions: Subscription[] = [];\n    private _allColumnsVisible: boolean;\n\n    /***\n     * Popover init\n     */\n    public anchorPoint: Point = Point.TOP_LEFT;\n    public popoverPoint: Point = Point.LEFT_BOTTOM;\n    public open: boolean = false;\n\n    /****\n     * DatagridHideableColumnModel init\n     */\n    public columns: DatagridHideableColumnModel[] = [];\n\n    public get allColumnsVisible(): boolean {\n        return this._allColumnsVisible;\n    }\n\n    public set allColumnsVisible(value: boolean) {\n        this._allColumnsVisible = value;\n    }\n\n    @ContentChild(ClrDatagridColumnToggleTitle) title: ClrDatagridColumnToggleTitle;\n    @ContentChildren(ClrDatagridColumnToggleButton) buttons: QueryList<ClrDatagridColumnToggleButton>;\n\n    constructor(public hideableColumnService: HideableColumnService,\n                private columnToggleButtons: ColumnToggleButtonsService) {}\n\n    ngOnInit() {\n        this.subscriptions.push(this.hideableColumnService.columnListChange.subscribe((columnList) => {\n            // Reset the list of columns\n            this.columns.length = 0;\n            this.hideableColumnService.updateForLastVisibleColumn();\n            this.allColumnsVisible = this.hideableColumnService.checkForAllColumnsVisible;\n            this.columnToggleButtons.selectAllDisabled = this.allColumnsVisible;\n\n            // Add only the hidden columns to the toggler.\n            columnList.forEach((col) => {\n                if (col) {\n                    this.columns.push(col);\n                }\n            });\n        }));\n\n        this.subscriptions.push(this.columnToggleButtons.okButtonClicked.subscribe(() => {\n            this.toggleUI();\n        }));\n\n        this.subscriptions.push(this.columnToggleButtons.selectAllButtonClicked.subscribe(() => {\n            this.selectAll();\n        }));\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n    selectAll() {\n        this.hideableColumnService.showHiddenColumns();\n        this.allColumnsVisible = this.hideableColumnService.checkForAllColumnsVisible;\n    }\n\n    toggleColumn(event: boolean, column: DatagridHideableColumnModel) {\n        column.hidden = !event;\n        this.allColumnsVisible = this.hideableColumnService.checkForAllColumnsVisible;\n        this.columnToggleButtons.selectAllDisabled = this.allColumnsVisible;\n        this.hideableColumnService.updateForLastVisibleColumn();\n    }\n\n    toggleUI() {\n        this.open = !this.open;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, Optional} from \"@angular/core\";\nimport {ExpandableRowsCount} from \"./providers/global-expandable-rows\";\n\n/*\n * I don't think this deserves to be in IfExpanded itself,\n * so I'm adding a second directive on the same selector for now just for the datagrid\n */\n@Directive({selector: \"[clrIfExpanded]\"})\nexport class DatagridDetailRegisterer {\n    constructor(@Optional() private expandableRowsCount: ExpandableRowsCount) {\n        if (this.expandableRowsCount) {\n            this.expandableRowsCount.register();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.expandableRowsCount) {\n            this.expandableRowsCount.unregister();\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {ChangeDetectorRef, Component, ContentChild, OnInit} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {ClrDatagridColumnToggle} from \"./datagrid-column-toggle\";\nimport {HideableColumnService} from \"./providers/hideable-column.service\";\nimport {Selection, SelectionType} from \"./providers/selection\";\n\n@Component({\n    selector: \"clr-dg-footer\",\n    template: `\n        <ng-container\n            *ngIf=\"(selection.selectionType === SELECTION_TYPE.Multi) && (selection.current.length > 0)\">\n            <clr-checkbox [clrDisabled]=\"true\" [clrChecked]=\"true\" class=\"datagrid-foot-select\">\n                {{selection.current.length}}\n            </clr-checkbox>\n        </ng-container>\n        <ng-content select=\"clr-dg-column-toggle\"></ng-content>\n        <clr-dg-column-toggle *ngIf=\"!toggle && activeToggler\"></clr-dg-column-toggle>\n        <div class=\"datagrid-foot-description\">\n            <ng-content></ng-content>\n        </div>\n        <ng-content select=\"clr-dg-pagination\"></ng-content>\n    `,\n    host: {\n        \"[class.datagrid-foot]\": \"true\",\n    }\n})\nexport class ClrDatagridFooter implements OnInit {\n    constructor(public selection: Selection, public hideableColumnService: HideableColumnService,\n                public cdr: ChangeDetectorRef) {}\n\n    public activeToggler: boolean;\n    private subscriptions: Subscription[] = [];\n\n    /* reference to the enum so that template can access */\n    public SELECTION_TYPE = SelectionType;\n\n    @ContentChild(ClrDatagridColumnToggle) toggle: ClrDatagridColumnToggle;\n\n    ngOnInit() {\n        this.subscriptions.push(this.hideableColumnService.columnListChange.subscribe((change) => {\n            const hiddenColumnsInSub = change.filter(col => col);\n            if (hiddenColumnsInSub.length > 0) {\n                this.activeToggler = true;\n            }\n        }));\n\n        const hiddenColumns = this.hideableColumnService.getColumns().filter(col => col);\n\n        if (hiddenColumns.length > 0) {\n            this.activeToggler = true;\n        }\n    }\n\n    ngOnDestroy() {\n        this.subscriptions.forEach((sub) => {\n            sub.unsubscribe();\n        });\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {TemplateRef} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\n\n\n/**\n *\n * @description\n * A utility class for that adds hide/show functionality to a column, its cells and enables a toggler in the\n * DatagridColumnToggle Component.\n *\n */\nexport class DatagridHideableColumnModel {\n    /**\n     * @property hiddenChanges\n     *\n     * @description\n     * A stream of state changes an instance of DatagridHideableColumnModel will broadcast to subscribers.\n     *\n     */\n    private hiddenChangesState: Subject<boolean> = new Subject<boolean>();\n\n    /**\n     *\n     * @description\n     * The init function for DatagridHideableColumnModel instances that does the following:\n     *\n     * 1. Set values for the private variables that enable a hideable column\n     * 2. Broadcast the next hidden change for anyone (already) subscribed to this DatagridHideableColumnModel\n     * TODO: Debug and verify that #2 is really necessary.\n     *\n     */\n    constructor(private _template: TemplateRef<any>, private _id: string, private _hidden: boolean = false) {}\n\n    /**\n     *\n     * @description\n     * A getter function that returns an TemplateRef of the DatagridColumn that is hideable. This is currently used to\n     * populate the DatagridColumnToggle UI with the correct Column name.\n     *\n     */\n    get template() {\n        return this._template;\n    }\n\n    /**\n     *\n     * @description\n     * public function that returns the id of a HideableCOlumn instance. Used by the HideableCOlumnService for passing\n     * state and actions between DateGridColumns, DataGridCells & the DatagridColumnToggle Components.\n     *\n     */\n    get id(): string {\n        return this._id;\n    }\n\n    /**\n     *\n     * @description\n     * A getter that returns the hidden value of a DatagridHideableColumnModel instance.\n     * TODO: debug and make sure you really need this since we have the hiddenCHanges observable.\n     *\n     */\n    get hidden(): boolean {\n        return this._hidden;\n    }\n\n    /**\n     *\n     * @description\n     * The setter for setting the hidden state of a DatagridHideableColumnModel instance.\n     * It also broadcasts the change after its set.\n     *\n     */\n    set hidden(value: boolean) {\n        if (this._hidden === value) {\n            return;\n        }\n        this._hidden = value;\n        this.hiddenChangesState.next(value);\n    }\n\n    /**\n     *\n     * @description\n     * An Observable for the HideableColumns hidden changes.\n     *\n     */\n    get hiddenChangeState(): Observable<boolean> {\n        return this.hiddenChangesState.asObservable();\n    }\n\n    // Flag this true when the service only has one visible column open.\n\n    public lastVisibleColumn: boolean = false;\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, Input, TemplateRef, ViewContainerRef} from \"@angular/core\";\n\nimport {ClrDatagridColumn} from \"./datagrid-column\";\nimport {DatagridHideableColumnModel} from \"./datagrid-hideable-column.model\";\n\n@Directive({selector: \"[clrDgHideableColumn]\"})\n\n/**\n *\n * @description\n * A structural directive meant to be used inside a clr-dg-column component.\n *\n * <clr-dg-column>\n *       <ng-container *clrDgHideableColumn=\"{ hidden: true }\">\n *           User ID\n *       </ng-container>\n *   </clr-dg-column>\n *\n * It sets up state and properties so that columns can be manges for hide/show by a service and an internal\n * datagrid toggle component.\n *\n */\nexport class ClrDatagridHideableColumn {\n    /**\n     *\n     * @description\n     * Used to initialize the column with either hidden or visible state.\n     *\n     */\n    private _hidden: boolean;\n\n    /**\n     *\n     * @description\n     * Setter fn for the @Input with the same name as this structural directive.\n     * It allows the user to pre-configure the column's hide/show state. { hidden: true }\n     * It's more verbose but has more Clarity.\n     *\n     *\n     * @example\n     * *clrDgHideableColumn\n     * *clrDgHideableColumn={hidden: false}\n     * *clrDgHideableColumn={hidden: true}\n     *\n     */\n    @Input(\"clrDgHideableColumn\")\n    set clrDgHideableColumn(value: any) {\n        this._hidden = (value && value.hidden) ? value.hidden : false;\n        if (this.dgColumn.hideable) {\n            this.dgColumn.hideable.hidden = (value && value.hidden) ? value.hidden : false;\n        }\n    }\n\n    /**\n     *\n     * @description\n     * A unique identifier passed into the directive from the parent (A DatagridColumn).\n     *\n     */\n    public columnId: string;\n\n    /**\n     *\n     * @description\n     * An instance of the DatagridHideableColumn Utility class that is used to:\n     * 1. Create an instance of HideableColumn that will manage the TemplateRef, state and communication\n     * 2. Manage the hidden/shown state for the column to which this directive is applied\n     * 3. track the id of the hidden column so it can be used in cells as well as on the column\n     */\n    public column: DatagridHideableColumnModel;\n\n    /**\n     * @description\n     * Used the DatagridColumn to get and set an id for this HiddenColumn\n     *\n     */\n    constructor(private templateRef: TemplateRef<any>, private viewContainerRef: ViewContainerRef,\n                private dgColumn: ClrDatagridColumn) {\n        this.columnId = dgColumn.columnId;\n\n        // Use the templateRef to create this view\n        this.viewContainerRef.createEmbeddedView(this.templateRef);\n\n        // Create instance of the utility class DatagridHideableColumn.\n        // Note this is on the parent instance of DatagridColumn.\n        this.dgColumn.hideable = new DatagridHideableColumnModel(this.templateRef, this.columnId, this._hidden);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, Input, Optional, TrackByFunction} from \"@angular/core\";\n\nimport {Items} from \"./providers/items\";\n\n@Directive({\n    selector: \"[ngForTrackBy]\",\n})\nexport class ClrDatagridItemsTrackBy {\n    constructor(@Optional() private _items: Items) {}\n\n    @Input(\"ngForTrackBy\")\n    set trackBy(value: TrackByFunction<Function>) {\n        if (this._items) {\n            this._items.trackBy = value;\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {Page} from \"./providers/page\";\n\n@Component({\n    selector: \"clr-dg-pagination\",\n    template: `\n        <div class=\"pagination-description\">\n            <ng-content></ng-content>\n        </div>\n        <ul class=\"pagination-list\" *ngIf=\"page.last > 1\">\n            <li *ngIf=\"page.current > 1\">\n                <button \n                    class=\"pagination-previous\" \n                    (click)=\"page.previous()\"\n                    type=\"button\"></button>\n            </li>\n            <li *ngIf=\"page.current > 2\">\n                <button (click)=\"page.current = 1\" type=\"button\">1</button>\n            </li>\n            <li *ngIf=\"page.current > 3\">...</li>\n            <li *ngFor=\"let pageNum of middlePages\" [class.pagination-current]=\"pageNum === page.current\">\n                <button \n                    *ngIf=\"pageNum !== page.current; else noButton\" \n                    (click)=\"page.current = pageNum\"\n                    type=\"button\">{{pageNum}}</button>\n                <ng-template #noButton>{{pageNum}}</ng-template>\n            </li>\n            <li *ngIf=\"page.current < page.last - 2\">...</li>\n            <li *ngIf=\"page.current < page.last - 1\">\n                <button \n                    (click)=\"page.current = page.last\"\n                    type=\"button\">{{page.last}}</button>\n            </li>\n            <li *ngIf=\"page.current < page.last\">\n                <button \n                    class=\"pagination-next\" \n                    (click)=\"page.next()\"\n                    type=\"button\"></button>\n            </li>\n        </ul>\n    `,\n    host: {\"[class.pagination]\": \"true\"}\n})\nexport class ClrDatagridPagination implements OnDestroy, OnInit {\n    constructor(public page: Page) {\n        /*\n         * Default page size is 10.\n         * The reason we set it in this constructor and not in the provider itself is because\n         * we don't want pagination (page size 0) if this component isn't present in the datagrid.\n         */\n        page.size = 10;\n    }\n\n    /**********\n     * Subscription to the Page service for page changes.\n     * Note: this only emits after the datagrid is initialized/stabalized and the page changes.\n     */\n    ngOnInit() {\n        this._pageSubscription = this.page.change.subscribe(current => this.currentChanged.emit(current));\n    }\n\n    /**\n     * Subscription to the page service changes\n     */\n    private _pageSubscription: Subscription;\n    ngOnDestroy() {\n        this.page.resetPageSize();\n        if (this._pageSubscription) {\n            this._pageSubscription.unsubscribe();\n        }\n    }\n\n    /**\n     * Page size\n     */\n    public get pageSize(): number {\n        return this.page.size;\n    }\n    @Input(\"clrDgPageSize\")\n    public set pageSize(size: number) {\n        if (typeof size === \"number\") {\n            this.page.size = size;\n        }\n    }\n\n    /**\n     * Total items (needed to guess the last page)\n     */\n    public get totalItems(): number {\n        return this.page.totalItems;\n    }\n    @Input(\"clrDgTotalItems\")\n    public set totalItems(total: number) {\n        if (typeof total === \"number\") {\n            this.page.totalItems = total;\n        }\n    }\n\n    /**\n     * Last page\n     */\n    public get lastPage(): number {\n        return this.page.last;\n    }\n    @Input(\"clrDgLastPage\")\n    public set lastPage(last: number) {\n        if (typeof last === \"number\") {\n            this.page.last = last;\n        }\n    }\n\n    /**\n     * Current page\n     */\n    public get currentPage(): number {\n        return this.page.current;\n    }\n    @Input(\"clrDgPage\")\n    public set currentPage(page: number) {\n        if (typeof page === \"number\") {\n            this.page.current = page;\n        }\n    }\n\n    @Output(\"clrDgPageChange\") currentChanged = new EventEmitter<number>(false);\n\n    /**\n     * Moves to the previous page if it exists\n     */\n    public previous() {\n        this.page.previous();\n    }\n\n    /**\n     * Moves to the next page if it exists\n     */\n    public next() {\n        this.page.next();\n    }\n\n    /**\n     * Index of the first item displayed on the current page, starting at 0\n     */\n    public get firstItem(): number {\n        return this.page.firstItem;\n    }\n\n    /**\n     * Index of the last item displayed on the current page, starting at 0\n     */\n    public get lastItem(): number {\n        return this.page.lastItem;\n    }\n\n    /**\n     * Conditionally adds page numbers before and after the current page\n     */\n    public get middlePages(): number[] {\n        const middlePages: number[] = [];\n        if (this.page.current > 1) {\n            middlePages.push(this.page.current - 1);\n        }\n        middlePages.push(this.page.current);\n        if (this.page.current < this.page.last) {\n            middlePages.push(this.page.current + 1);\n        }\n        return middlePages;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {AfterContentInit, Component, ContentChildren, Input, OnDestroy, QueryList} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {Expand} from \"../../utils/expand/providers/expand\";\n\nimport {ClrDatagridCell} from \"./datagrid-cell\";\nimport {DatagridHideableColumnModel} from \"./datagrid-hideable-column.model\";\nimport {HideableColumnService} from \"./providers/hideable-column.service\";\nimport {RowActionService} from \"./providers/row-action-service\";\nimport {Selection, SelectionType} from \"./providers/selection\";\n\n/**\n * Generic bland container serving various purposes for Datagrid.\n * For instance, it can help span a text over multiple rows in detail view.\n */\n@Component({\n    selector: \"clr-dg-row-detail\",\n    template: `\n        <ng-container *ngIf=\"!replace\">\n            <clr-dg-cell class=\"datagrid-fixed-column\"\n                *ngIf=\"selection.selectionType === SELECTION_TYPE.Multi \n                    || selection.selectionType === SELECTION_TYPE.Single\"></clr-dg-cell>\n            <clr-dg-cell *ngIf=\"rowActionService.hasActionableRow\" class=\"datagrid-fixed-column\"></clr-dg-cell>\n            <clr-dg-cell class=\"datagrid-fixed-column\"></clr-dg-cell>\n        </ng-container>\n        <ng-content></ng-content>\n    `,\n    host: {\n        \"[class.datagrid-row-flex]\": \"true\",\n        \"[class.datagrid-row-detail]\": \"!replace\",\n        \"[class.datagrid-container]\": \"cells.length === 0\",\n    }\n})\nexport class ClrDatagridRowDetail implements AfterContentInit, OnDestroy {\n    /* reference to the enum so that template can access it */\n    public SELECTION_TYPE = SelectionType;\n\n    constructor(public selection: Selection, public rowActionService: RowActionService, public expand: Expand,\n                public hideableColumnService: HideableColumnService) {}\n\n    @ContentChildren(ClrDatagridCell) cells: QueryList<ClrDatagridCell>;\n\n    get replace() {\n        return this.expand.replace;\n    }\n\n    @Input(\"clrDgReplace\")\n    set replace(value: boolean) {\n        this.expand.replace = !!value;\n    }\n\n    /**\n     * Subscriptions to all the services and QueryList changes\n     */\n    private _subscriptions: Subscription[] = [];\n\n    ngAfterContentInit() {\n        const columnsList = this.hideableColumnService.getColumns();\n        this.updateCellsForColumns(columnsList);\n\n        // Triggered when the Cells list changes per row-renderer\n        this._subscriptions.push(this.cells.changes.subscribe((cellList) => {\n            const columnList = this.hideableColumnService.getColumns();\n            if (cellList.length === columnList.length) {\n                this.updateCellsForColumns(columnList);\n            }\n        }));\n\n        // Used to set things up the first time but only after all the columns are ready.\n        this._subscriptions.push(this.hideableColumnService.columnListChange.subscribe((columnList) => {\n            // Prevents cell updates when cols and cells array are not aligned\n            if (columnList.length === this.cells.length) {\n                this.updateCellsForColumns(columnList);\n            }\n        }));\n    }\n\n    public updateCellsForColumns(columnList: DatagridHideableColumnModel[]) {\n        this.cells.forEach((cell, index) => {\n            const currentColumn = columnList[index];  // Accounts for null space.\n            if (currentColumn) {\n                cell.id = currentColumn.id;\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        this._subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, ElementRef, OnDestroy} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {DomAdapter} from \"./dom-adapter\";\nimport {DatagridRenderOrganizer} from \"./render-organizer\";\n\n@Directive({selector: \"[clrDgBody]\"})\nexport class DatagridBodyRenderer implements OnDestroy {\n    constructor(private el: ElementRef, private organizer: DatagridRenderOrganizer, private domAdapter: DomAdapter) {\n        this.subscription = organizer.scrollbar.subscribe(() => this.computeScrollbarWidth());\n    }\n\n    private subscription: Subscription;\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n\n    private computeScrollbarWidth() {\n        this.organizer.scrollbarWidth.next(this.domAdapter.scrollBarWidth(this.el.nativeElement));\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nexport const NO_LAYOUT_CLASS = \"datagrid-no-layout\";\nexport const COMPUTE_WIDTH_CLASS = \"datagrid-computing-columns-width\";\nexport const STRICT_WIDTH_CLASS = \"datagrid-fixed-width\";\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, ElementRef, OnDestroy, Renderer2} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {STRICT_WIDTH_CLASS} from \"./constants\";\nimport {DatagridRenderOrganizer} from \"./render-organizer\";\n\n@Directive({selector: \"clr-dg-cell\"})\nexport class DatagridCellRenderer implements OnDestroy {\n    constructor(private el: ElementRef, private renderer: Renderer2, organizer: DatagridRenderOrganizer) {\n        this.subscription = organizer.clearWidths.subscribe(() => this.clearWidth());\n    }\n\n    private subscription: Subscription;\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n\n    private clearWidth() {\n        this.renderer.removeClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n        this.renderer.setStyle(this.el.nativeElement, \"width\", null);\n    }\n\n    public setWidth(strict: boolean, value: number) {\n        if (strict) {\n            this.renderer.addClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n        } else {\n            this.renderer.removeClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n        }\n        this.renderer.setStyle(this.el.nativeElement, \"width\", value + \"px\");\n    }\n}",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {AfterViewInit, Directive, ElementRef, EventEmitter, OnDestroy, Output, Renderer2} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {DragDispatcher} from \"../providers/drag-dispatcher\";\n\nimport {DomAdapter} from \"./dom-adapter\";\nimport {DatagridRenderOrganizer} from \"./render-organizer\";\n\n@Directive({selector: \"clr-dg-column\", providers: [DragDispatcher]})\nexport class DatagridColumnResizer implements AfterViewInit, OnDestroy {\n    constructor(el: ElementRef, private renderer: Renderer2, private organizer: DatagridRenderOrganizer,\n                private domAdapter: DomAdapter, private dragDispatcher: DragDispatcher) {\n        this.columnEl = el.nativeElement;\n    }\n\n    columnEl: any;\n    columnRectWidth: number;\n    columnResizeBy: number = 0;\n\n    handleTrackerEl: ElementRef;\n\n    pageStartPositionX: number;\n    dragDistancePositionX: number;  // relative to pageStartPosition\n\n    dragWithinMinWidth: boolean = false;\n\n    columnMinWidth: number;\n\n    @Output(\"clrDgColumnResize\") resizeEmitter: EventEmitter<number> = new EventEmitter();\n\n    private subscriptions: Subscription[] = [];\n\n    ngOnDestroy() {\n        this.dragDispatcher.destroy();\n        this.subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\n    }\n\n    ngAfterViewInit() {\n        this.handleTrackerEl = this.dragDispatcher.handleTrackerRef.nativeElement;\n        this.dragDispatcher.addDragListener();\n        this.subscriptions.push(this.dragDispatcher.onDragStart.subscribe(() => this.dragStartHandler()));\n        this.subscriptions.push(this.dragDispatcher.onDragMove.subscribe(($event) => this.dragMoveHandler($event)));\n        this.subscriptions.push(this.dragDispatcher.onDragEnd.subscribe(() => this.dragEndHandler()));\n    }\n\n    dragStartHandler(): void {\n        if (!this.columnMinWidth) {\n            // sets the min width only on the very first drag attempt\n            this.columnMinWidth = this.domAdapter.minWidth(this.columnEl);\n        }\n        this.renderer.setStyle(this.handleTrackerEl, \"display\", \"block\");\n        this.renderer.setStyle(document.body, \"cursor\", \"col-resize\");\n        this.dragDistancePositionX = 0;\n        this.columnRectWidth = this.domAdapter.clientRectWidth(this.columnEl);\n        this.pageStartPositionX = this.domAdapter.clientRectRight(this.columnEl);\n    }\n\n    dragMoveHandler(moveEvent: any): void {\n        const pageMovePosition = moveEvent.pageX || moveEvent.changedTouches[0].pageX;\n        this.dragDistancePositionX = this.getPositionWithinMax(pageMovePosition - this.pageStartPositionX);\n        this.renderer.setStyle(this.handleTrackerEl, \"right\", -1 * this.dragDistancePositionX + \"px\");\n    }\n\n    dragEndHandler(): void {\n        this.renderer.setStyle(this.handleTrackerEl, \"right\", \"0px\");\n        this.renderer.setStyle(this.handleTrackerEl, \"display\", \"none\");\n        this.renderer.setStyle(document.body, \"cursor\", \"auto\");\n\n        if (this.dragDistancePositionX) {\n            this.columnResizeBy = this.dragDistancePositionX;\n\n            this.resizeEmitter.emit(this.columnRectWidth + this.columnResizeBy);\n\n            this.organizer.resize();\n        }\n    }\n\n    getPositionWithinMax(draggedDistance: number): number {\n        if (draggedDistance < 0) {\n            if (Math.abs(draggedDistance) < this.columnRectWidth - this.columnMinWidth) {\n                if (this.dragWithinMinWidth) {\n                    this.dragWithinMinWidth = false;\n                    this.renderer.removeClass(this.handleTrackerEl, \"exceeded-max\");\n                }\n                return draggedDistance;\n            } else {\n                if (!this.dragWithinMinWidth) {\n                    this.dragWithinMinWidth = true;\n                    this.renderer.addClass(this.handleTrackerEl, \"exceeded-max\");\n                }\n                return this.columnMinWidth - this.columnRectWidth;\n            }\n\n        } else {\n            if (this.dragWithinMinWidth) {\n                this.dragWithinMinWidth = false;\n                this.renderer.removeClass(this.handleTrackerEl, \"exceeded-max\");\n            }\n\n            return draggedDistance;\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, ElementRef, OnDestroy, Renderer2} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {DatagridRenderOrganizer} from \"./render-organizer\";\n\n@Directive({selector: \"[clrDgHead]\"})\nexport class DatagridHeadRenderer implements OnDestroy {\n    constructor(private el: ElementRef, private renderer: Renderer2, organizer: DatagridRenderOrganizer) {\n        this.subscription = organizer.scrollbarWidth.subscribe(width => this.accountForScrollbar(width));\n    }\n\n    private subscription: Subscription;\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n\n    private accountForScrollbar(width: number) {\n        this.renderer.setStyle(this.el.nativeElement, \"padding-right\", width + \"px\");\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, ElementRef, OnDestroy, Renderer2} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {DatagridColumnResizer} from \"./column-resizer\";\nimport {STRICT_WIDTH_CLASS} from \"./constants\";\nimport {DomAdapter} from \"./dom-adapter\";\nimport {DatagridRenderOrganizer} from \"./render-organizer\";\n\n@Directive({selector: \"clr-dg-column\"})\nexport class DatagridHeaderRenderer implements OnDestroy {\n    constructor(private el: ElementRef, private renderer: Renderer2, organizer: DatagridRenderOrganizer,\n                private domAdapter: DomAdapter, private columnResizer: DatagridColumnResizer) {\n        this.subscriptions.push(organizer.clearWidths.subscribe(() => this.clearWidth()));\n        this.subscriptions.push(organizer.detectStrictWidths.subscribe(() => this.detectStrictWidth()));\n    }\n\n    private subscriptions: Subscription[] = [];\n\n    /**\n     * Indicates if the column has a strict width, so it doesn't shrink or expand based on the content.\n     */\n    public strictWidth: number;\n    private widthSet: boolean = false;\n\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n    private clearWidth() {\n        // remove the width only if we set it, and it is not changed by dragging.\n        if (this.widthSet && !this.columnResizer.columnResizeBy) {\n            this.renderer.setStyle(this.el.nativeElement, \"width\", null);\n        }\n    }\n\n    private detectStrictWidth() {\n        if (this.columnResizer.columnResizeBy) {\n            this.strictWidth = this.columnResizer.columnRectWidth + this.columnResizer.columnResizeBy;\n        } else {\n            this.strictWidth = this.domAdapter.userDefinedWidth(this.el.nativeElement);\n        }\n    }\n\n    public computeWidth(): number {\n        let width: number = this.strictWidth;\n        if (!width) {\n            width = this.domAdapter.scrollWidth(this.el.nativeElement);\n        }\n        return width;\n    }\n\n    public setWidth(width: number) {\n        if (this.strictWidth) {\n            if (this.columnResizer.columnResizeBy) {\n                this.renderer.setStyle(this.el.nativeElement, \"width\", width + \"px\");\n                this.columnResizer.columnResizeBy = 0;\n                this.widthSet = false;\n            }\n            this.renderer.addClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n            // We don't actually set the width if there already is a user-defined one, we just add the class\n            return;\n        }\n        this.renderer.removeClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n        this.renderer.setStyle(this.el.nativeElement, \"width\", width + \"px\");\n        this.widthSet = true;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * This version of the DomAdapter is for use on non-browser platforms, where there are no\n * nativeElements to use for calculations.\n */\n\nimport {Injectable} from \"@angular/core\";\nimport {DomAdapter} from \"./dom-adapter\";\n\n@Injectable()\nexport class NoopDomAdapter implements DomAdapter {\n    userDefinedWidth(element: any): number {\n        return 0;\n    }\n\n    scrollBarWidth(element: any) {\n        return 0;\n    }\n\n    scrollWidth(element: any) {\n        return 0;\n    }\n\n    computedHeight(element: any): number {\n        return 0;\n    }\n\n    clientRectHeight(element: any): number {\n        return 0;\n    }\n\n    clientRectRight(element: any): number {\n        return 0;\n    }\n\n    clientRectWidth(element: any): number {\n        return 0;\n    }\n\n    minWidth(element: any): number {\n        return 0;\n    }\n\n    focus(element: any): void {}\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {isPlatformBrowser} from \"@angular/common\";\nimport {\n    AfterContentInit,\n    AfterViewChecked,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    PLATFORM_ID,\n    QueryList,\n    Renderer2,\n} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {Items} from \"../providers/items\";\nimport {Page} from \"../providers/page\";\n\nimport {DomAdapter} from \"./dom-adapter\";\nimport {DatagridHeaderRenderer} from \"./header-renderer\";\nimport {NoopDomAdapter} from \"./noop-dom-adapter\";\nimport {DatagridRenderOrganizer} from \"./render-organizer\";\n\n// Fixes build error\n// @dynamic (https://github.com/angular/angular/issues/19698#issuecomment-338340211)\nexport const domAdapterFactory = (platformId: Object) => {\n    if (isPlatformBrowser(platformId)) {\n        return new DomAdapter();\n    } else {\n        return new NoopDomAdapter();\n    }\n};\n\n// Fixes build error\n// @dynamic (https://github.com/angular/angular/issues/19698#issuecomment-338340211)\n@Directive(\n    {selector: \"clr-datagrid\", providers: [{provide: DomAdapter, useFactory: domAdapterFactory, deps: [PLATFORM_ID]}]})\nexport class DatagridMainRenderer implements AfterContentInit, AfterViewChecked, OnDestroy {\n    constructor(private organizer: DatagridRenderOrganizer, private items: Items, private page: Page,\n                private domAdapter: DomAdapter, private el: ElementRef, private renderer: Renderer2) {\n        this._subscriptions.push(organizer.computeWidths.subscribe(() => this.computeHeadersWidth()));\n        this._subscriptions.push(this.page.sizeChange.subscribe(() => {\n            if (this._heightSet) {\n                this.resetDatagridHeight();\n            }\n        }));\n        this._subscriptions.push(this.items.change.subscribe(() => this.shouldStabilizeColumns = true));\n    }\n\n    @ContentChildren(DatagridHeaderRenderer) public headers: QueryList<DatagridHeaderRenderer>;\n\n    ngAfterContentInit() {\n        this._subscriptions.push(this.headers.changes.subscribe(() => {\n            // TODO: only re-stabilize if a column was added or removed. Reordering is fine.\n            this.columnsSizesStable = false;\n            this.stabilizeColumns();\n        }));\n    }\n\n    ngAfterViewChecked() {\n        if (this.shouldStabilizeColumns) {\n            this.stabilizeColumns();\n        }\n        if (this.shouldComputeHeight()) {\n            setTimeout(() => {\n                this.computeDatagridHeight();\n            });\n        }\n    }\n\n    private _heightSet: boolean = false;\n\n    private shouldComputeHeight(): boolean {\n        if (!this._heightSet && this.page.size > 0) {\n            if (this.items.displayed.length === this.page.size) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Computes the height of the datagrid.\n     *\n     * NOTE: We had to choose to set the height instead of the min-height because\n     * IE 11 requires the height on the parent for the children flex grow/shrink properties to work.\n     * When we used min-height, 1 1 auto doesn't used to work in IE11 :-(\n     * But this doesn't affect the fix. It works in both fixed & variable height datagrids.\n     *\n     * Refer: http://stackoverflow.com/questions/24396205/flex-grow-not-working-in-internet-explorer-11-0\n     */\n    private computeDatagridHeight() {\n        // IE doesn't return correct value for getComputedStyle(element).getPropertyValue(\"height\")\n        const value: number = this.domAdapter.clientRectHeight(this.el.nativeElement);\n        this.renderer.setStyle(this.el.nativeElement, \"height\", value + \"px\");\n        this._heightSet = true;\n    }\n\n    private resetDatagridHeight() {\n        this.renderer.setStyle(this.el.nativeElement, \"height\", \"\");\n        this._heightSet = false;\n    }\n\n    private _subscriptions: Subscription[] = [];\n\n    ngOnDestroy() {\n        this._subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n    /**\n     * Makes each header compute its width.\n     */\n    private computeHeadersWidth() {\n        const nbColumns: number = this.headers.length;\n        let allStrict = true;\n\n        this.headers.forEach((header, index) => {\n            // On the last header column check whether all columns have strict widths.\n            // If all columns have strict widths, remove the strict width from the last column and make it the column's\n            // minimum width so that when all previous columns shrink, it will get a flexible width and cover the empty\n            // gap in the Datagrid.\n\n            if (!header.strictWidth) {\n                allStrict = false;\n            }\n\n            if (nbColumns === index + 1 && allStrict) {\n                delete header.strictWidth;\n            }\n\n            this.organizer.widths[index] = {px: header.computeWidth(), strict: !!header.strictWidth};\n        });\n\n        this.headers.forEach((header, index) => header.setWidth(this.organizer.widths[index].px));\n    }\n\n    /**\n     * Indicates if we want to re-compute columns width. This should only happen:\n     * 1) When headers change, with columns being added or removed\n     * 2) When rows are lazily loaded for the first time\n     */\n    private columnsSizesStable = false;\n\n    private shouldStabilizeColumns = true;\n\n    /**\n     * Triggers a whole re-rendring cycle to set column sizes, if needed.\n     */\n    private stabilizeColumns() {\n        this.shouldStabilizeColumns = false;\n        if (this.columnsSizesStable) {\n            // change in items might have introduced/taken away the scrollbar\n\n            // FIXME: setTimeout is needed here because:\n            // When the user changes the page the following things happen:\n            // 1. The array which contains the items displayed is updated to contain the items on the new page.\n            // 2. An event is emitted which is subscribed to by the main renderer (this file) and this marks the\n            // shouldStabilizeColumns flag to true\n            // 3. While this is happening the datagrid is in the process of cleaning up the view. The view first\n            // renders the new displayed items and then cleans up the old items. But there is a point where the view\n            // contains the old items as well as the new items. So if the page size is 10 the view contains 20 items.\n            // This causes the datagrid body to overflow.\n            // Now since shouldStabilizeColumns was set to true, the scrollbar width is calculated\n            // and added to the datagrid header. Adding the setTimeout gives Angular time to clean up the view so that\n            // the scrollbar disappears.\n            // See this: https://github.com/angular/angular/issues/19094\n            // When the above issue is resolve, remove the setTimeout\n            setTimeout(() => {\n                this.organizer.scrollbar.next();\n            });\n            return;\n        }\n        // No point resizing if there are no rows, we wait until they are actually loaded.\n        if (this.items.displayed.length > 0) {\n            this.organizer.resize();\n            this.columnsSizesStable = true;\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {AfterContentInit, ContentChildren, Directive, OnDestroy, QueryList} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {DatagridCellRenderer} from \"./cell-renderer\";\nimport {DatagridRenderOrganizer} from \"./render-organizer\";\n\n@Directive({selector: \"clr-dg-row, clr-dg-row-detail\"})\nexport class DatagridRowRenderer implements AfterContentInit, OnDestroy {\n    constructor(private organizer: DatagridRenderOrganizer) {\n        this.subscription = organizer.alignColumns.subscribe(() => this.setWidths());\n    }\n\n    private subscription: Subscription;\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n\n    @ContentChildren(DatagridCellRenderer) cells: QueryList<DatagridCellRenderer>;\n\n    private setWidths() {\n        if (this.organizer.widths.length !== this.cells.length) {\n            return;\n        }\n        this.cells.forEach((cell, index) => {\n            const width = this.organizer.widths[index];\n            cell.setWidth(width.strict, width.px);\n        });\n    }\n\n    ngAfterContentInit() {\n        this.cells.changes.subscribe(() => {\n            this.setWidths();\n        });\n    }\n\n    ngAfterViewInit() {\n        this.setWidths();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, ElementRef, OnDestroy, Renderer2, TemplateRef, ViewChild, ViewContainerRef} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {COMPUTE_WIDTH_CLASS, NO_LAYOUT_CLASS} from \"./constants\";\nimport {DatagridRenderOrganizer} from \"./render-organizer\";\n\n@Component({\n    selector: \"clr-dg-table-wrapper\",\n    template: `\n        <ng-template #head><ng-content select=\"[clrDgHead]\"></ng-content></ng-template>\n        <ng-container #outside></ng-container>\n        <div clrDgBody class=\"datagrid-body\">\n            <ng-container #inside></ng-container>\n            <ng-content></ng-content>\n        </div>\n    `\n})\nexport class DatagridTableRenderer implements OnDestroy {\n    constructor(private el: ElementRef, private renderer: Renderer2, organizer: DatagridRenderOrganizer) {\n        this.subscriptions.push(organizer.tableMode.subscribe(on => this.tableMode(on)));\n        this.subscriptions.push(organizer.noLayout.subscribe(on => this.noLayout(on)));\n    }\n\n    private subscriptions: Subscription[] = [];\n    ngOnDestroy() {\n        this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n    @ViewChild(\"head\") projected: TemplateRef<any>;\n    @ViewChild(\"outside\", {read: ViewContainerRef}) outsideContainer: ViewContainerRef;\n    @ViewChild(\"inside\", {read: ViewContainerRef}) insideContainer: ViewContainerRef;\n\n    ngAfterViewInit() {\n        this.outsideContainer.createEmbeddedView(this.projected);\n    }\n\n    private tableMode(on: boolean) {\n        if (on) {\n            // We move stuff into the body before making it visible\n            this.insideContainer.insert(this.outsideContainer.detach(0), 0);\n            this.renderer.addClass(this.el.nativeElement, COMPUTE_WIDTH_CLASS);\n        } else {\n            // We make stuff invisible before moving it out of the body\n            this.renderer.removeClass(this.el.nativeElement, COMPUTE_WIDTH_CLASS);\n            this.outsideContainer.insert(this.insideContainer.detach(0), 0);\n        }\n    }\n\n    private noLayout(on: boolean) {\n        if (on) {\n            this.renderer.addClass(this.el.nativeElement, NO_LAYOUT_CLASS);\n        } else {\n            this.renderer.removeClass(this.el.nativeElement, NO_LAYOUT_CLASS);\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule, Type} from \"@angular/core\";\nimport {FormsModule} from \"@angular/forms\";\n\nimport {ClrFormsModule} from \"../../forms-deprecated/forms.module\";\nimport {ClrIconModule} from \"../../icon/icon.module\";\nimport {ClrCommonPopoverModule} from \"../../popover/common/popover.module\";\nimport {ClrIfExpandModule} from \"../../utils/expand/if-expand.module\";\nimport {ClrLoadingModule} from \"../../utils/loading/loading.module\";\nimport {ClrOutsideClickModule} from \"../../utils/outside-click/outside-click.module\";\n\nimport {DatagridRowExpandAnimation} from \"./animation-hack/row-expand-animation\";\nimport {DatagridStringFilter} from \"./built-in/filters/datagrid-string-filter\";\nimport {ActionableOompaLoompa} from \"./chocolate/actionable-oompa-loompa\";\nimport {DatagridWillyWonka} from \"./chocolate/datagrid-willy-wonka\";\nimport {ExpandableOompaLoompa} from \"./chocolate/expandable-oompa-loompa\";\nimport {ClrDatagrid} from \"./datagrid\";\nimport {ClrDatagridActionBar} from \"./datagrid-action-bar\";\nimport {ClrDatagridActionOverflow} from \"./datagrid-action-overflow\";\nimport {ClrDatagridCell} from \"./datagrid-cell\";\nimport {ClrDatagridColumn} from \"./datagrid-column\";\nimport {ClrDatagridColumnToggle} from \"./datagrid-column-toggle\";\nimport {ClrDatagridColumnToggleButton} from \"./datagrid-column-toggle-button\";\nimport {ClrDatagridColumnToggleTitle} from \"./datagrid-column-toggle-title\";\nimport {DatagridDetailRegisterer} from \"./datagrid-detail-registerer\";\nimport {ClrDatagridFilter} from \"./datagrid-filter\";\nimport {ClrDatagridFooter} from \"./datagrid-footer\";\nimport {ClrDatagridHideableColumn} from \"./datagrid-hideable-column\";\nimport {ClrDatagridItems} from \"./datagrid-items\";\nimport {ClrDatagridItemsTrackBy} from \"./datagrid-items-trackby\";\nimport {ClrDatagridPagination} from \"./datagrid-pagination\";\nimport {ClrDatagridPlaceholder} from \"./datagrid-placeholder\";\nimport {ClrDatagridRow} from \"./datagrid-row\";\nimport {ClrDatagridRowDetail} from \"./datagrid-row-detail\";\nimport {ClrDatagridComparatorInterface} from \"./interfaces/comparator.interface\";\nimport {ClrDatagridFilterInterface} from \"./interfaces/filter.interface\";\nimport {ClrDatagridStateInterface} from \"./interfaces/state.interface\";\nimport {ClrDatagridStringFilterInterface} from \"./interfaces/string-filter.interface\";\nimport {DatagridBodyRenderer} from \"./render/body-renderer\";\nimport {DatagridCellRenderer} from \"./render/cell-renderer\";\nimport {DatagridColumnResizer} from \"./render/column-resizer\";\nimport {DatagridHeadRenderer} from \"./render/head-renderer\";\nimport {DatagridHeaderRenderer} from \"./render/header-renderer\";\nimport {DatagridMainRenderer} from \"./render/main-renderer\";\nimport {DatagridRowRenderer} from \"./render/row-renderer\";\nimport {DatagridTableRenderer} from \"./render/table-renderer\";\n\nexport const CLR_DATAGRID_DIRECTIVES: Type<any>[] = [\n    // Core\n    ClrDatagrid, ClrDatagridActionBar, ClrDatagridActionOverflow, ClrDatagridColumn, ClrDatagridColumnToggle,\n    ClrDatagridHideableColumn, ClrDatagridFilter, ClrDatagridItems, ClrDatagridItemsTrackBy, ClrDatagridRow,\n    ClrDatagridRowDetail, DatagridDetailRegisterer, ClrDatagridCell, ClrDatagridFooter, ClrDatagridPagination,\n    ClrDatagridPlaceholder, ClrDatagridColumnToggleButton, ClrDatagridColumnToggleTitle,\n\n    // Renderers\n    DatagridMainRenderer, DatagridTableRenderer, DatagridHeadRenderer, DatagridHeaderRenderer, DatagridBodyRenderer,\n    DatagridColumnResizer, DatagridRowRenderer, DatagridCellRenderer,\n\n    // Chocolate\n    DatagridWillyWonka, ActionableOompaLoompa, ExpandableOompaLoompa,\n\n    // Animation hack\n    DatagridRowExpandAnimation,\n\n    // Built-in shortcuts\n    DatagridStringFilter\n];\n\n@NgModule({\n    imports: [\n        CommonModule, ClrIconModule, ClrFormsModule, FormsModule, ClrCommonPopoverModule, ClrLoadingModule,\n        ClrOutsideClickModule\n    ],\n    declarations: [\n        CLR_DATAGRID_DIRECTIVES,\n    ],\n    exports: [CLR_DATAGRID_DIRECTIVES, ClrIfExpandModule]\n})\nexport class ClrDatagridModule {}\n\n/* tslint:disable variable-name */\n/** @deprecated since 0.11 */\nexport interface Datagrid extends ClrDatagrid {}\n/** @deprecated since 0.11 */\nexport const Datagrid = ClrDatagrid;\n/** @deprecated since 0.11 */\nexport interface DatagridActionBar extends ClrDatagridActionBar {}\n/** @deprecated since 0.11 */\nexport const DatagridActionBar = ClrDatagridActionBar;\n/** @deprecated since 0.11 */\nexport interface DatagridActionOverflow extends ClrDatagridActionOverflow {}\n/** @deprecated since 0.11 */\nexport const DatagridActionOverflow = ClrDatagridActionOverflow;\n/** @deprecated since 0.11 */\nexport interface DatagridColumn extends ClrDatagridColumn {}\n/** @deprecated since 0.11 */\nexport const DatagridColumn = ClrDatagridColumn;\n/** @deprecated since 0.11 */\nexport interface DatagridColumnToggle extends ClrDatagridColumnToggle {}\n/** @deprecated since 0.11 */\nexport const DatagridColumnToggle = ClrDatagridColumnToggle;\n/** @deprecated since 0.11 */\nexport interface DatagridHideableColumnDirective extends ClrDatagridHideableColumn {}\n/** @deprecated since 0.11 */\nexport const DatagridHideableColumnDirective = ClrDatagridHideableColumn;\n/** @deprecated since 0.11 */\nexport interface DatagridFilter extends ClrDatagridFilter {}\n/** @deprecated since 0.11 */\nexport const DatagridFilter = ClrDatagridFilter;\n/** @deprecated since 0.11 */\nexport interface DatagridItems extends ClrDatagridItems {}\n/** @deprecated since 0.11 */\nexport const DatagridItems = ClrDatagridItems;\n/** @deprecated since 0.11 */\nexport interface DatagridRow extends ClrDatagridRow {}\n/** @deprecated since 0.11 */\nexport const DatagridRow = ClrDatagridRow;\n/** @deprecated since 0.11 */\nexport interface DatagridRowDetail extends ClrDatagridRowDetail {}\n/** @deprecated since 0.11 */\nexport const DatagridRowDetail = ClrDatagridRowDetail;\n/** @deprecated since 0.11 */\nexport interface DatagridCell extends ClrDatagridCell {}\n/** @deprecated since 0.11 */\nexport const DatagridCell = ClrDatagridCell;\n/** @deprecated since 0.11 */\nexport interface DatagridFooter extends ClrDatagridFooter {}\n/** @deprecated since 0.11 */\nexport const DatagridFooter = ClrDatagridFooter;\n/** @deprecated since 0.11 */\nexport interface DatagridPagination extends ClrDatagridPagination {}\n/** @deprecated since 0.11 */\nexport const DatagridPagination = ClrDatagridPagination;\n/** @deprecated since 0.11 */\nexport interface DatagridPlaceholder extends ClrDatagridPlaceholder {}\n/** @deprecated since 0.11 */\nexport const DatagridPlaceholder = ClrDatagridPlaceholder;\n/** @deprecated since 0.11 */\nexport enum SortOrder {\n    // Cannot extend an enum so have to redeclare it\n    Unsorted = 0,\n    Asc = 1,\n    Desc = -1\n}\n/** @deprecated since 0.11 */\nexport interface Comparator<T> extends ClrDatagridComparatorInterface<T> {}\n/** @deprecated since 0.11 */\nexport interface Filter<T> extends ClrDatagridFilterInterface<T> {}\n/** @deprecated since 0.11 */\nexport interface State extends ClrDatagridStateInterface {}\n/** @deprecated since 0.11 */\nexport interface StringFilter<T> extends ClrDatagridStringFilterInterface<T> {}\n/* tslint:enable variable-name */\n/** @deprecated since 0.11 */\nexport const DATAGRID_DIRECTIVES = CLR_DATAGRID_DIRECTIVES;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {animate, state, style, transition, trigger} from \"@angular/animations\";\nimport {Component, EventEmitter, HostBinding, Input, OnInit, Optional, Output, SkipSelf} from \"@angular/core\";\n\n@Component({\n    selector: \"clr-stack-block\",\n    template: `\n        <dt class=\"stack-block-label\" (click)=\"toggleExpand()\">\n            <ng-content select=\"clr-stack-label\"></ng-content>\n        </dt>\n        <dd class=\"stack-block-content\">\n            <ng-content></ng-content>\n        </dd>\n        <!-- FIXME: remove this string concatenation when boolean states are supported -->\n        <div [@collapse]=\"''+!expanded\" class=\"stack-children\">\n            <ng-content select=\"clr-stack-block\"></ng-content>\n        </div>\n    `,\n    // Custom elements are inline by default\n    styles: [`\n        :host { display: block; }\n    `],\n    // Make sure the host has the proper class for styling purposes\n    host: {\"[class.stack-block]\": \"true\"},\n    animations: [trigger(\"collapse\",\n                         [\n                             state(\"true\", style({\"height\": 0})),\n                             transition(\"true => false\", [animate(\"0.2s ease-in-out\", style({\"height\": \"*\"}))]),\n                             transition(\"false => true\", [style({\"height\": \"*\"}), animate(\"0.2s ease-in-out\")])\n                         ])]\n})\nexport class ClrStackBlock implements OnInit {\n    @HostBinding(\"class.stack-block-expanded\") @Input(\"clrSbExpanded\") expanded: boolean = false;\n    @Output(\"clrSbExpandedChange\") expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n    @HostBinding(\"class.stack-block-expandable\") @Input(\"clrSbExpandable\") expandable: boolean = false;\n\n    private _changedChildren: number = 0;\n    private _fullyInitialized: boolean = false;\n    private _changed: boolean = false;\n\n    @HostBinding(\"class.stack-block-changed\")\n    get getChangedValue(): boolean {\n        return this._changed || (this._changedChildren > 0 && !this.expanded);\n    }\n\n    @Input(\"clrSbNotifyChange\")\n    set setChangedValue(value: boolean) {\n        this._changed = value;\n\n        if (this.parent && this._fullyInitialized) {\n            if (value) {\n                this.parent._changedChildren++;\n            } else {\n                this.parent._changedChildren--;\n            }\n        }\n    }\n\n    /*\n     * This would be more efficient with @ContentChildren, with the parent ClrStackBlock\n     * querying for children StackBlocks, but this feature is not available when downgrading\n     * the component for Angular 1.\n     */\n    constructor(@SkipSelf() @Optional() private parent: ClrStackBlock) {\n        if (parent) {\n            parent.addChild();\n        }\n    }\n\n    ngOnInit(): void {\n        // in order to access the parent ClrStackBlock's properties,\n        // the child ClrStackBlock  has to be fully initialized at first.\n        this._fullyInitialized = true;\n    }\n\n    addChild(): void {\n        this.expandable = true;\n    }\n\n    toggleExpand(): void {\n        if (this.expandable) {\n            this.expanded = !this.expanded;\n            this.expandedChange.emit(this.expanded);\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, EventEmitter, Output} from \"@angular/core\";\n\n@Component({\n    selector: \"clr-stack-view\",\n    template: `\n        <ng-content select=\"clr-stack-header\"></ng-content>\n        <dl class=\"stack-view\"><ng-content></ng-content></dl>\n    `,\n    // Custom elements are inline by default.\n    styles: [`\n        :host { display: block; }\n    `]\n})\nexport class ClrStackView {\n    /**\n     * Undocumented experimental feature: inline editing.\n     */\n    editable: boolean = false;\n\n    @Output(\"clrStackSave\") save: EventEmitter<void> = new EventEmitter<void>(false);\n\n    private _editMode: boolean = false;\n\n    editingChange: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n    get editing(): boolean {\n        return this.editable && this._editMode;\n    }\n\n    set editing(value: boolean) {\n        if (this.editable) {\n            this._editMode = value;\n            this.editingChange.emit(value);\n            if (!value) {\n                this.save.emit(null);\n            }\n        }\n    }\n    /**\n     * End of undocumented experimental feature.\n     */\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component} from \"@angular/core\";\nimport {ClrStackView} from \"./stack-view\";\n\n@Component({\n    selector: \"clr-stack-header\",\n    template: `\n        <h4 class=\"stack-header\">\n            <span class=\"stack-title\"><ng-content></ng-content></span>\n            \n            <span class=\"stack-actions\">\n                <ng-content select=\".stack-action\"></ng-content>\n                <!-- Undocumented experimental feature: inline editing. -->\n                <button *ngIf=\"stackView.editable\" class=\"stack-action btn btn-sm btn-link\" \n                        (click)=\"stackView.editing = !stackView.editing\" type=\"button\">\n                        Edit\n                </button>\n                <!-- End of undocumented experimental feature. -->\n            </span>\n        </h4>\n    `,\n    // Custom elements are inline by default\n    styles: [`\n        :host { display: block; }\n    `]\n})\nexport class ClrStackHeader {\n    constructor(public stackView: ClrStackView) {}\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n/**\n * Undocumented experimental feature: inline editing.\n */\n\nimport {EventEmitter} from \"@angular/core\";\nimport {ClrStackView} from \"./stack-view\";\n\nexport class StackControl {\n    model: any;\n    modelChange: EventEmitter<any> = new EventEmitter<any>(false);\n\n    constructor(protected stackView: ClrStackView) {\n        // Make the ClrStackView editable, since it contains a StackControl\n        this.stackView.editable = true;\n        this.stackView.editingChange.subscribe((editing: boolean) => {\n            // Edit mode was closed\n            if (!editing) {\n                this.modelChange.emit(this.model);\n            }\n        });\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n/**\n * Undocumented experimental feature: inline editing.\n *\n * TODO: support more types of inputs: checkbox, radio, ...\n * TODO: Mirror input attributes from the host to the actual input: size, min, max, placeholder, ...\n */\n\nimport {Component} from \"@angular/core\";\nimport {StackControl} from \"./stack-control\";\nimport {ClrStackView} from \"./stack-view\";\n\n@Component({\n    selector: \"clr-stack-input\",\n    inputs: [\"model: clrModel\", \"type\"],\n    outputs: [\"modelChange: clrModelChange\"],\n    template: `\n        <span *ngIf=\"!stackView.editing\">{{model}}</span>\n        <input [type]=\"type\" *ngIf=\"stackView.editing\" [(ngModel)]=\"model\"/>\n    `\n})\nexport class ClrStackInput extends StackControl {\n    type: string = \"text\";\n\n    constructor(public stackView: ClrStackView) {\n        super(stackView);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n/**\n * Undocumented experimental feature: inline editing.\n *\n * TODO: Offer a a way to customize the value displayed, plain value may be unreadable.\n */\n\nimport {Component} from \"@angular/core\";\nimport {StackControl} from \"./stack-control\";\nimport {ClrStackView} from \"./stack-view\";\n\n@Component({\n    selector: \"clr-stack-select\",\n    inputs: [\"model: clrModel\"],\n    outputs: [\"modelChange: clrModelChange\"],\n    template: `\n        <span *ngIf=\"!stackView.editing\">{{model}}</span>\n        <div class=\"select\" *ngIf=\"stackView.editing\" >\n            <select [(ngModel)]=\"model\">\n                <ng-content></ng-content>\n            </select>\n        </div>\n    `\n})\nexport class ClrStackSelect extends StackControl {\n    constructor(public stackView: ClrStackView) {\n        super(stackView);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive} from \"@angular/core\";\n\n@Directive({selector: \"clr-stack-label, clr-stack-content\"})\nexport class ClrStackViewCustomTags {\n    // No behavior\n    // The only purpose is to \"declare\" the tag in Angular\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule, Type} from \"@angular/core\";\nimport {FormsModule} from \"@angular/forms\";\n\nimport {ClrStackBlock} from \"./stack-block\";\nimport {ClrStackHeader} from \"./stack-header\";\nimport {ClrStackInput} from \"./stack-input\";\nimport {ClrStackSelect} from \"./stack-select\";\nimport {ClrStackView} from \"./stack-view\";\nimport {ClrStackViewCustomTags} from \"./stack-view-custom-tags\";\n\nexport const CLR_STACK_VIEW_DIRECTIVES: Type<any>[] = [\n    ClrStackView, ClrStackHeader, ClrStackBlock, ClrStackViewCustomTags,\n    /**\n     * Undocumented experimental feature: inline editing.\n     */\n    ClrStackInput, ClrStackSelect\n    /**\n     * End of undocumented experimental feature.\n     */\n];\n\n@NgModule({\n    imports: [CommonModule, FormsModule],\n    declarations: [CLR_STACK_VIEW_DIRECTIVES],\n    exports: [CLR_STACK_VIEW_DIRECTIVES]\n})\nexport class ClrStackViewModule {}\n\n/* tslint:disable variable-name */\n/** @deprecated since 0.11 */\nexport interface StackView extends ClrStackView {}\n/** @deprecated since 0.11 */\nexport const StackView = ClrStackView;\n/** @deprecated since 0.11 */\nexport interface StackHeader extends ClrStackHeader {}\n/** @deprecated since 0.11 */\nexport const StackHeader = ClrStackHeader;\n/** @deprecated since 0.11 */\nexport interface StackBlock extends ClrStackBlock {}\n/** @deprecated since 0.11 */\nexport const StackBlock = ClrStackBlock;\n/** @deprecated since 0.11 */\nexport interface StackViewCustomTags extends ClrStackViewCustomTags {}\n/** @deprecated since 0.11 */\nexport const StackViewCustomTags = ClrStackViewCustomTags;\n/** @deprecated since 0.11 */\nexport interface StackInput extends ClrStackInput {}\n/** @deprecated since 0.11 */\nexport const StackInput = ClrStackInput;\n/** @deprecated since 0.11 */\nexport interface StackSelect extends ClrStackSelect {}\n/** @deprecated since 0.11 */\nexport const StackSelect = ClrStackSelect;\n/* tslint:enable variable-name */\n/** @deprecated since 0.11 */\nexport const STACK_VIEW_DIRECTIVES = CLR_STACK_VIEW_DIRECTIVES;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {InjectionToken} from \"@angular/core\";\n\nlet NB_INSTANCES = 0;\n\nexport const UNIQUE_ID = new InjectionToken<string>(\"UNIQUE_ID\");\n\nexport function uniqueIdFactory() {\n    return \"clr-id-\" + (NB_INSTANCES++);\n}\n\nexport const UNIQUE_ID_PROVIDER = {\n    provide: UNIQUE_ID,\n    useFactory: uniqueIdFactory\n};\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nexport abstract class AbstractTreeSelection {\n    constructor(public parent: AbstractTreeSelection) {}\n\n    abstract get children(): AbstractTreeSelection[];\n\n    abstract selectedChanged(): void;\n    abstract indeterminateChanged(): void;\n\n    private _selected: boolean = false;\n    private _indeterminate: boolean = false;\n\n    public get selected(): boolean {\n        return this._selected;\n    }\n\n    public set selected(value: boolean) {\n        this._selected = value;\n        this.indeterminate = false;\n        this.children.forEach(child => child.parentChanged(value));\n        if (this.parent) {\n            this.parent.childChanged();\n        }\n        this.selectedChanged();\n    }\n\n    public get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    public set indeterminate(value: boolean) {\n        value = !!value;\n        if (this._indeterminate !== value) {\n            this._indeterminate = value;\n            this.indeterminateChanged();\n        }\n    }\n\n    childChanged(): void {\n        let oneSelectedChild = false;\n        const previousSelectedValue: boolean = this._selected;\n        const previousIndeterminateValue: boolean = this._indeterminate;\n        this._selected = true;\n        this._indeterminate = false;\n\n        for (const child of this.children) {\n            if (child.indeterminate) {\n                this._selected = false;\n                this._indeterminate = true;\n                break;\n            }\n            if (child.selected) {\n                oneSelectedChild = true;\n                if (this._selected === false) {\n                    this._indeterminate = true;\n                    break;\n                }\n            } else {\n                this._selected = false;\n                if (oneSelectedChild) {\n                    this._indeterminate = true;\n                    break;\n                }\n            }\n        }\n\n        if (this.parent &&\n            (this._selected !== previousSelectedValue || this._indeterminate !== previousIndeterminateValue)) {\n            this.parent.childChanged();\n        }\n\n        if (this.selected !== previousSelectedValue) {\n            this.selectedChanged();\n        }\n\n        if (this.indeterminate !== previousIndeterminateValue) {\n            this.indeterminateChanged();\n        }\n    }\n\n    parentChanged(selected: boolean) {\n        if (selected && !this.selected) {\n            this._selected = true;\n            this.indeterminate = false;\n            this.children.forEach(child => child.parentChanged(true));\n            this.selectedChanged();\n        }\n        if (!selected && (this.selected || this.indeterminate)) {\n            this._selected = false;\n            this.indeterminate = false;\n            this.children.forEach(child => child.parentChanged(false));\n            this.selectedChanged();\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Injectable} from \"@angular/core\";\n\n@Injectable()\nexport class TreeSelectionService { selectable: boolean = false; }\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {TreeSelectionService} from \"./tree-selection.service\";\n\nexport function clrTreeSelectionProviderFactory(existing: TreeSelectionService) {\n    return existing || new TreeSelectionService();\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {animate, state, style, transition, trigger} from \"@angular/animations\";\nimport {Component, EventEmitter, Inject, Input, OnDestroy, Optional, Output, SkipSelf} from \"@angular/core\";\n\nimport {Expand} from \"../../utils/expand/providers/expand\";\nimport {UNIQUE_ID, UNIQUE_ID_PROVIDER} from \"../../utils/id-generator/id-generator.service\";\nimport {LoadingListener} from \"../../utils/loading/loading-listener\";\n\nimport {AbstractTreeSelection} from \"./abstract-tree-selection\";\nimport {clrTreeSelectionProviderFactory} from \"./providers/tree-selection.provider\";\nimport {TreeSelectionService} from \"./providers/tree-selection.service\";\n\n@Component({\n    selector: \"clr-tree-node\",\n    template: `<!--\n  ~ Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div class=\"clr-tree-node-content-container\">\n    <button\n        type=\"button\"\n        class=\"clr-treenode-caret\"\n        (click)=\"toggleExpand()\"\n        *ngIf=\"nodeExpand.expandable && !nodeExpand.loading\">\n        <clr-icon\n            class=\"clr-treenode-caret-icon\"\n            shape=\"caret\"\n            [attr.dir]=\"caretDirection\"></clr-icon>\n    </button>\n    <div class=\"clr-treenode-spinner-container\" *ngIf=\"nodeExpand.expandable && nodeExpand.loading\">\n        <span class=\"clr-treenode-spinner spinner\">\n            Loading...\n        </span>\n    </div>\n    <clr-checkbox\n        class=\"clr-treenode-checkbox\"\n        *ngIf=\"selectable\"\n        [(ngModel)]=\"selected\"\n        [(clrIndeterminate)]=\"indeterminate\"\n        [clrAriaLabeledBy]=\"nodeId\"></clr-checkbox>\n    <div class=\"clr-treenode-content\" [id]=\"nodeId\">\n        <ng-content></ng-content>\n    </div>\n</div>\n<!-- FIXME: remove this string concatenation when boolean states are supported -->\n<div\n    class=\"clr-treenode-children\"\n    [@childNodesState]=\"state\">\n    <ng-content select=\"clr-tree-node\"></ng-content>\n    <ng-content select=\"[clrIfExpanded]\"></ng-content>\n</div>\n`,\n    providers: [\n        Expand, {provide: LoadingListener, useExisting: Expand}, {\n            provide: TreeSelectionService,\n            useFactory: clrTreeSelectionProviderFactory,\n            deps: [[new Optional(), new SkipSelf(), TreeSelectionService]]\n        },\n        UNIQUE_ID_PROVIDER\n    ],\n    animations: [trigger(\"childNodesState\",\n                         [\n                             state(\"expanded\", style({\"height\": \"*\", \"overflow-y\": \"hidden\"})),\n                             state(\"collapsed\", style({\"height\": 0, \"overflow-y\": \"hidden\"})),\n                             transition(\"expanded <=> collapsed\", animate(\"0.2s ease-in-out\"))\n                         ])],\n    host: {\"class\": \"clr-tree-node\"}\n})\nexport class ClrTreeNode extends AbstractTreeSelection implements OnDestroy {\n    constructor(public nodeExpand: Expand, @Optional() @SkipSelf() public parent: ClrTreeNode,\n                public treeSelectionService: TreeSelectionService, @Inject(UNIQUE_ID) public nodeId: string) {\n        super(parent);\n        if (this.parent) {\n            this.parent.register(this);\n        }\n    }\n\n    private _children: ClrTreeNode[] = [];\n\n    get children(): ClrTreeNode[] {\n        return this._children;\n    }\n\n    /* Registration */\n\n    checkIfChildNodeRegistered(node: ClrTreeNode): boolean {\n        return (this.children.indexOf(node) > -1);\n    }\n\n    // TODO: This should ideally be in AbstractTreeSelection\n    // Tried doing this but ran into some issues and also ran out of time.\n    // Will get this done later.\n    register(node: ClrTreeNode): void {\n        if (!this.checkIfChildNodeRegistered(node)) {\n            this.children.push(node);\n            if (this.selectable) {\n                if (this.selected) {\n                    node.parentChanged(this.selected);\n                }\n            }\n        }\n    }\n\n    // TODO: This should ideally be in AbstractTreeSelection\n    // Tried doing this but ran into some issues and also ran out of time.\n    // Will get this done later.\n    unregister(node: ClrTreeNode): void {\n        const index = this.children.indexOf(node);\n        if (index > -1) {\n            this.children.splice(index, 1);\n        }\n    }\n\n    /* Selection */\n\n    activateSelection(): void {\n        if (this.treeSelectionService && !this.treeSelectionService.selectable) {\n            this.treeSelectionService.selectable = true;\n        }\n    }\n\n    @Input(\"clrSelected\")\n    public set nodeSelected(value: boolean) {\n        // required for recursive trees to discard unset inputs.\n        this.activateSelection();\n        if (value === undefined || value === null) {\n            return;\n        }\n        if (this.selected !== value) {\n            this.selected = value;\n        }\n    }\n\n    @Output(\"clrSelectedChange\") nodeSelectedChange: EventEmitter<boolean> = new EventEmitter<boolean>(true);\n\n    selectedChanged(): void {\n        this.nodeSelectedChange.emit(this.selected);\n    }\n\n    get selectable(): boolean {\n        if (this.treeSelectionService) {\n            return this.treeSelectionService.selectable;\n        }\n        return false;\n    }\n\n    @Input(\"clrIndeterminate\")\n    set nodeIndeterminate(value: boolean) {\n        this.indeterminate = value;\n        this.activateSelection();\n    }\n\n    @Output(\"clrIndeterminateChange\") nodeIndeterminateChanged: EventEmitter<boolean> = new EventEmitter<boolean>(true);\n\n    indeterminateChanged(): void {\n        this.nodeIndeterminateChanged.emit(this.indeterminate);\n    }\n\n    /* Expansion */\n\n    toggleExpand(): void {\n        this.nodeExpand.expanded = !this.nodeExpand.expanded;\n    }\n\n    public get caretDirection(): string {\n        return (this.nodeExpand.expanded) ? \"down\" : \"right\";\n    }\n\n    get expanded(): boolean {\n        return this.nodeExpand.expanded;\n    }\n\n    set expanded(value: boolean) {\n        value = !!value;\n        if (this.nodeExpand.expanded !== value) {\n            this.nodeExpand.expanded = value;\n        }\n    }\n\n    get state(): string {\n        return (this.expanded && !this.nodeExpand.loading) ? \"expanded\" : \"collapsed\";\n    }\n\n    /* Lifecycle */\n\n    ngOnDestroy() {\n        if (this.parent) {\n            this.parent.unregister(this);\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule, Type} from \"@angular/core\";\nimport {FormsModule} from \"@angular/forms\";\n\nimport {ClrFormsModule} from \"../../forms-deprecated/forms.module\";\nimport {ClrIconModule} from \"../../icon/icon.module\";\nimport {ClrIfExpandModule} from \"../../utils/expand/if-expand.module\";\nimport {ClrTreeNode} from \"./tree-node\";\n\nexport const CLR_TREE_VIEW_DIRECTIVES: Type<any>[] = [ClrTreeNode];\n\n@NgModule({\n    imports: [CommonModule, ClrIconModule, FormsModule, ClrFormsModule],\n    declarations: [CLR_TREE_VIEW_DIRECTIVES],\n    exports: [CLR_TREE_VIEW_DIRECTIVES, ClrIfExpandModule]\n})\nexport class ClrTreeViewModule {}\n\n/* tslint:disable variable-name */\n/** @deprecated since 0.11 */\nexport interface TreeNode extends ClrTreeNode {}\n/** @deprecated since 0.11 */\nexport const TreeNode = ClrTreeNode;\n/* tslint:enable variable-name */\n/** @deprecated since 0.11 */\nexport const TREE_VIEW_DIRECTIVES = CLR_TREE_VIEW_DIRECTIVES;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nimport {NgModule} from \"@angular/core\";\nimport {ClrDatagridModule} from \"./datagrid/datagrid.module\";\nimport {ClrStackViewModule} from \"./stack-view/stack-view.module\";\nimport {ClrTreeViewModule} from \"./tree-view/tree-view.module\";\n\n@NgModule({exports: [ClrDatagridModule, ClrStackViewModule, ClrTreeViewModule]})\nexport class ClrDataModule {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Injectable, Optional, SkipSelf} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\n\n@Injectable()\nexport class RootDropdownService {\n    private _changes: Subject<boolean> = new Subject<boolean>();\n\n    get changes(): Observable<boolean> {\n        return this._changes.asObservable();\n    }\n\n    closeMenus(): void {\n        this._changes.next(false);\n    }\n}\n\nexport function clrRootDropdownFactory(existing: RootDropdownService) {\n    return existing || new RootDropdownService();\n}\n\nexport const ROOT_DROPDOWN_PROVIDER = {\n    provide: RootDropdownService,\n    useFactory: clrRootDropdownFactory,\n    deps: [[new Optional(), new SkipSelf(), RootDropdownService]]\n};\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, ElementRef, Input, OnDestroy, Optional, SkipSelf} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {IfOpenService} from \"../../utils/conditional/if-open.service\";\nimport {POPOVER_HOST_ANCHOR} from \"../common/popover-host-anchor.token\";\n\nimport {ROOT_DROPDOWN_PROVIDER, RootDropdownService} from \"./providers/dropdown.service\";\n\n@Component({\n    selector: \"clr-dropdown\",\n    template: \"<ng-content></ng-content>\",\n    host: {\n        \"[class.dropdown]\": \"true\",\n        // FIXME: remove this as soon as we stop supporting this old <div class=\"dropdown-menu\"> syntax\n        \"[class.open]\": \"ifOpenService.open\"\n    },\n    providers: [IfOpenService, ROOT_DROPDOWN_PROVIDER, {provide: POPOVER_HOST_ANCHOR, useExisting: ElementRef}]\n})\nexport class ClrDropdown implements OnDestroy {\n    private _subscription: Subscription;\n\n    constructor(@SkipSelf() @Optional() public parent: ClrDropdown, public ifOpenService: IfOpenService,\n                dropdownService: RootDropdownService) {\n        this._subscription = dropdownService.changes.subscribe(value => this.ifOpenService.open = value);\n    }\n\n    @Input(\"clrCloseMenuOnItemClick\") isMenuClosable: boolean = true;\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {AfterViewInit, Directive, ElementRef, Renderer2} from \"@angular/core\";\n\nimport {ClrDropdown} from \"./dropdown\";\nimport {RootDropdownService} from \"./providers/dropdown.service\";\n\n@Directive({selector: \"[clrDropdownItem]\", host: {\"[class.dropdown-item]\": \"true\"}})\nexport class ClrDropdownItem implements AfterViewInit {\n    constructor(private dropdown: ClrDropdown, private el: ElementRef, private _dropdownService: RootDropdownService,\n                private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n        this.renderer.listen(this.el.nativeElement, \"click\", () => this.onDropdownItemClick());\n    }\n\n    onDropdownItemClick(): void {\n        if (this.dropdown.isMenuClosable && !this.el.nativeElement.classList.contains(\"disabled\")) {\n            this._dropdownService.closeMenus();\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, ElementRef, Inject, Injector, Input, Optional, SkipSelf} from \"@angular/core\";\nimport {AbstractPopover} from \"../common/abstract-popover\";\nimport {Point} from \"../common/popover\";\nimport {POPOVER_HOST_ANCHOR} from \"../common/popover-host-anchor.token\";\n\n@Component({\n    selector: \"clr-dropdown-menu\",\n    template: `\n        <ng-content></ng-content>\n    `,\n    host: {\n        \"[class.dropdown-menu]\": \"true\",\n    }\n})\nexport class ClrDropdownMenu extends AbstractPopover {\n    constructor(injector: Injector, @Optional() @Inject(POPOVER_HOST_ANCHOR) parentHost: ElementRef,\n                @Optional() @SkipSelf() nested: ClrDropdownMenu) {\n        if (!parentHost) {\n            throw new Error(\"clr-dropdown-menu should only be used inside of a clr-dropdown\");\n        }\n        super(injector, parentHost);\n        if (!nested) {\n            // Default positioning for normal dropdown is bottom-left\n            this.anchorPoint = Point.BOTTOM_LEFT;\n            this.popoverPoint = Point.LEFT_TOP;\n        } else {\n            // Default positioning for nested dropdown is right-top\n            this.anchorPoint = Point.RIGHT_TOP;\n            this.popoverPoint = Point.LEFT_TOP;\n        }\n        this.popoverOptions.allowMultipleOpen = true;\n        this.closeOnOutsideClick = true;\n    }\n\n    @Input(\"clrPosition\")\n    set position(position: string) {\n        // set the popover values based on menu position\n        switch (position) {\n            case (\"top-right\"):\n                this.anchorPoint = Point.TOP_RIGHT;\n                this.popoverPoint = Point.RIGHT_BOTTOM;\n                break;\n            case (\"top-left\"):\n                this.anchorPoint = Point.TOP_LEFT;\n                this.popoverPoint = Point.LEFT_BOTTOM;\n                break;\n            case (\"bottom-right\"):\n                this.anchorPoint = Point.BOTTOM_RIGHT;\n                this.popoverPoint = Point.RIGHT_TOP;\n                break;\n            case (\"bottom-left\"):\n                this.anchorPoint = Point.BOTTOM_LEFT;\n                this.popoverPoint = Point.LEFT_TOP;\n                break;\n            case (\"right-top\"):\n                this.anchorPoint = Point.RIGHT_TOP;\n                this.popoverPoint = Point.LEFT_TOP;\n                break;\n            case (\"right-bottom\"):\n                this.anchorPoint = Point.RIGHT_BOTTOM;\n                this.popoverPoint = Point.LEFT_BOTTOM;\n                break;\n            case (\"left-top\"):\n                this.anchorPoint = Point.LEFT_TOP;\n                this.popoverPoint = Point.RIGHT_TOP;\n                break;\n            case (\"left-bottom\"):\n                this.anchorPoint = Point.LEFT_BOTTOM;\n                this.popoverPoint = Point.RIGHT_BOTTOM;\n                break;\n            default:\n                this.anchorPoint = Point.BOTTOM_LEFT;\n                this.popoverPoint = Point.LEFT_TOP;\n                break;\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, HostListener} from \"@angular/core\";\n\nimport {IfOpenService} from \"../../utils/conditional/if-open.service\";\n\nimport {ClrDropdown} from \"./dropdown\";\n\n@Directive({\n    // We support both selectors for legacy reasons\n    selector: \"[clrDropdownTrigger],[clrDropdownToggle]\",\n    host: {\n        \"[class.dropdown-toggle]\": \"isRootLevelToggle\",\n        \"[class.dropdown-item]\": \"!isRootLevelToggle\",\n        \"[class.expandable]\": \"!isRootLevelToggle\",\n        \"[class.active]\": \"active\"\n    }\n})\nexport class ClrDropdownTrigger {\n    public isRootLevelToggle: boolean = true;\n\n    constructor(dropdown: ClrDropdown, private ifOpenService: IfOpenService) {\n        // if the containing dropdown has a parent, then this is not the root level one\n        if (dropdown.parent) {\n            this.isRootLevelToggle = false;\n        }\n    }\n\n    get active(): boolean {\n        return this.ifOpenService.open;\n    }\n\n    @HostListener(\"click\", [\"$event\"])\n    onDropdownTriggerClick(event: any): void {\n        this.ifOpenService.toggleWithEvent(event);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule, Type} from \"@angular/core\";\n\nimport {ClrIconModule} from \"../../icon/icon.module\";\nimport {ClrConditionalModule} from \"../../utils/conditional/conditional.module\";\nimport {ClrCommonPopoverModule} from \"../common/popover.module\";\n\nimport {ClrDropdown} from \"./dropdown\";\nimport {ClrDropdownItem} from \"./dropdown-item\";\nimport {ClrDropdownMenu} from \"./dropdown-menu\";\nimport {ClrDropdownTrigger} from \"./dropdown-trigger\";\nimport {CLR_MENU_POSITIONS} from \"./menu-positions\";\n\nexport const CLR_DROPDOWN_DIRECTIVES: Type<any>[] = [ClrDropdown, ClrDropdownMenu, ClrDropdownTrigger, ClrDropdownItem];\n\n@NgModule({\n    imports: [CommonModule, ClrCommonPopoverModule],\n    declarations: [CLR_DROPDOWN_DIRECTIVES],\n    exports: [CLR_DROPDOWN_DIRECTIVES, ClrConditionalModule, ClrIconModule]\n})\nexport class ClrDropdownModule {}\n\n\n/* tslint:disable variable-name */\n/** @deprecated since 0.11 */\nexport interface Dropdown extends ClrDropdown {}\n/** @deprecated since 0.11 */\nexport const Dropdown = ClrDropdown;\n/** @deprecated since 0.11 */\nexport interface DropdownMenu extends ClrDropdownMenu {}\n/** @deprecated since 0.11 */\nexport const DropdownMenu = ClrDropdownMenu;\n/** @deprecated since 0.11 */\nexport interface DropdownTrigger extends ClrDropdownTrigger {}\n/** @deprecated since 0.11 */\nexport const DropdownTrigger = ClrDropdownTrigger;\n/** @deprecated since 0.11 */\nexport interface DropdownItem extends ClrDropdownItem {}\n/** @deprecated since 0.11 */\nexport const DropdownItem = ClrDropdownItem;\n/** @deprecated since 0.11 */\nexport const menuPositions = CLR_MENU_POSITIONS;\n/* tslint:enable variable-name */\n/** @deprecated since 0.11 */\nexport const DROPDOWN_DIRECTIVES = CLR_DROPDOWN_DIRECTIVES;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n// TODO: alert-* types are deprecated and should be removed before 1.0!\nexport const ALERT_TYPES: string[] =\n    [\"alert-info\", \"alert-warning\", \"alert-danger\", \"alert-success\", \"info\", \"warning\", \"danger\", \"success\"];\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Injectable} from \"@angular/core\";\n\nimport {AlertInfoObject} from \"../utils/alert-info-object\";\nimport {ALERT_TYPES} from \"../utils/alert-types\";\n\n@Injectable()\nexport class AlertIconAndTypesService {\n    private defaultIconShape = \"info-circle\";\n    private _alertIconShape = \"\";\n    private _alertType = \"info\";\n\n    get alertType(): string {\n        return this._alertType;\n    }\n    set alertType(val: string) {\n        if (ALERT_TYPES.indexOf(val) > -1) {\n            this._alertType = val;\n        }\n    }\n\n    get alertIconShape(): string {\n        if (\"\" === this._alertIconShape) {\n            return this.iconInfoFromType(this._alertType).shape;\n        }\n        return this._alertIconShape;\n    }\n    set alertIconShape(val: string) {\n        if (!val) {\n            this._alertIconShape = \"\";\n        } else if (val !== this._alertIconShape) {\n            this._alertIconShape = val;\n        }\n    }\n\n    public iconInfoFromType(type: string, classOrShape: string = \"shape\"): AlertInfoObject {\n        const returnObj = {shape: \"\", cssClass: \"\"};\n\n        switch (type) {\n            case \"warning\":\n            case \"alert-warning\":\n                returnObj.shape = \"exclamation-triangle\";\n                returnObj.cssClass = \"alert-warning\";\n                break;\n            case \"danger\":\n            case \"alert-danger\":\n                returnObj.shape = \"exclamation-circle\";\n                returnObj.cssClass = \"alert-danger\";\n                break;\n            case \"success\":\n            case \"alert-success\":\n                returnObj.shape = \"check-circle\";\n                returnObj.cssClass = \"alert-success\";\n                break;\n            default:\n                returnObj.shape = this.defaultIconShape;\n                returnObj.cssClass = \"alert-info\";\n                break;\n        }\n\n        return returnObj;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Injectable, QueryList} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\n\nimport {ClrAlert} from \"../alert\";\n\n@Injectable()\nexport class MultiAlertService {\n    private allAlerts: QueryList<ClrAlert> = new QueryList<ClrAlert>();\n    private _current = 0;\n\n    /**\n     * The Observable that lets other classes subscribe to changes\n     */\n    private _change = new Subject<number>();\n    public get changes(): Observable<number> {\n        return this._change.asObservable();\n    }\n\n    get current() {\n        return this._current;\n    }\n    set current(index: number) {\n        if (index !== this._current) {\n            this._current = index;\n            this._change.next(index);\n        }\n    }\n\n    get activeAlerts() {\n        return this.allAlerts.filter((alert) => !alert._closed);\n    }\n\n    get currentAlert() {\n        return this.activeAlerts[this.current];\n    }\n\n    set currentAlert(alert: ClrAlert) {\n        this.current = this.activeAlerts.indexOf(alert);\n    }\n\n    get count() {\n        return this.activeAlerts.length;\n    }\n\n    manage(alerts: QueryList<ClrAlert>) {\n        this.allAlerts = alerts;\n    }\n\n    next() {\n        this.current = (this.current === this.activeAlerts.length - 1) ? 0 : this.current + 1;\n    }\n\n    previous() {\n        if (this.activeAlerts.length === 0) {\n            return;\n        }\n        this.current = (this.current === 0) ? this.activeAlerts.length - 1 : this.current - 1;\n    }\n\n    close() {\n        this.previous();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {ChangeDetectorRef, Component, EventEmitter, Input, Optional, Output} from \"@angular/core\";\n\n// providers\nimport {AlertIconAndTypesService} from \"./providers/icon-and-types.service\";\nimport {MultiAlertService} from \"./providers/multi-alert.service\";\n\n@Component({selector: \"clr-alert\", providers: [AlertIconAndTypesService], template: `<!--\n  ~ Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div\n    *ngIf=\"!_closed\"\n    class=\"alert\"\n    [ngClass]=\"alertClass\"\n    [class.alert-hidden]=\"isHidden\"\n    [class.alert-sm]=\"isSmall\"\n    [class.alert-app-level]=\"isAppLevel\">\n    <div class=\"alert-items\">\n        <ng-content></ng-content>\n    </div>\n    <button type=\"button\" class=\"close\" aria-label=\"Close\" *ngIf=\"closable\" (click)=\"close()\">\n        <clr-icon aria-hidden=\"true\" shape=\"close\"></clr-icon>\n    </button>\n</div>\n`})\nexport class ClrAlert {\n    constructor(public iconService: AlertIconAndTypesService, public cdr: ChangeDetectorRef,\n                @Optional() public multiAlertService: MultiAlertService) {}\n\n    @Input(\"clrAlertSizeSmall\") isSmall: boolean = false;\n    @Input(\"clrAlertClosable\") closable: boolean = true;\n    @Input(\"clrAlertAppLevel\") isAppLevel: boolean = false;\n\n    @Input(\"clrAlertClosed\") _closed: boolean = false;\n    @Output(\"clrAlertClosedChange\") _closedChanged: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n    @Input(\"clrAlertType\")\n    set alertType(val: string) {\n        this.iconService.alertType = val;\n    }\n    get alertType(): string {\n        return this.iconService.alertType;\n    }\n\n    @Input(\"clrAlertIcon\")\n    set alertIconShape(value: string) {\n        this.iconService.alertIconShape = value;\n    }\n\n    get alertClass(): string {\n        return this.iconService.iconInfoFromType(this.iconService.alertType).cssClass;\n    }\n\n    private previouslyHidden = false;\n    private hidden = false;\n\n    private detectChangesIfNeeded() {\n        if (this.previouslyHidden !== this.hidden) {\n            this.previouslyHidden = this.hidden;\n            this.cdr.detectChanges();\n        }\n    }\n\n    get isHidden() {\n        if (this.multiAlertService) {\n            if (this.multiAlertService.currentAlert === this) {\n                if (this.hidden === true) {\n                    this.previouslyHidden = true;\n                    this.hidden = false;\n                }\n            } else if (this.hidden === false) {\n                this.previouslyHidden = false;\n                this.hidden = true;\n            }\n            this.detectChangesIfNeeded();\n        }\n\n        return this.hidden;\n    }\n\n    close(): void {\n        if (!this.closable) {\n            return;\n        }\n        this._closed = true;\n        if (this.multiAlertService) {\n            this.multiAlertService.close();\n        }\n        this._closedChanged.emit(true);\n    }\n\n    open(): void {\n        this._closed = false;\n        this._closedChanged.emit(false);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Component} from \"@angular/core\";\nimport {AlertIconAndTypesService} from \"./providers/icon-and-types.service\";\n\n@Component({\n    // the .alert-item selector is deprecated; the :not clause is to allow us to use static\n    // examples in demos on the demo-app and website\n    selector: \".alert-item:not(.static), clr-alert-item\",\n    template: `\n        <div class=\"alert-icon-wrapper\">\n            <clr-icon class=\"alert-icon\" [attr.shape]=\"iconService.alertIconShape\"></clr-icon>\n        </div>\n        <ng-content></ng-content>\n    `,\n    host: {\"class\": \"alert-item\"}\n})\nexport class ClrAlertItem {\n    constructor(public iconService: AlertIconAndTypesService) {}\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {AfterContentInit, Component, ContentChildren, EventEmitter, Input, Output, QueryList} from \"@angular/core\";\nimport {ClrAlert} from \"./alert\";\nimport {MultiAlertService} from \"./providers/multi-alert.service\";\n\n// the 'alert-*' alert types are deprecated and should be removed in 0.12 or later\n@Component({\n    selector: \"clr-alerts\",\n    template: `<!--\n  ~ Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<clr-alerts-pager\n        *ngIf=\"multiAlertService.count > 1\"\n        [clrCurrentAlertIndex]=\"currentAlertIndex\">\n</clr-alerts-pager>\n<ng-content select=\"clr-alert\"></ng-content>\n`,\n    providers: [MultiAlertService],\n    host: {\n        \"[class.alerts]\": \"true\",\n        \"[class.alert-danger]\": \"this.currentAlertType == 'danger' || this.currentAlertType == 'alert-danger'\",\n        \"[class.alert-info]\": \"this.currentAlertType == 'info' || this.currentAlertType == 'alert-info'\",\n        \"[class.alert-success]\": \"this.currentAlertType == 'success' || this.currentAlertType == 'alert-success'\",\n        \"[class.alert-warning]\": \"this.currentAlertType == 'warning' || this.currentAlertType == 'alert-warning'\"\n    },\n    styles: [\":host { display: block }\"]\n})\nexport class ClrAlerts implements AfterContentInit {\n    @ContentChildren(ClrAlert) allAlerts: QueryList<ClrAlert>;\n\n    /**\n     * Input/Output to support two way binding on current alert index\n     */\n    @Input(\"clrCurrentAlertIndex\")\n    public set _inputCurrentIndex(index: number) {\n        if (Number.isInteger(index) && index >= 0) {\n            this.multiAlertService.current = index;\n        }\n    }\n\n    @Output(\"clrCurrentAlertIndexChange\") public currentAlertIndexChange = new EventEmitter<number>(false);\n\n    set currentAlertIndex(index: number) {\n        this.multiAlertService.current = index;\n    }\n    get currentAlertIndex() {\n        return this.multiAlertService.current;\n    }\n\n    /**\n     * Input/Output to support two way binding on current alert instance\n     */\n    @Input(\"clrCurrentAlert\")\n    set currentAlert(alert: ClrAlert) {\n        if (alert) {\n            this.multiAlertService.currentAlert = alert;\n        }\n    }\n    get currentAlert() {\n        return this.multiAlertService.currentAlert;\n    }\n    @Output(\"clrCurrentAlertChange\") public currentAlertChange = new EventEmitter<ClrAlert>(false);\n\n    /**\n     * Ensure we are only dealing with alerts that have not been closed yet\n     */\n    get alerts() {\n        return this.allAlerts.filter((alert) => {\n            return alert.isHidden === false;\n        });\n    }\n\n    get currentAlertType(): string {\n        if (this.multiAlertService.currentAlert) {\n            return this.multiAlertService.currentAlert.alertType;\n        }\n        return \"\";\n    }\n\n    constructor(public multiAlertService: MultiAlertService) {}\n\n    ngAfterContentInit() {\n        this.multiAlertService.manage(this.allAlerts);\n        this.multiAlertService.changes.subscribe((index) => {\n            this.currentAlertIndexChange.next(index);\n            this.currentAlertChange.next(this.multiAlertService.currentAlert);\n        });\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, EventEmitter, Input, OnDestroy, OnInit, Output} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {ClrAlert} from \"./alert\";\nimport {MultiAlertService} from \"./providers/multi-alert.service\";\n\n\n@Component({selector: \"clr-alerts-pager\", template: `<!--\n  ~ Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div class=\"alerts-pager-control\">\n    <div class=\"alerts-page-down\">\n        <button class=\"alerts-pager-button\" (click)=\"pageDown()\">\n            <clr-icon shape=\"caret left\"></clr-icon>\n        </button>\n    </div>\n    <div class=\"alerts-pager-text\">\n        {{this.multiAlertService.current+1}} / {{this.multiAlertService.count}}\n    </div>\n    <div class=\"alerts-page-up\">\n        <button class=\"alerts-pager-button\" (click)=\"pageUp()\">\n            <clr-icon shape=\"caret right\"></clr-icon>\n        </button>\n    </div>\n</div>\n`, host: {\"[class.alerts-pager]\": \"true\"}})\nexport class ClrAlertsPager implements OnInit, OnDestroy {\n    private multiAlertServiceChanges: Subscription;\n\n    /**\n     * Input/Output to support two way binding on current alert instance\n     */\n    @Input(\"clrCurrentAlert\")\n    set currentAlert(alert: ClrAlert) {\n        if (alert) {\n            this.multiAlertService.currentAlert = alert;\n        }\n    }\n    get currentAlert() {\n        return this.multiAlertService.currentAlert;\n    }\n\n    @Output(\"clrCurrentAlertChange\") currentAlertChange = new EventEmitter<ClrAlert>(false);\n\n    /**\n     * Input/Output to support two way binding on current alert index\n     */\n    @Input(\"clrCurrentAlertIndex\")\n    set currentAlertIndex(index: number) {\n        this.multiAlertService.current = index;\n    }\n    get currentAlertIndex() {\n        return this.multiAlertService.current;\n    }\n\n    @Output(\"clrCurrentAlertIndexChange\") currentAlertIndexChange = new EventEmitter<number>();\n\n    constructor(public multiAlertService: MultiAlertService) {}\n\n    ngOnInit() {\n        this.multiAlertServiceChanges = this.multiAlertService.changes.subscribe((index) => {\n            this.currentAlertIndexChange.emit(index);\n            this.currentAlertChange.emit(this.multiAlertService.activeAlerts[index]);\n        });\n    }\n\n    pageUp() {\n        this.multiAlertService.next();\n    }\n\n    pageDown() {\n        this.multiAlertService.previous();\n    }\n\n    ngOnDestroy() {\n        this.multiAlertServiceChanges.unsubscribe();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule, Type} from \"@angular/core\";\n\nimport {ClrIconModule} from \"../../icon/icon.module\";\nimport {ClrDropdownModule} from \"../../popover/dropdown/dropdown.module\";\n\nimport {ClrAlert} from \"./alert\";\nimport {ClrAlertItem} from \"./alert-item\";\nimport {ClrAlerts} from \"./alerts\";\nimport {ClrAlertsPager} from \"./alerts-pager\";\n\nexport const CLR_ALERT_DIRECTIVES: Type<any>[] = [ClrAlert, ClrAlertItem, ClrAlerts, ClrAlertsPager];\n\n@NgModule({\n    imports: [CommonModule, ClrIconModule, ClrDropdownModule],\n    declarations: [CLR_ALERT_DIRECTIVES],\n    exports: [CLR_ALERT_DIRECTIVES]\n})\nexport class ClrAlertModule {}\n\n/* tslint:disable variable-name */\n/** @deprecated since 0.11 */\nexport interface Alert extends ClrAlert {}\n/** @deprecated since 0.11 */\nexport const Alert = ClrAlert;\n/** @deprecated since 0.11 */\nexport interface AlertItem extends ClrAlertItem {}\n/** @deprecated since 0.11 */\nexport const AlertItem = ClrAlertItem;\n/** @deprecated since 0.11 */\nexport interface Alerts extends ClrAlerts {}\n/** @deprecated since 0.11 */\nexport const Alerts = ClrAlerts;\n/** @deprecated since 0.11 */\nexport interface AlertsPager extends ClrAlertsPager {}\n/** @deprecated since 0.11 */\nexport const AlertsPager = ClrAlertsPager;\n/* tslint:enable variable-name */\n/** @deprecated since 0.11 */\nexport const ALERT_DIRECTIVES = CLR_ALERT_DIRECTIVES;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {NgModule} from \"@angular/core\";\nimport {ClrAlertModule} from \"./alert/alert.module\";\n\n@NgModule({exports: [ClrAlertModule]})\nexport class ClrEmphasisModule {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nexport class ResponsiveNavCodes {\n    public static NAV_LEVEL_1: number = 1;\n    public static NAV_LEVEL_2: number = 2;\n    public static NAV_CLOSE_ALL: string = \"NAV_CLOSE_ALL\";\n    public static NAV_OPEN: string = \"NAV_OPEN\";\n    public static NAV_CLOSE: string = \"NAV_CLOSE\";\n    public static NAV_TOGGLE: string = \"NAV_TOGGLE\";\n    public static NAV_CLASS_HAMBURGER_MENU: string = \"open-hamburger-menu\";\n    public static NAV_CLASS_OVERFLOW_MENU: string = \"open-overflow-menu\";\n    public static NAV_CLASS_TRIGGER_1: string = \"header-hamburger-trigger\";\n    public static NAV_CLASS_TRIGGER_2: string = \"header-overflow-trigger\";\n    public static NAV_CLASS_LEVEL_1: string = \"clr-nav-level-1\";\n    public static NAV_CLASS_LEVEL_2: string = \"clr-nav-level-2\";\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nexport class ResponsiveNavControlMessage {\n    constructor(private _controlCode: string, private _navLevel: number) {}\n\n    get controlCode(): string {\n        return this._controlCode;\n    }\n\n    get navLevel(): number {\n        return this._navLevel;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\n\nimport {ResponsiveNavCodes} from \"../responsive-nav-codes\";\nimport {ResponsiveNavControlMessage} from \"../responsive-nav-control-message\";\n\n@Injectable()\nexport class ResponsiveNavigationService {\n    public responsiveNavList: number[] = [];\n    private registerNavSubject: Subject<number[]> = new Subject<number[]>();\n    private controlNavSubject: Subject<ResponsiveNavControlMessage> = new Subject<ResponsiveNavControlMessage>();\n\n    get registeredNavs(): Observable<number[]> {\n        return this.registerNavSubject.asObservable();\n    }\n\n    get navControl(): Observable<ResponsiveNavControlMessage> {\n        return this.controlNavSubject.asObservable();\n    }\n\n    constructor() {\n        this.closeAllNavs();  // We start with all navs closed\n    }\n\n    registerNav(navLevel: number): void {\n        if (!navLevel || this.isNavRegistered(navLevel)) {\n            return;\n        }\n        this.responsiveNavList.push(navLevel);\n        this.registerNavSubject.next(this.responsiveNavList);\n    }\n\n    isNavRegistered(navLevel: number): boolean {\n        if (this.responsiveNavList.indexOf(navLevel) > -1) {\n            console.error(\"Multiple clr-nav-level \" + navLevel +\n                          \" attributes found. Please make sure that only one exists\");\n            return true;\n        }\n        return false;\n    }\n\n    unregisterNav(navLevel: number) {\n        const index = this.responsiveNavList.indexOf(navLevel);\n        if (index > -1) {\n            this.responsiveNavList.splice(index, 1);\n            this.registerNavSubject.next(this.responsiveNavList);\n        }\n    }\n\n    sendControlMessage(controlCode: string, navLevel: number) {\n        const message: ResponsiveNavControlMessage = new ResponsiveNavControlMessage(controlCode, navLevel);\n        this.controlNavSubject.next(message);\n    }\n\n    closeAllNavs() {\n        const message: ResponsiveNavControlMessage =\n            new ResponsiveNavControlMessage(ResponsiveNavCodes.NAV_CLOSE_ALL, -999);\n        this.controlNavSubject.next(message);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, ElementRef, OnDestroy, OnInit} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {ResponsiveNavigationService} from \"../nav/providers/responsive-navigation.service\";\nimport {ResponsiveNavCodes} from \"../nav/responsive-nav-codes\";\nimport {ResponsiveNavControlMessage} from \"../nav/responsive-nav-control-message\";\n\n@Directive({selector: \"clr-main-container\", host: {\"[class.main-container]\": \"true\"}})\nexport class ClrMainContainer implements OnDestroy, OnInit {\n    private _subscription: Subscription;\n    private _classList: DOMTokenList;\n\n    constructor(private elRef: ElementRef, private responsiveNavService: ResponsiveNavigationService) {}\n\n    ngOnInit() {\n        this._classList = this.elRef.nativeElement.classList;\n        this._subscription = this.responsiveNavService.navControl.subscribe({\n            next: (message: ResponsiveNavControlMessage) => {\n                this.processMessage(message);\n            }\n        });\n    }\n\n    processMessage(message: ResponsiveNavControlMessage): void {\n        let navClass: string = ResponsiveNavCodes.NAV_CLASS_HAMBURGER_MENU;\n        if (message.controlCode === ResponsiveNavCodes.NAV_CLOSE_ALL) {\n            this._classList.remove(ResponsiveNavCodes.NAV_CLASS_HAMBURGER_MENU);\n            this._classList.remove(ResponsiveNavCodes.NAV_CLASS_OVERFLOW_MENU);\n        } else if (message.navLevel === ResponsiveNavCodes.NAV_LEVEL_1) {\n            this.controlNav(message.controlCode, navClass);\n        } else if (message.navLevel === ResponsiveNavCodes.NAV_LEVEL_2) {\n            navClass = ResponsiveNavCodes.NAV_CLASS_OVERFLOW_MENU;\n            this.controlNav(message.controlCode, navClass);\n        }\n    }\n\n    controlNav(controlCode: string, navClass: string): void {\n        if (controlCode === ResponsiveNavCodes.NAV_OPEN) {\n            this._classList.add(navClass);\n        } else if (controlCode === ResponsiveNavCodes.NAV_CLOSE) {\n            this._classList.remove(navClass);\n        } else if (controlCode === ResponsiveNavCodes.NAV_TOGGLE) {\n            this._classList.toggle(navClass);\n        }\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule, Type} from \"@angular/core\";\n\nimport {ClrIconModule} from \"../../icon/icon.module\";\nimport {ClrMainContainer} from \"./main-container\";\n\nexport const CLR_LAYOUT_DIRECTIVES: Type<any>[] = [ClrMainContainer];\n\n@NgModule(\n    {imports: [CommonModule, ClrIconModule], declarations: [CLR_LAYOUT_DIRECTIVES], exports: [CLR_LAYOUT_DIRECTIVES]})\nexport class ClrMainContainerModule {}\n\n/* tslint:disable variable-name */\n/** @deprecated since 0.11 */\nexport interface MainContainer extends ClrMainContainer {}\n/** @deprecated since 0.11 */\nexport const MainContainer = ClrMainContainer;\n/* tslint:enable variable-name */\n/** @deprecated since 0.11 */\nexport const LAYOUT_DIRECTIVES = CLR_LAYOUT_DIRECTIVES;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive} from \"@angular/core\";\nimport {WillyWonka} from \"../../../utils/chocolate/willy-wonka\";\n\n@Directive({selector: \"clr-main-container\"})\nexport class MainContainerWillyWonka extends WillyWonka {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {ChangeDetectorRef, Directive, Optional} from \"@angular/core\";\nimport {OompaLoompa} from \"../../../utils/chocolate/oompa-loompa\";\nimport {ResponsiveNavigationService} from \"../providers/responsive-navigation.service\";\nimport {MainContainerWillyWonka} from \"./main-container-willy-wonka\";\n\n@Directive({selector: \"clr-header\"})\nexport class NavDetectionOompaLoompa extends OompaLoompa {\n    private responsiveNavService: ResponsiveNavigationService;\n\n    constructor(cdr: ChangeDetectorRef, @Optional() willyWonka: MainContainerWillyWonka,\n                responsiveNavService: ResponsiveNavigationService) {\n        if (!willyWonka) {\n            throw new Error(\"clr-header should only be used inside of a clr-main-container\");\n        }\n        super(cdr, willyWonka);\n        this.responsiveNavService = responsiveNavService;\n    }\n\n    // NavDetectionOompaLoompa is the addition of the nav levels\n    // Since we support 2 levels, the possibilities are 0, 1 or 3 (1 + 2)\n    get flavor() {\n        return this.responsiveNavService.responsiveNavList.reduce((sum, navLevel) => sum + navLevel, 0);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, OnDestroy} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {ResponsiveNavigationService} from \"./providers/responsive-navigation.service\";\nimport {ResponsiveNavCodes} from \"./responsive-nav-codes\";\n\n@Component({\n    selector: \"clr-header\",\n    template: `\n        <button\n            type=\"button\"\n            *ngIf=\"isNavLevel1OnPage\"\n            class=\"header-hamburger-trigger\"\n            (click)=\"toggleNav(responsiveNavCodes.NAV_LEVEL_1)\">\n            <span></span>\n        </button>\n        <ng-content></ng-content>\n        <button\n            type=\"button\"\n            *ngIf=\"isNavLevel2OnPage\"\n            class=\"header-overflow-trigger\"\n            (click)=\"toggleNav(responsiveNavCodes.NAV_LEVEL_2)\">\n            <span></span>\n        </button>\n        <div class=\"header-backdrop\" (click)=\"closeOpenNav()\"></div>\n    `,\n    host: {\"[class.header]\": \"true\"}\n})\nexport class ClrHeader implements OnDestroy {\n    private _subscription: Subscription;\n    public isNavLevel1OnPage: boolean = false;\n    public isNavLevel2OnPage: boolean = false;\n\n    constructor(private responsiveNavService: ResponsiveNavigationService) {\n        this._subscription = this.responsiveNavService.registeredNavs.subscribe({\n            next: (navLevelList: number[]) => {\n                this.initializeNavTriggers(navLevelList);\n            }\n        });\n    }\n\n    // getter to access the responsive navigation codes from the template\n    get responsiveNavCodes(): ResponsiveNavCodes {\n        return ResponsiveNavCodes;\n    }\n\n    // reset triggers. handles cases when an application has different nav levels on different pages.\n    resetNavTriggers() {\n        this.isNavLevel1OnPage = false;\n        this.isNavLevel2OnPage = false;\n    }\n\n    // decides which triggers to show on the header\n    initializeNavTriggers(navList: number[]): void {\n        this.resetNavTriggers();\n        if (navList.length > 2) {\n            console.error(\"More than 2 Nav Levels detected.\");\n            return;\n        }\n        navList.forEach((navLevel) => {\n            if (navLevel === ResponsiveNavCodes.NAV_LEVEL_1) {\n                this.isNavLevel1OnPage = true;\n            } else if (navLevel === ResponsiveNavCodes.NAV_LEVEL_2) {\n                this.isNavLevel2OnPage = true;\n            }\n        });\n    }\n\n    // closes the nav that is open\n    closeOpenNav() {\n        this.responsiveNavService.closeAllNavs();\n    }\n\n    // toggles the nav that is open\n    toggleNav(navLevel: number) {\n        this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_TOGGLE, navLevel);\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, ElementRef, HostListener, Input, OnInit} from \"@angular/core\";\n\nimport {ResponsiveNavigationService} from \"./providers/responsive-navigation.service\";\nimport {ResponsiveNavCodes} from \"./responsive-nav-codes\";\n\n@Directive({selector: \"[clr-nav-level]\"})\nexport class ClrNavLevel implements OnInit {\n    @Input(\"clr-nav-level\") _level: number;\n\n    constructor(private responsiveNavService: ResponsiveNavigationService, private elementRef: ElementRef) {}\n\n    ngOnInit() {\n        if (this.level !== ResponsiveNavCodes.NAV_LEVEL_1 && this.level !== ResponsiveNavCodes.NAV_LEVEL_2) {\n            console.error(\"Nav Level can only be 1 or 2\");\n            return;\n        }\n        this.responsiveNavService.registerNav(this.level);\n        this.addNavClass(this.level);\n    }\n\n    addNavClass(level: number) {\n        const navHostClassList = this.elementRef.nativeElement.classList;\n        if (level === ResponsiveNavCodes.NAV_LEVEL_1) {\n            navHostClassList.add(ResponsiveNavCodes.NAV_CLASS_LEVEL_1);\n        } else if (level === ResponsiveNavCodes.NAV_LEVEL_2) {\n            navHostClassList.add(ResponsiveNavCodes.NAV_CLASS_LEVEL_2);\n        }\n    }\n\n    get level(): number {\n        return this._level;\n    }\n\n    // getter to access the responsive navigation codes from the template\n    get responsiveNavCodes(): ResponsiveNavCodes {\n        return ResponsiveNavCodes;\n    }\n\n    open(): void {\n        this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_OPEN, this.level);\n    }\n\n    close(): void {\n        this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_CLOSE, this.level);\n    }\n\n    // TODO: Figure out whats the best way to do this. Possible methods\n    // 1. HostListener (current solution)\n    // 2. Directives on the .nav-link class. We discussed on moving away from class selectors but I forget the reason\n    // why\n    @HostListener(\"click\", [\"$event.target\"])\n    onMouseClick(target: any) {\n        let current: any = target;  // Get the element in the DOM on which the mouse was clicked\n        const navHost: any = this.elementRef.nativeElement;  // Get the current nav native HTML element\n\n        // Start checking if current and navHost are equal.\n        // If not traverse to the parentNode and check again.\n        while (current) {\n            if (current === navHost) {\n                return;\n            } else if (current.classList.contains(\"nav-link\")) {\n                this.close();\n                return;\n            }\n            current = current.parentNode;\n        }\n    }\n\n    ngOnDestroy() {\n        this.responsiveNavService.unregisterNav(this.level);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {ResponsiveNavigationService} from \"./responsive-navigation.service\";\n\nexport function ResponsiveNavigationProvider(existing: ResponsiveNavigationService) {\n    return existing || new ResponsiveNavigationService();\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule, Optional, SkipSelf, Type} from \"@angular/core\";\n\nimport {ClrIconModule} from \"../../icon/icon.module\";\nimport {ClrDropdownModule} from \"../../popover/dropdown/dropdown.module\";\n\nimport {MainContainerWillyWonka} from \"./chocolate/main-container-willy-wonka\";\nimport {NavDetectionOompaLoompa} from \"./chocolate/nav-detection-oompa-loompa\";\nimport {ClrHeader} from \"./header\";\nimport {ClrNavLevel} from \"./nav-level\";\nimport {ResponsiveNavigationProvider} from \"./providers/responsive-navigation.provider\";\nimport {ResponsiveNavigationService} from \"./providers/responsive-navigation.service\";\n\nexport const CLR_NAVIGATION_DIRECTIVES: Type<any>[] =\n    [ClrHeader, ClrNavLevel, NavDetectionOompaLoompa, MainContainerWillyWonka];\n\n@NgModule({\n    imports: [CommonModule, ClrIconModule, ClrDropdownModule],\n    declarations: [CLR_NAVIGATION_DIRECTIVES],\n    providers: [{\n        provide: ResponsiveNavigationService,\n        useFactory: ResponsiveNavigationProvider,\n        deps: [[new Optional(), new SkipSelf(), ResponsiveNavigationService]]\n    }],\n    exports: [CLR_NAVIGATION_DIRECTIVES]\n})\nexport class ClrNavigationModule {}\n\n/* tslint:disable variable-name */\n/** @deprecated since 0.11 */\nexport interface Header extends ClrHeader {}\n/** @deprecated since 0.11 */\nexport const Header = ClrHeader;\n/** @deprecated since 0.11 */\nexport interface NavLevelDirective extends ClrNavLevel {}\n/** @deprecated since 0.11 */\nexport const NavLevelDirective = ClrNavLevel;\n/* tslint:enable variable-name */\n/** @deprecated since 0.11 */\nexport const NAVIGATION_DIRECTIVES = CLR_NAVIGATION_DIRECTIVES;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, TemplateRef, ViewChild} from \"@angular/core\";\n\n@Component({\n    template: `\n      <ng-template>\n        <ng-content></ng-content>\n      </ng-template>\n    `,\n})\nexport class TemplateRefContainer { @ViewChild(TemplateRef) template: TemplateRef<any>; }\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Type} from \"@angular/core\";\nimport {TemplateRefContainer} from \"./template-ref-container\";\n\nexport * from \"./template-ref-container\";\n\nexport const TEMPLATE_REF_DIRECTIVES: Type<any>[] = [TemplateRefContainer];\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\n\nimport {TEMPLATE_REF_DIRECTIVES} from \"./index\";\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [TEMPLATE_REF_DIRECTIVES],\n    entryComponents: [TEMPLATE_REF_DIRECTIVES],\n    exports: [TEMPLATE_REF_DIRECTIVES]\n})\nexport class ClrTemplateRefModule {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive} from \"@angular/core\";\nimport {WillyWonka} from \"../../../utils/chocolate/willy-wonka\";\n\n@Directive({selector: \"clr-tabs\"})\nexport class TabsWillyWonka extends WillyWonka {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {ChangeDetectorRef, Directive, Inject, Optional} from \"@angular/core\";\n\nimport {OompaLoompa} from \"../../../utils/chocolate/oompa-loompa\";\nimport {IF_ACTIVE_ID, IfActiveService} from \"../../../utils/conditional/if-active.service\";\n\nimport {TabsWillyWonka} from \"./tabs-willy-wonka\";\n\n@Directive({selector: \"[clrTabLink], clr-tab-content\"})\nexport class ActiveOompaLoompa extends OompaLoompa {\n    private ifActive: IfActiveService;\n    private id: number;\n\n    constructor(cdr: ChangeDetectorRef, @Optional() willyWonka: TabsWillyWonka, @Inject(IF_ACTIVE_ID) id: number,\n                ifActive: IfActiveService) {\n        if (!willyWonka) {\n            throw new Error(\"clrTabLink and clr-tab-content should only be used inside of a clr-tabs\");\n        }\n        super(cdr, willyWonka);\n        this.ifActive = ifActive;\n        this.id = id;\n    }\n\n    get flavor() {\n        return this.ifActive.current === this.id;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Injectable} from \"@angular/core\";\n\n// TODO: if we find more components that could use this, consider moving this to utils\n@Injectable()\nexport class AriaService {\n    public ariaLabelledBy: string;\n    public ariaControls: string;\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Injectable} from \"@angular/core\";\nimport {ClrTab} from \"../tab\";\n\n@Injectable()\nexport class TabsService {\n    private _children: ClrTab[] = [];\n\n    register(tab: ClrTab) {\n        this._children.push(tab);\n    }\n\n    get children() {\n        return this._children;\n    }\n\n    get activeTab() {\n        return this.children.find((tab: ClrTab) => {\n            return tab.active;\n        });\n    }\n\n    get overflowTabs() {\n        return this.children.filter((tab: ClrTab) => {\n            return tab.tabLink.inOverflow === true;\n        });\n    }\n\n    unregister(tab: ClrTab) {\n        const index = this.children.indexOf(tab);\n        if (index > -1) {\n            this.children.splice(index, 1);\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, Inject, Input, TemplateRef, ViewChild} from \"@angular/core\";\nimport {IF_ACTIVE_ID, IfActiveService} from \"../../utils/conditional/if-active.service\";\nimport {AriaService} from \"./providers/aria.service\";\n\nlet nbTabContentComponents: number = 0;\n\n@Component({\n    selector: \"clr-tab-content\",\n    template: `\n        <ng-content></ng-content>\n    `,\n    host: {\n        \"[id]\": \"tabContentId\",\n        \"[attr.aria-labelledby]\": \"ariaLabelledBy\",\n        \"[attr.aria-hidden]\": \"!active\",\n        \"[attr.data-hidden]\": \"!active\",\n        \"role\": \"tabpanel\"\n    }\n})\nexport class ClrTabContent {\n    @ViewChild(\"tabContentProjectedRef\") templateRef: TemplateRef<ClrTabContent>;\n\n    constructor(public ifActiveService: IfActiveService, @Inject(IF_ACTIVE_ID) public id: number,\n                private ariaService: AriaService) {\n        if (!this.tabContentId) {\n            this.tabContentId = \"clr-tab-content-\" + (nbTabContentComponents++);\n        }\n    }\n\n    get ariaLabelledBy(): string {\n        return this.ariaService.ariaLabelledBy;\n    }\n\n    get tabContentId(): string {\n        return this.ariaService.ariaControls;\n    }\n\n    @Input(\"id\")\n    set tabContentId(id: string) {\n        this.ariaService.ariaControls = id;\n    }\n\n    get active() {\n        return this.ifActiveService.current === this.id;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {InjectionToken} from \"@angular/core\";\n\nlet nbTabsComponent = 0;\n\nexport const TABS_ID = new InjectionToken<number>(\"TABS_ID\");\n\nexport function tokenFactory() {\n    return \"clr-tabs-\" + (nbTabsComponent++);\n}\n\nexport const TABS_ID_PROVIDER = {\n    provide: TABS_ID,\n    useFactory: tokenFactory\n};\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {\n    ComponentFactoryResolver,\n    Directive,\n    ElementRef,\n    HostBinding,\n    HostListener,\n    Inject,\n    Input,\n    ViewContainerRef\n} from \"@angular/core\";\n\nimport {IF_ACTIVE_ID, IfActiveService} from \"../../utils/conditional/if-active.service\";\nimport {TemplateRefContainer} from \"../../utils/template-ref/template-ref-container\";\n\nimport {AriaService} from \"./providers/aria.service\";\nimport {TABS_ID} from \"./tabs-id.provider\";\n\nlet nbTabLinkComponents: number = 0;\n\n@Directive({\n    selector: \"[clrTabLink]\",\n    host: {\n        \"[id]\": \"tabLinkId\",\n        \"[attr.aria-selected]\": \"active\",\n        \"[attr.aria-controls]\": \"ariaControls\",\n        \"[class.btn]\": \"true\",\n        \"[class.btn-link]\": \"!inOverflow\",\n        \"[class.nav-link]\": \"!inOverflow\",\n        \"[class.nav-item]\": \"!inOverflow\",\n        \"[class.active]\": \"active\"\n    }\n})\nexport class ClrTabLink {\n    @Input(\"clrTabLinkInOverflow\") inOverflow: boolean;\n    templateRefContainer: TemplateRefContainer;\n\n    constructor(public ifActiveService: IfActiveService, @Inject(IF_ACTIVE_ID) private id: number,\n                private ariaService: AriaService, private el: ElementRef, private cfr: ComponentFactoryResolver,\n                private viewContainerRef: ViewContainerRef, @Inject(TABS_ID) public tabsId: number) {\n        if (!this.tabLinkId) {\n            this.tabLinkId = \"clr-tab-link-\" + (nbTabLinkComponents++);\n        }\n\n        // Tab links can be rendered in one of two places: in the main area or inside the overflow dropdown menu.\n        // Here, we create a container so that its template can be used to create embeddedView on the fly.\n        // See TabsService's renderView() method and how it's used in Tabs class for an example.\n        const factory = this.cfr.resolveComponentFactory(TemplateRefContainer);\n        this.templateRefContainer =\n            this.viewContainerRef.createComponent(factory, 1, undefined, [[this.el.nativeElement]]).instance;\n    }\n\n    get ariaControls(): string {\n        return this.ariaService.ariaControls;\n    }\n\n    get tabLinkId(): string {\n        return this.ariaService.ariaLabelledBy;\n    }\n\n    @Input(\"id\")\n    set tabLinkId(id: string) {\n        this.ariaService.ariaLabelledBy = id;\n    }\n\n    @HostListener(\"click\")\n    activate() {\n        this.ifActiveService.current = this.id;\n    }\n\n    get active() {\n        return this.ifActiveService.current === this.id;\n    }\n\n    @HostBinding(\"attr.role\")\n    get role(): string {\n        return \"presentation\";\n    }\n\n    @HostBinding(\"attr.type\")\n    get type(): string {\n        return \"button\";\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, ContentChild, Inject} from \"@angular/core\";\n\nimport {IF_ACTIVE_ID, IF_ACTIVE_ID_PROVIDER, IfActiveService} from \"../../utils/conditional/if-active.service\";\n\nimport {AriaService} from \"./providers/aria.service\";\nimport {TabsService} from \"./providers/tabs.service\";\nimport {ClrTabContent} from \"./tab-content\";\nimport {ClrTabLink} from \"./tab-link.directive\";\n\n@Component({\n    selector: \"clr-tab\",\n    template: `\n        <ng-content></ng-content>\n    `,\n    providers: [IF_ACTIVE_ID_PROVIDER, AriaService]\n})\nexport class ClrTab {\n    @ContentChild(ClrTabLink) tabLink: ClrTabLink;\n    @ContentChild(ClrTabContent) tabContent: ClrTabContent;\n\n    constructor(public ifActiveService: IfActiveService, @Inject(IF_ACTIVE_ID) public id: number,\n                private tabsService: TabsService) {\n        tabsService.register(this);\n    }\n\n    ngOnDestroy() {\n        this.tabsService.unregister(this);\n    }\n\n    get active() {\n        return this.ifActiveService.current === this.id;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, ElementRef, Injector, SkipSelf} from \"@angular/core\";\n\nimport {AbstractPopover} from \"../../popover/common/abstract-popover\";\nimport {Point} from \"../../popover/common/popover\";\n\n@Component({\n    selector: \"clr-tab-overflow-content\",\n    template: `\n        <ng-content></ng-content>\n    `,\n    host: {\n        \"[class.dropdown-menu]\": \"true\",\n    }\n})\nexport class ClrTabOverflowContent extends AbstractPopover {\n    constructor(injector: Injector, @SkipSelf() parentHost: ElementRef) {\n        super(injector, parentHost);\n        this.anchorPoint = Point.BOTTOM_RIGHT;\n        this.popoverPoint = Point.RIGHT_TOP;\n        this.closeOnOutsideClick = true;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {AfterContentInit, Component, ContentChildren, Inject, QueryList} from \"@angular/core\";\n\nimport {IfActiveService} from \"../../utils/conditional/if-active.service\";\nimport {IfOpenService} from \"../../utils/conditional/if-open.service\";\n\nimport {TabsService} from \"./providers/tabs.service\";\nimport {ClrTabLink} from \"./tab-link.directive\";\nimport {TABS_ID, TABS_ID_PROVIDER} from \"./tabs-id.provider\";\n\n@Component({\n    selector: \"clr-tabs\",\n    template: `\n        <ul class=\"nav\" role=\"tablist\">\n            <!--tab links-->\n            <ng-container *ngFor=\"let link of tabLinkDirectives\">\n                <ng-container *ngIf=\"link.tabsId === tabsId && !link.inOverflow\"\n                              [ngTemplateOutlet]=\"link.templateRefContainer.template\">\n                </ng-container>\n            </ng-container>\n            <ng-container *ngIf=\"tabsService.overflowTabs.length > 0\">\n                <div class=\"tabs-overflow bottom-right\" [class.open]=\"ifOpenService.open\"\n                     (click)=\"toggleOverflow($event)\">\n                    <li role=\"presentation\" class=\"nav-item\">\n                        <button class=\"btn btn-link nav-link dropdown-toggle\" type=\"button\" [class.active]=\"activeTabInOverflow\">\n                            <clr-icon shape=\"ellipsis-horizontal\" [class.is-info]=\"ifOpenService.open\"></clr-icon>\n                        </button>\n                    </li>\n                    <!--tab links in overflow menu-->\n                    <clr-tab-overflow-content>\n                        <ng-container *ngFor=\"let link of tabLinkDirectives\">\n                            <ng-container *ngIf=\"link.tabsId === tabsId && link.inOverflow\"\n                                          [ngTemplateOutlet]=\"link.templateRefContainer.template\">\n                            </ng-container>\n                        </ng-container>\n                    </clr-tab-overflow-content>\n                </div>\n            </ng-container>\n        </ul>\n        <!--tab content-->\n        <ng-content></ng-content>\n    `,\n    providers: [IfActiveService, IfOpenService, TabsService, TABS_ID_PROVIDER]\n})\nexport class ClrTabs implements AfterContentInit {\n    @ContentChildren(ClrTabLink, {descendants: true}) tabLinkDirectives: QueryList<ClrTabLink>;\n\n    constructor(public ifActiveService: IfActiveService, public ifOpenService: IfOpenService,\n                public tabsService: TabsService, @Inject(TABS_ID) public tabsId: number) {}\n\n    get activeTabInOverflow() {\n        return this.tabsService.overflowTabs.indexOf(this.tabsService.activeTab) > -1;\n    }\n\n    ngAfterContentInit() {\n        if (typeof this.ifActiveService.current === \"undefined\") {\n            this.tabLinkDirectives.first.activate();\n        }\n    }\n\n    toggleOverflow(event: any) {\n        this.ifOpenService.toggleWithEvent(event);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule, Type} from \"@angular/core\";\n\nimport {ClrIconModule} from \"../../icon/icon.module\";\nimport {ClrCommonPopoverModule} from \"../../popover/common/popover.module\";\nimport {ClrConditionalModule} from \"../../utils/conditional/conditional.module\";\nimport {ClrTemplateRefModule} from \"../../utils/template-ref/template-ref.module\";\n\nimport {ActiveOompaLoompa} from \"./chocolate/active-oompa-loompa\";\nimport {TabsWillyWonka} from \"./chocolate/tabs-willy-wonka\";\nimport {ClrTab} from \"./tab\";\nimport {ClrTabContent} from \"./tab-content\";\nimport {ClrTabLink} from \"./tab-link.directive\";\nimport {ClrTabOverflowContent} from \"./tab-overflow-content\";\nimport {ClrTabs} from \"./tabs\";\n\nexport const CLR_TABS_DIRECTIVES: Type<any>[] =\n    [ClrTabContent, ClrTab, ClrTabs, ClrTabOverflowContent, ClrTabLink, TabsWillyWonka, ActiveOompaLoompa];\n\n@NgModule({\n    imports: [CommonModule, ClrCommonPopoverModule, ClrConditionalModule, ClrIconModule, ClrTemplateRefModule],\n    declarations: [CLR_TABS_DIRECTIVES],\n    exports: [CLR_TABS_DIRECTIVES, ClrConditionalModule]\n})\nexport class ClrTabsModule {}\n\n/* tslint:disable variable-name */\n/** @deprecated since 0.11 */\nexport interface Tab extends ClrTab {}\n/** @deprecated since 0.11 */\nexport const Tab = ClrTab;\n/** @deprecated since 0.11 */\nexport interface Tabs extends ClrTabs {}\n/** @deprecated since 0.11 */\nexport const Tabs = ClrTabs;\n/** @deprecated since 0.11 */\nexport interface TabContent extends ClrTabContent {}\n/** @deprecated since 0.11 */\nexport const TabContent = ClrTabContent;\n/** @deprecated since 0.11 */\nexport interface TabOverflowContent extends ClrTabOverflowContent {}\n/** @deprecated since 0.11 */\nexport const TabOverflowContent = ClrTabOverflowContent;\n/** @deprecated since 0.11 */\nexport interface TabLinkDirective extends ClrTabLink {}\n/** @deprecated since 0.11 */\nexport const TabLinkDirective = ClrTabLink;\n/* tslint:enable variable-name */\n/** @deprecated since 0.11 */\nexport const TABS_DIRECTIVES = CLR_TABS_DIRECTIVES;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Injectable} from \"@angular/core\";\n\n@Injectable()\nexport class VerticalNavGroupRegistrationService {\n    public navGroupCount: number = 0;\n\n    registerNavGroup() {\n        this.navGroupCount++;\n    }\n\n    unregisterNavGroup(): void {\n        this.navGroupCount--;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Injectable} from \"@angular/core\";\n\n@Injectable()\nexport class VerticalNavIconService {\n    private _icons: number = 0;\n\n    get hasIcons(): boolean {\n        return this._icons > 0;\n    }\n\n    registerIcon(): void {\n        this._icons++;\n    }\n\n    unregisterIcon(): void {\n        this._icons--;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\n\n@Injectable()\nexport class VerticalNavService {\n    private _animateOnCollapsed: Subject<boolean> = new Subject<boolean>();\n\n    get animateOnCollapsed(): Observable<boolean> {\n        return this._animateOnCollapsed.asObservable();\n    }\n\n    private _collapsedChanged: Subject<boolean> = new Subject<boolean>();\n\n    get collapsedChanged(): Observable<boolean> {\n        return this._collapsedChanged.asObservable();\n    }\n\n    private _collapsed: boolean = false;\n\n    get collapsed(): boolean {\n        return this._collapsed;\n    }\n\n    set collapsed(value: boolean) {\n        value = !!value;\n        if (this.collapsible && (this._collapsed !== value)) {\n            this.updateCollapseBehavior(value);\n        }\n    }\n\n    private _collapsible: boolean = false;\n\n    get collapsible(): boolean {\n        return this._collapsible;\n    }\n\n    set collapsible(value: boolean) {\n        value = !!value;\n        if (this._collapsible !== value) {\n            if (!value && this.collapsed) {\n                this.updateCollapseBehavior(false);\n            }\n            this._collapsible = value;\n        }\n    }\n\n    private updateCollapseBehavior(value: boolean): void {\n        this._animateOnCollapsed.next(value);\n        this._collapsed = value;\n        this._collapsedChanged.next(value);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Component, EventEmitter, Input, OnDestroy, Output} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {VerticalNavGroupRegistrationService} from \"./providers/vertical-nav-group-registration.service\";\nimport {VerticalNavIconService} from \"./providers/vertical-nav-icon.service\";\nimport {VerticalNavService} from \"./providers/vertical-nav.service\";\n\n@Component({\n    selector: \"clr-vertical-nav\",\n    template: `<!--\n  ~ Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<button type=\"button\" class=\"nav-trigger\"\n        [class.on-collapse]=\"collapsed\"\n        (click)=\"toggleByButton()\"\n        *ngIf=\"collapsible\">\n    <clr-icon shape=\"angle-double\" class=\"nav-trigger-icon\" [attr.dir]=\"(this.collapsed) ? 'right' : 'left'\"></clr-icon>\n</button>\n<!-- Click handler on .nav-content is bad but required :-( -->\n<div class=\"nav-content\">\n    <ng-content></ng-content>\n    <button (click)=\"collapsed = false\" class=\"nav-btn\" *ngIf=\"collapsible && collapsed\"></button>\n</div>\n`,\n    providers: [VerticalNavService, VerticalNavIconService, VerticalNavGroupRegistrationService],\n    host: {\n        \"class\": \"clr-vertical-nav\",\n        \"[class.is-collapsed]\": \"collapsed\",\n        \"[class.has-nav-groups]\": \"hasNavGroups\",\n        \"[class.has-icons]\": \"hasIcons\"\n    }\n})\nexport class ClrVerticalNav implements OnDestroy {\n    get collapsible(): boolean {\n        return this._navService.collapsible;\n    }\n\n    @Input(\"clrVerticalNavCollapsible\")\n    set collapsible(value: boolean) {\n        this._navService.collapsible = value;\n    }\n\n    get collapsed(): boolean {\n        return this._navService.collapsed;\n    }\n\n    @Input(\"clrVerticalNavCollapsed\")\n    set collapsed(value: boolean) {\n        this._navService.collapsed = value;\n    }\n\n    @Output(\"clrVerticalNavCollapsedChange\")\n    private _collapsedChanged: EventEmitter<boolean> = new EventEmitter<boolean>(true);\n\n    get hasNavGroups(): boolean {\n        return this._navGroupRegistrationService.navGroupCount > 0;\n    }\n\n    get hasIcons(): boolean {\n        return this._navIconService.hasIcons;\n    }\n\n    private _sub: Subscription;\n\n    constructor(private _navService: VerticalNavService, private _navIconService: VerticalNavIconService,\n                private _navGroupRegistrationService: VerticalNavGroupRegistrationService) {\n        this._sub = this._navService.collapsedChanged.subscribe(value => {\n            this._collapsedChanged.emit(value);\n        });\n    }\n\n    toggleByButton() {\n        this.collapsed = !this.collapsed;\n    }\n\n    ngOnDestroy() {\n        this._sub.unsubscribe();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\n\n@Injectable()\nexport class VerticalNavGroupService {\n    private _expandChange: Subject<boolean> = new Subject<boolean>();\n\n    get expandChange(): Observable<boolean> {\n        return this._expandChange.asObservable();\n    }\n\n    expand(): void {\n        this._expandChange.next(true);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {animate, AnimationEvent, state, style, transition, trigger} from \"@angular/animations\";\nimport {AfterContentInit, Component, EventEmitter, HostBinding, Input, OnDestroy, Output} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {Expand} from \"../../utils/expand/providers/expand\";\n\nimport {VerticalNavGroupRegistrationService} from \"./providers/vertical-nav-group-registration.service\";\nimport {VerticalNavGroupService} from \"./providers/vertical-nav-group.service\";\nimport {VerticalNavService} from \"./providers/vertical-nav.service\";\n\nconst EXPANDED_STATE: string = \"expanded\";\nconst COLLAPSED_STATE: string = \"collapsed\";\n\n@Component({\n    selector: \"clr-vertical-nav-group\",\n    template: `<!--\n  ~ Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div class=\"nav-group-content\">\n    <ng-content select=\"[clrVerticalNavLink]\"></ng-content>\n    <button\n        class=\"nav-group-trigger\"\n        type=\"button\"\n        (click)=\"toggleExpand()\">\n        <ng-content select=\"[clrVerticalNavIcon]\"></ng-content>\n        <div class=\"nav-group-text\">\n            <ng-content></ng-content>\n        </div>\n        <clr-icon shape=\"caret\"\n                  class=\"nav-group-trigger-icon\"\n                  [attr.dir]=\"(this.expanded) ? 'down' : 'right'\">\n        </clr-icon>\n    </button>\n</div>\n<!--TODO: This animation needs to be added to the clr-vertical-nav-group-children component-->\n<div class=\"nav-group-children\"\n     [@clrExpand]=\"expandAnimationState\"\n     (@clrExpand.done)=\"expandAnimationDone($event)\">\n    <ng-content select=\"[clrIfExpanded], clr-vertical-nav-group-children\"></ng-content>\n</div>\n`,\n    providers: [Expand, VerticalNavGroupService],\n    animations:\n        [trigger(\"clrExpand\",\n                 [\n                     state(EXPANDED_STATE, style({\"height\": \"*\"})),\n                     state(COLLAPSED_STATE, style({\"height\": 0, \"overflow-y\": \"hidden\", \"visibility\": \"hidden\"})),\n                     transition(`${EXPANDED_STATE} <=> ${COLLAPSED_STATE}`, animate(\"0.2s ease-in-out\"))\n                 ])],\n    host: {\"class\": \"nav-group\"}\n})\nexport class ClrVerticalNavGroup implements AfterContentInit, OnDestroy {\n    constructor(private _itemExpand: Expand, private _navGroupRegistrationService: VerticalNavGroupRegistrationService,\n                private _navGroupService: VerticalNavGroupService, private _navService: VerticalNavService) {\n        this._navGroupRegistrationService.registerNavGroup();\n\n\n        // FIXME: This subscription handles a corner case\n        // Vertical Nav collapse requires the animation to run first and then\n        // remove the nodes from the DOM. If the user directly sets the input\n        // on the clrIfExpanded directive, we have no chance to run the animation\n        // and wait for it to complete. This subscription makes sure that the\n        // animation states are correct for that edge case.\n        this._subscriptions.push(this._itemExpand.expandChange.subscribe(value => {\n            if (value && this.expandAnimationState === COLLAPSED_STATE) {\n                if (this._navService.collapsed) {\n                    this._navService.collapsed = false;\n                }\n                this.expandAnimationState = EXPANDED_STATE;\n            } else if (!value && this.expandAnimationState === EXPANDED_STATE) {\n                this.expandAnimationState = COLLAPSED_STATE;\n            }\n        }));\n\n        // 1. If the nav is collapsing, close the open nav group + save its state\n        // 2. If the nav is expanding, expand the nav group if the previous state was expanded\n        this._subscriptions.push(this._navService.animateOnCollapsed.subscribe((goingToCollapse: boolean) => {\n            if (goingToCollapse && this.expanded) {\n                this.wasExpanded = true;\n                this.expandAnimationState = COLLAPSED_STATE;\n            } else if (!goingToCollapse && this.wasExpanded) {\n                this.expandGroup();\n                this.wasExpanded = false;\n            }\n        }));\n\n        // If a link is clicked, expand the nav group\n        this._subscriptions.push(this._navGroupService.expandChange.subscribe((expand: boolean) => {\n            if (expand && !this.expanded) {\n                this.expandGroup();\n            }\n        }));\n    }\n\n    private wasExpanded: boolean = false;\n\n    @HostBinding(\"class.is-expanded\")\n    get expanded(): boolean {\n        return this._itemExpand.expanded;\n    }\n\n    set expanded(value: boolean) {\n        if (this._itemExpand.expanded !== value) {\n            this._itemExpand.expanded = value;\n            this.expandedChange.emit(value);\n        }\n    }\n\n    @Input(\"clrVerticalNavGroupExpanded\")\n    set userExpandedInput(value: boolean) {\n        value = !!value;\n        if (this.expanded !== value) {\n            // We have to call toggleExpand because some cases require animations to occur first\n            // Directly setting the Expand service value skips the animation and can result in\n            // nodes in the DOM but the nav group still being collapsed\n            this.toggleExpand();\n        }\n    }\n\n    @Output(\"clrVerticalNavGroupExpandedChange\")\n    expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>(true);\n\n    private _subscriptions: Subscription[] = [];\n\n    private _expandAnimationState: string = COLLAPSED_STATE;\n\n    expandGroup(): void {\n        this.expanded = true;\n        // Expanded animation occurs after Expand.expand is set to true\n        this.expandAnimationState = EXPANDED_STATE;\n    }\n\n    collapseGroup(): void {\n        // If a Vertical Nav Group toggle button is clicked while the Vertical Nav is in Collapsed state,\n        // the Vertical Nav should be expanded first.\n        this.expandAnimationState = COLLAPSED_STATE;\n    }\n\n    // closes a group after the collapse animation\n    expandAnimationDone($event: AnimationEvent) {\n        if ($event.toState === COLLAPSED_STATE) {\n            this.expanded = false;\n        }\n    }\n\n    get expandAnimationState(): string {\n        return this._expandAnimationState;\n    }\n\n    set expandAnimationState(value: string) {\n        if (value !== this._expandAnimationState) {\n            this._expandAnimationState = value;\n        }\n    }\n\n    toggleExpand(): void {\n        if (this.expanded) {\n            this.collapseGroup();\n        } else {\n            // If nav is collasped, first open the nav\n            if (this._navService.collapsed) {\n                this._navService.collapsed = false;\n            }\n            // then expand the nav group\n            this.expandGroup();\n        }\n    }\n\n    ngAfterContentInit() {\n        // This makes sure that if someone marks a nav group expanded in a collapsed nav\n        // the expanded property is switched back to collapsed state.\n        if (this._navService.collapsed && this.expanded) {\n            this.wasExpanded = true;\n            this.expandAnimationState = COLLAPSED_STATE;\n        }\n    }\n\n    ngOnDestroy() {\n        this._subscriptions.forEach((sub: Subscription) => sub.unsubscribe());\n        this._navGroupRegistrationService.unregisterNavGroup();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Component} from \"@angular/core\";\n\n@Component({\n    selector: \"clr-vertical-nav-group-children\",\n    template: `\n        <ng-content></ng-content>\n    `\n})\nexport class ClrVerticalNavGroupChildren {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, OnDestroy} from \"@angular/core\";\nimport {VerticalNavIconService} from \"./providers/vertical-nav-icon.service\";\n\n@Directive({selector: \"[clrVerticalNavIcon]\", host: {\"class\": \"nav-icon\"}})\nexport class ClrVerticalNavIcon implements OnDestroy {\n    constructor(private _verticalNavIconService: VerticalNavIconService) {\n        this._verticalNavIconService.registerIcon();\n    }\n\n    ngOnDestroy() {\n        this._verticalNavIconService.unregisterIcon();\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, HostListener, Optional} from \"@angular/core\";\nimport {VerticalNavGroupService} from \"./providers/vertical-nav-group.service\";\n\n@Component({\n    selector: \"[clrVerticalNavLink]\",\n    template: `\n        <ng-content select=\"[clrVerticalNavIcon]\"></ng-content>\n        <span class=\"nav-text\">\n            <ng-content></ng-content>    \n        </span>\n    `,\n    host: {\"class\": \"nav-link\"}\n})\nexport class ClrVerticalNavLink {\n    constructor(@Optional() private _navGroupService: VerticalNavGroupService) {}\n\n    @HostListener(\"click\")\n    public expandParentNavGroup(): void {\n        if (this._navGroupService) {\n            this._navGroupService.expand();\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule, Type} from \"@angular/core\";\n\nimport {ClrIconModule} from \"../../icon/icon.module\";\nimport {ClrIfExpandModule} from \"../../utils/expand/if-expand.module\";\n\nimport {ClrVerticalNav} from \"./vertical-nav\";\nimport {ClrVerticalNavGroup} from \"./vertical-nav-group\";\nimport {ClrVerticalNavGroupChildren} from \"./vertical-nav-group-children\";\nimport {ClrVerticalNavIcon} from \"./vertical-nav-icon\";\nimport {ClrVerticalNavLink} from \"./vertical-nav-link\";\n\nexport const CLR_VERTICAL_NAV_DIRECTIVES: Type<any>[] =\n    [ClrVerticalNav, ClrVerticalNavLink, ClrVerticalNavGroup, ClrVerticalNavGroupChildren, ClrVerticalNavIcon];\n\n@NgModule({\n    imports: [CommonModule, ClrIconModule, ClrIfExpandModule],\n    declarations: [CLR_VERTICAL_NAV_DIRECTIVES],\n    exports: [CLR_VERTICAL_NAV_DIRECTIVES, ClrIfExpandModule, ClrIconModule]\n})\nexport class ClrVerticalNavModule {}\n\n/* tslint:disable variable-name */\n/** @deprecated since 0.11 */\nexport interface VerticalNav extends ClrVerticalNav {}\n/** @deprecated since 0.11 */\nexport const VerticalNav = ClrVerticalNav;\n/** @deprecated since 0.11 */\nexport interface VerticalNavGroup extends ClrVerticalNavGroup {}\n/** @deprecated since 0.11 */\nexport const VerticalNavGroup = ClrVerticalNavGroup;\n/** @deprecated since 0.11 */\nexport interface VerticalNavGroupChildren extends ClrVerticalNavGroupChildren {}\n/** @deprecated since 0.11 */\nexport const VerticalNavGroupChildren = ClrVerticalNavGroupChildren;\n/** @deprecated since 0.11 */\nexport interface VerticalNavIcon extends ClrVerticalNavIcon {}\n/** @deprecated since 0.11 */\nexport const VerticalNavIcon = ClrVerticalNavIcon;\n/** @deprecated since 0.11 */\nexport interface VerticalNavLink extends ClrVerticalNavLink {}\n/** @deprecated since 0.11 */\nexport const VerticalNavLink = ClrVerticalNavLink;\n/* tslint:enable variable-name */\n/** @deprecated since 0.11 */\nexport const VERTICAL_NAV_DIRECTIVES = CLR_VERTICAL_NAV_DIRECTIVES;",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {NgModule} from \"@angular/core\";\n\nimport {ClrMainContainerModule} from \"./main-container/main-container.module\";\nimport {ClrNavigationModule} from \"./nav/navigation.module\";\nimport {ClrTabsModule} from \"./tabs/tabs.module\";\nimport {ClrVerticalNavModule} from \"./vertical-nav/vertical-nav.module\";\n\n@NgModule({exports: [ClrMainContainerModule, ClrNavigationModule, ClrTabsModule, ClrVerticalNavModule]})\nexport class ClrLayoutModule {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {DOCUMENT} from \"@angular/common\";\nimport {Inject, Injectable} from \"@angular/core\";\n\n@Injectable()\nexport class ScrollingService {\n    constructor(@Inject(DOCUMENT) private _document: any) {}\n\n    stopScrolling(): void {\n        this._document.body.classList.add(\"no-scrolling\");\n    }\n\n    resumeScrolling(): void {\n        if (this._document.body.classList.contains(\"no-scrolling\")) {\n            this._document.body.classList.remove(\"no-scrolling\");\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nexport const GHOST_PAGE_ANIMATION = {\n    STATES: {NO_PAGES: \"inactive\", ALL_PAGES: \"ready\", NEXT_TO_LAST_PAGE: \"penultimateGhost\", LAST_PAGE: \"lastGhost\"},\n    TRANSITIONS: {IN: \"100ms ease-out\", OUT: \"100ms ease-in\"}\n};\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {animate, AnimationEvent, state, style, transition, trigger} from \"@angular/animations\";\nimport {\n    Component,\n    EventEmitter,\n    HostBinding,\n    HostListener,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Output,\n    SimpleChange,\n    ViewChild\n} from \"@angular/core\";\n\nimport {FocusTrapDirective} from \"../utils/focus-trap/focus-trap.directive\";\nimport {ScrollingService} from \"../utils/scrolling/scrolling-service\";\n\nimport {GHOST_PAGE_ANIMATION} from \"./utils/ghost-page-animations\";\n\n@Component({\n    selector: \"clr-modal\",\n    viewProviders: [ScrollingService],\n    template: `\n<!--\n  ~ Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div clrFocusTrap class=\"modal\" *ngIf=\"_open\">\n    <!--fixme: revisit when ngClass works with exit animation-->\n    <div [@fadeDown]=\"skipAnimation\" (@fadeDown.done)=\"fadeDone($event)\"\n         class=\"modal-dialog\"\n         [class.modal-sm]=\"size == 'sm'\"\n         [class.modal-lg]=\"size == 'lg'\"\n         [class.modal-xl]=\"size == 'xl'\"\n         role=\"dialog\" [attr.aria-hidden]=\"!_open\">\n\n        <div class=\"modal-outer-wrapper\">\n            <div class=\"modal-content-wrapper\">\n                <!-- only used in wizards -->\n                <ng-content select=\".modal-nav\"></ng-content>\n\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <button type=\"button\" class=\"close\" aria-label=\"Close\"\n                                *ngIf=\"closable\" (click)=\"close()\">\n                            <clr-icon aria-hidden=\"true\" shape=\"close\"></clr-icon>\n                        </button>\n                        <ng-content select=\".modal-title\"></ng-content>\n                    </div>\n                    <ng-content select=\".modal-body\"></ng-content>\n                    <ng-content select=\".modal-footer\"></ng-content>\n                </div>\n            </div>\n            <div class=\"modal-ghost-wrapper\">\n                <div [@ghostPageOneState]=\"ghostPageState\" class=\"modal-ghost modal-ghost-1\"></div>\n                <div [@ghostPageTwoState]=\"ghostPageState\" class=\"modal-ghost modal-ghost-2\"></div>\n            </div>\n        </div>\n    </div>\n\n    <div [@fade] class=\"modal-backdrop\"\n         aria-hidden=\"true\"\n         (click)=\"staticBackdrop || close()\"></div>\n</div>\n\n`,\n    styles: [`\n        :host { display: none; }\n        :host.open { display: inline; }\n    `],\n    animations: [\n        trigger(\"fadeDown\",\n                [\n                    transition(\"* => false\",\n                               [style({opacity: 0, transform: \"translate(0, -25%)\"}), animate(\"0.2s ease-in-out\")]),\n                    transition(\"false => *\",\n                               [animate(\"0.2s ease-in-out\", style({opacity: 0, transform: \"translate(0, -25%)\"}))])\n                ]),\n        trigger(\"fade\",\n                [\n                    transition(\"void => *\", [style({opacity: 0}), animate(\"0.2s ease-in-out\", style({opacity: 0.85}))]),\n                    transition(\"* => void\", [animate(\"0.2s ease-in-out\", style({opacity: 0}))])\n                ]),\n        trigger(\"ghostPageOneState\",\n                [\n                    state(GHOST_PAGE_ANIMATION.STATES.NO_PAGES, style({left: \"-24px\"})),\n                    state(GHOST_PAGE_ANIMATION.STATES.ALL_PAGES, style({left: \"0\"})),\n                    state(GHOST_PAGE_ANIMATION.STATES.NEXT_TO_LAST_PAGE, style({left: \"-24px\"})),\n                    state(GHOST_PAGE_ANIMATION.STATES.LAST_PAGE, style({left: \"-24px\"})),\n                    transition(GHOST_PAGE_ANIMATION.STATES.NO_PAGES + \" => *\",\n                               animate(GHOST_PAGE_ANIMATION.TRANSITIONS.IN)),\n                    transition(GHOST_PAGE_ANIMATION.STATES.ALL_PAGES + \" => *\",\n                               animate(GHOST_PAGE_ANIMATION.TRANSITIONS.OUT)),\n                    transition(GHOST_PAGE_ANIMATION.STATES.LAST_PAGE + \" => *\",\n                               animate(GHOST_PAGE_ANIMATION.TRANSITIONS.IN)),\n                    transition(GHOST_PAGE_ANIMATION.STATES.NEXT_TO_LAST_PAGE + \" => *\",\n                               animate(GHOST_PAGE_ANIMATION.TRANSITIONS.OUT))\n                ]),\n        // TODO: USE TRANSFORM, NOT LEFT...\n        trigger(\"ghostPageTwoState\",\n                [\n                    state(GHOST_PAGE_ANIMATION.STATES.NO_PAGES, style({left: \"-24px\", top: \"24px\", bottom: \"24px\"})),\n                    state(GHOST_PAGE_ANIMATION.STATES.ALL_PAGES, style({left: \"24px\"})),\n                    state(GHOST_PAGE_ANIMATION.STATES.NEXT_TO_LAST_PAGE,\n                          style({left: \"0px\", top: \"24px\", bottom: \"24px\", background: \"#bbb\"})),\n                    state(GHOST_PAGE_ANIMATION.STATES.LAST_PAGE, style({left: \"-24px\", top: \"24px\", bottom: \"24px\"})),\n                    transition(GHOST_PAGE_ANIMATION.STATES.NO_PAGES + \" => *\",\n                               animate(GHOST_PAGE_ANIMATION.TRANSITIONS.IN)),\n                    transition(GHOST_PAGE_ANIMATION.STATES.ALL_PAGES + \" => *\",\n                               animate(GHOST_PAGE_ANIMATION.TRANSITIONS.OUT)),\n                    transition(GHOST_PAGE_ANIMATION.STATES.LAST_PAGE + \" => *\",\n                               animate(GHOST_PAGE_ANIMATION.TRANSITIONS.IN)),\n                    transition(GHOST_PAGE_ANIMATION.STATES.NEXT_TO_LAST_PAGE + \" => *\",\n                               animate(GHOST_PAGE_ANIMATION.TRANSITIONS.OUT))\n                ])\n    ]\n})\nexport class ClrModal implements OnChanges, OnDestroy {\n    @ViewChild(FocusTrapDirective) focusTrap: FocusTrapDirective;\n    @HostBinding(\"class.open\") @Input(\"clrModalOpen\") _open: boolean = false;\n    @Output(\"clrModalOpenChange\") _openChanged: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n    @Input(\"clrModalClosable\") closable: boolean = true;\n    @Input(\"clrModalSize\") size: string;\n    @Input(\"clrModalStaticBackdrop\") staticBackdrop: boolean = false;\n    @Input(\"clrModalSkipAnimation\") skipAnimation: string = \"false\";\n\n    // presently this is only used by wizards\n    @Input(\"clrModalGhostPageState\") ghostPageState: string = \"hidden\";\n    @Input(\"clrModalOverrideScrollService\") bypassScrollService: boolean = false;\n    @Input(\"clrModalPreventClose\") stopClose: boolean = false;\n    @Output(\"clrModalAlternateClose\") altClose: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n    constructor(private _scrollingService: ScrollingService) {}\n\n    get sizeClass(): string {\n        if (this.size) {\n            return \"modal-\" + this.size;\n        } else {\n            return \"\";\n        }\n    }\n\n    // Detect when _open is set to true and set no-scrolling to true\n    ngOnChanges(changes: {[propName: string]: SimpleChange}): void {\n        if (!this.bypassScrollService && changes && changes.hasOwnProperty(\"_open\")) {\n            if (changes._open.currentValue) {\n                this._scrollingService.stopScrolling();\n            } else {\n                this._scrollingService.resumeScrolling();\n            }\n        }\n    }\n\n    ngOnDestroy(): void {\n        this._scrollingService.resumeScrolling();\n    }\n\n    open(): void {\n        if (this._open === true) {\n            return;\n        }\n        this._open = true;\n        this._openChanged.emit(true);\n    }\n\n    @HostListener(\"body:keyup.escape\")\n    close(): void {\n        if (this.stopClose) {\n            this.altClose.emit(false);\n            return;\n        }\n        if (!this.closable || this._open === false) {\n            return;\n        }\n        this._open = false;\n        // todo: remove this after animation bug is fixed https://github.com/angular/angular/issues/15798\n        // this was handled by the fadeDone event below, but that AnimationEvent is not firing in Angular 4.0.\n        this._openChanged.emit(false);\n        // SPECME\n        this.focusTrap.setPreviousFocus();  // Handles moving focus back to the element that had it before.\n    }\n\n    fadeDone(e: AnimationEvent) {\n        if (e.toState === \"void\") {\n            this._openChanged.emit(false);\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule, Type} from \"@angular/core\";\n\nimport {ClrIconModule} from \"../icon/icon.module\";\nimport {ClrFocusTrapModule} from \"../utils/focus-trap/focus-trap.module\";\nimport {ClrModal} from \"./modal\";\n\nexport const CLR_MODAL_DIRECTIVES: Type<any>[] = [ClrModal];\n\n@NgModule({\n    imports: [CommonModule, ClrIconModule, ClrFocusTrapModule],\n    declarations: [CLR_MODAL_DIRECTIVES],\n    exports: [CLR_MODAL_DIRECTIVES]\n})\nexport class ClrModalModule {}\n\n/* tslint:disable variable-name */\n/** @deprecated since 0.11 */\nexport interface Modal extends ClrModal {}\n/** @deprecated since 0.11 */\nexport const Modal = ClrModal;\n/* tslint:enable variable-name */\n/** @deprecated since 0.11 */\nexport const MODAL_DIRECTIVES = CLR_MODAL_DIRECTIVES;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Point} from \"../common/popover\";\n\nexport interface Position {\n    anchorPoint: Point;\n    popoverPoint: Point;\n    offsetY: number;\n    offsetX: number;\n}\n\nexport const SIGNPOST_POSITIONS: {[input: string]: Position} = {\n    \"top-left\": {anchorPoint: Point.TOP_CENTER, popoverPoint: Point.BOTTOM_RIGHT, offsetY: -10, offsetX: 0},\n    \"top-middle\": {anchorPoint: Point.TOP_CENTER, popoverPoint: Point.BOTTOM_CENTER, offsetY: -10, offsetX: 0},\n    \"top-right\": {anchorPoint: Point.TOP_CENTER, popoverPoint: Point.BOTTOM_LEFT, offsetY: -10, offsetX: 0},\n    \"right-top\": {anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_BOTTOM, offsetY: 2, offsetX: 14},\n    \"right-middle\": {anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_CENTER, offsetY: 6, offsetX: 14},\n    \"right-bottom\": {anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_TOP, offsetY: -1, offsetX: 14},\n    \"bottom-right\": {anchorPoint: Point.BOTTOM_CENTER, popoverPoint: Point.TOP_LEFT, offsetY: 9, offsetX: -1},\n    \"bottom-middle\": {anchorPoint: Point.BOTTOM_CENTER, popoverPoint: Point.TOP_CENTER, offsetY: 9, offsetX: 12},\n    \"bottom-left\": {anchorPoint: Point.BOTTOM_CENTER, popoverPoint: Point.TOP_RIGHT, offsetY: 9, offsetX: 0},\n    \"left-bottom\": {anchorPoint: Point.LEFT_CENTER, popoverPoint: Point.RIGHT_TOP, offsetY: 0, offsetX: -14},\n    \"left-middle\": {anchorPoint: Point.LEFT_CENTER, popoverPoint: Point.RIGHT_CENTER, offsetY: 4, offsetX: -14},\n    \"left-top\": {anchorPoint: Point.LEFT_CENTER, popoverPoint: Point.RIGHT_BOTTOM, offsetY: 0, offsetX: -14},\n    \"default\": {anchorPoint: Point.RIGHT_CENTER, popoverPoint: Point.LEFT_CENTER, offsetY: 6, offsetX: 14},\n};\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, ElementRef, Inject, Injector, Input, Optional} from \"@angular/core\";\n\nimport {AbstractPopover} from \"../common/abstract-popover\";\nimport {POPOVER_HOST_ANCHOR} from \"../common/popover-host-anchor.token\";\n\nimport {SIGNPOST_POSITIONS} from \"./signpost-positions\";\n\n// aka where the arrow / pointer is at in relation to the anchor\nconst POSITIONS: string[] = [\n    \"top-left\",\n    \"top-middle\",\n    \"top-right\",\n    \"right-top\",\n    \"right-middle\",  // default\n    \"right-bottom\",\n    \"bottom-right\",\n    \"bottom-middle\",\n    \"bottom-left\",\n    \"left-bottom\",\n    \"left-middle\",\n    \"left-top\",\n];\n\n@Component({\n    selector: \"clr-signpost-content\",\n    template: `\n        <div class=\"signpost-flex-wrap\">\n            <div class=\"popover-pointer\"></div>\n            <div class=\"signpost-content-header\">\n                <button type=\"button\" class=\"signpost-action close\" aria-label=\"Close\" (click)=\"close()\">\n                    <clr-icon aria-hidden=\"true\" shape=\"close\"></clr-icon>\n                </button>\n            </div>\n            <div class=\"signpost-content-body\">\n                <ng-content></ng-content>\n            </div>\n        </div>\n    `,\n    host: {\"[class.signpost-content]\": \"true\"}\n})\nexport class ClrSignpostContent extends AbstractPopover {\n    constructor(injector: Injector, @Optional() @Inject(POPOVER_HOST_ANCHOR) parentHost: ElementRef) {\n        if (!parentHost) {\n            throw new Error(\"clr-signpost-content should only be used inside of a clr-signpost\");\n        }\n        super(injector, parentHost);\n        // Defaults\n        this.position = \"right-middle\";\n        this.closeOnOutsideClick = true;\n    }\n\n    /**********\n     *\n     * @description\n     * Close function that uses the signpost instance to toggle the state of the content popover.\n     *\n     */\n    close() {\n        this.ifOpenService.open = false;\n    }\n\n    private _position: string;\n\n    get position() {\n        return this._position;\n    }\n\n    /*********\n     *\n     * @description\n     * A setter for the position of the ClrSignpostContent popover. This is a combination of the following:\n     * - anchorPoint - where on the trigger to anchor the ClrSignpostContent\n     * - popoverPoint - where on the ClrSignpostContent container to align with the anchorPoint\n     * - offsetY - where on the Y axis to align the ClrSignpostContent so it meets specs\n     * - offsetX - where on the X axis to align the ClrSignpostContent so it meets specs\n     * There are 12 possible positions to place a ClrSignpostContent container:\n     * - top-left\n     * - top-middle\n     * - top-right\n     * - right-top\n     * - right-middle\n     * - right-bottom\n     * - bottom-right\n     * - bottom-middle\n     * - bottom-left\n     * - left-bottom\n     * - left-middle\n     * - left-top\n     *\n     * I think of it as follows for 'top-left' -> CONTAINER_SIDE-SIDE_POSITION. In this case CONTAINER_SIDE is 'top'\n     * meaning the top of the trigger icon (above the icon that hides/shows) the ClrSignpostContent. And, SIDE_POSITION\n     * is 'left' meaning two things: 1) the ClrSignpostContent container extends to the left and 2) the 'arrow/pointer'\n     * linking the SingpostContent to the trigger points down at the horizontal center of the trigger icon.\n     *\n     * @param newPosition\n     */\n    @Input(\"clrPosition\")\n    set position(position: string) {\n        // Ugh\n        this.renderer.removeClass(this.el.nativeElement, this.position);\n        if (position && (POSITIONS.indexOf(position) > -1)) {\n            this._position = position;\n        } else {\n            this._position = \"right-middle\";\n        }\n        // Ugh\n        this.renderer.addClass(this.el.nativeElement, this.position);\n\n        const setPosition = SIGNPOST_POSITIONS[this.position];\n        this.anchorPoint = setPosition.anchorPoint;\n        this.popoverPoint = setPosition.popoverPoint;\n        this.popoverOptions.offsetY = setPosition.offsetY;\n        this.popoverOptions.offsetX = setPosition.offsetX;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule, Type} from \"@angular/core\";\n\nimport {ClrIconModule} from \"../../icon/icon.module\";\nimport {ClrConditionalModule} from \"../../utils/conditional/conditional.module\";\nimport {ClrCommonPopoverModule} from \"../common/popover.module\";\n\nimport {ClrSignpost} from \"./signpost\";\nimport {ClrSignpostContent} from \"./signpost-content\";\nimport {ClrSignpostTrigger} from \"./signpost-trigger\";\n\nexport const CLR_SIGNPOST_DIRECTIVES: Type<any>[] = [ClrSignpost, ClrSignpostContent, ClrSignpostTrigger];\n\n@NgModule({\n    imports: [CommonModule, ClrCommonPopoverModule, ClrIconModule],\n    declarations: [CLR_SIGNPOST_DIRECTIVES],\n    exports: [CLR_SIGNPOST_DIRECTIVES, ClrConditionalModule],\n    providers: []\n})\n\nexport class ClrSignpostModule {}\n\n/* tslint:disable variable-name */\n/** @deprecated since 0.11 */\nexport interface Signpost extends ClrSignpost {}\n/** @deprecated since 0.11 */\nexport const Signpost = ClrSignpost;\n/** @deprecated since 0.11 */\nexport interface SignpostContent extends ClrSignpostContent {}\n/** @deprecated since 0.11 */\nexport const SignpostContent = ClrSignpostContent;\n/** @deprecated since 0.11 */\nexport interface SignpostTrigger extends ClrSignpostTrigger {}\n/** @deprecated since 0.11 */\nexport const SignpostTrigger = ClrSignpostTrigger;\n/* tslint:enable variable-name */\n/** @deprecated since 0.11 */\nexport const SIGNPOST_DIRECTIVES = CLR_SIGNPOST_DIRECTIVES;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, ElementRef} from \"@angular/core\";\nimport {IfOpenService} from \"../../utils/conditional/if-open.service\";\nimport {POPOVER_HOST_ANCHOR} from \"../common/popover-host-anchor.token\";\n\n@Component({\n    selector: \"clr-tooltip\",\n    template: `\n        <ng-content></ng-content>\n    `,\n    host: {\n        \"[class.tooltip]\": \"true\",\n    },\n    providers: [IfOpenService, {provide: POPOVER_HOST_ANCHOR, useExisting: ElementRef}]\n})\nexport class ClrTooltip {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Component, ElementRef, Inject, Injector, Input, Optional} from \"@angular/core\";\nimport {AbstractPopover} from \"../common/abstract-popover\";\nimport {Point} from \"../common/popover\";\nimport {POPOVER_HOST_ANCHOR} from \"../common/popover-host-anchor.token\";\n\nconst POSITIONS: string[] = [\"bottom-left\", \"bottom-right\", \"top-left\", \"top-right\", \"right\", \"left\"];\n\nconst SIZES: string[] = [\"xs\", \"sm\", \"md\", \"lg\"];\n\n@Component({\n    selector: \"clr-tooltip-content\",\n    template: `\n        <ng-content></ng-content>\n    `,\n    host: {\n        \"[class.tooltip-content]\": \"true\",\n        // I'm giving up on animation, they did not work before and will not work now.\n        // Too many conflicts with Clarity UI.\n        \"[style.opacity]\": \"1\"\n    }\n})\nexport class ClrTooltipContent extends AbstractPopover {\n    constructor(injector: Injector, @Optional() @Inject(POPOVER_HOST_ANCHOR) parentHost: ElementRef) {\n        if (!parentHost) {\n            throw new Error(\"clr-tooltip-content should only be used inside of a clr-tooltip\");\n        }\n        super(injector, parentHost);\n        // Defaults\n        this.position = \"right\";\n        this.size = \"sm\";\n    }\n\n    private _position: string;\n\n    get position() {\n        return this._position;\n    }\n\n    @Input(\"clrPosition\")\n    set position(position: string) {\n        // Ugh\n        this.renderer.removeClass(this.el.nativeElement, \"tooltip-\" + this.position);\n        if (position && (POSITIONS.indexOf(position) > -1)) {\n            this._position = position;\n        } else {\n            this._position = \"right\";\n        }\n        // Ugh\n        this.renderer.addClass(this.el.nativeElement, \"tooltip-\" + this.position);\n\n        // set the popover values based on direction\n        switch (position) {\n            case (\"top-right\"):\n                this.anchorPoint = Point.TOP_CENTER;\n                this.popoverPoint = Point.LEFT_BOTTOM;\n                break;\n            case (\"top-left\"):\n                this.anchorPoint = Point.TOP_CENTER;\n                this.popoverPoint = Point.RIGHT_BOTTOM;\n                break;\n            case (\"bottom-right\"):\n                this.anchorPoint = Point.BOTTOM_CENTER;\n                this.popoverPoint = Point.LEFT_TOP;\n                break;\n            case (\"bottom-left\"):\n                this.anchorPoint = Point.BOTTOM_CENTER;\n                this.popoverPoint = Point.RIGHT_TOP;\n                break;\n            case (\"right\"):\n                this.anchorPoint = Point.RIGHT_CENTER;\n                this.popoverPoint = Point.LEFT_TOP;\n                break;\n            case (\"left\"):\n                this.anchorPoint = Point.LEFT_CENTER;\n                this.popoverPoint = Point.RIGHT_TOP;\n                break;\n            default:\n                this.anchorPoint = Point.RIGHT_CENTER;\n                this.popoverPoint = Point.LEFT_TOP;\n                break;\n        }\n    }\n\n    private _size: string;\n\n    get size() {\n        return this._size;\n    }\n\n    @Input(\"clrSize\")\n    set size(size: string) {\n        // Ugh\n        this.renderer.removeClass(this.el.nativeElement, \"tooltip-\" + this.size);\n        if (size && (SIZES.indexOf(size) > -1)) {\n            this._size = size;\n        } else {\n            this._size = \"sm\";\n        }\n        // Ugh\n        this.renderer.addClass(this.el.nativeElement, \"tooltip-\" + this.size);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, HostListener} from \"@angular/core\";\nimport {IfOpenService} from \"../../utils/conditional/if-open.service\";\n\n@Directive({selector: \"[clrTooltipTrigger]\", host: {\"[attr.tabindex]\": \"0\"}})\nexport class ClrTooltipTrigger {\n    constructor(private ifOpenService: IfOpenService) {}\n\n    @HostListener(\"mouseenter\") @HostListener(\"focus\")\n    showTooltip(): void {\n        this.ifOpenService.open = true;\n    }\n\n    @HostListener(\"mouseleave\") @HostListener(\"blur\")\n    hideTooltip(): void {\n        this.ifOpenService.open = false;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule, Type} from \"@angular/core\";\n\nimport {ClrIconModule} from \"../../icon/icon.module\";\nimport {ClrConditionalModule} from \"../../utils/conditional/conditional.module\";\nimport {ClrCommonPopoverModule} from \"../common/popover.module\";\n\nimport {ClrTooltip} from \"./tooltip\";\nimport {ClrTooltipContent} from \"./tooltip-content\";\nimport {ClrTooltipTrigger} from \"./tooltip-trigger\";\n\nexport const CLR_TOOLTIP_DIRECTIVES: Type<any>[] = [ClrTooltip, ClrTooltipTrigger, ClrTooltipContent];\n\n@NgModule({\n    imports: [CommonModule, ClrCommonPopoverModule],\n    declarations: [CLR_TOOLTIP_DIRECTIVES],\n    exports: [CLR_TOOLTIP_DIRECTIVES, ClrConditionalModule, ClrIconModule]\n})\nexport class ClrTooltipModule {}\n\n/* tslint:disable variable-name */\n/** @deprecated since 0.11 */\nexport interface Tooltip extends ClrTooltip {}\n/** @deprecated since 0.11 */\nexport const Tooltip = ClrTooltip;\n/** @deprecated since 0.11 */\nexport interface TooltipContent extends ClrTooltipContent {}\n/** @deprecated since 0.11 */\nexport const TooltipContent = ClrTooltipContent;\n/** @deprecated since 0.11 */\nexport interface TooltipTrigger extends ClrTooltipTrigger {}\n/** @deprecated since 0.11 */\nexport const TooltipTrigger = ClrTooltipTrigger;\n/* tslint:enable variable-name */\n/** @deprecated since 0.11 */\nexport const TOOLTIP_DIRECTIVES = CLR_TOOLTIP_DIRECTIVES;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {NgModule} from \"@angular/core\";\n\nimport {ClrDropdownModule} from \"./dropdown/dropdown.module\";\nimport {ClrSignpostModule} from \"./signpost/signpost.module\";\nimport {ClrTooltipModule} from \"./tooltip/tooltip.module\";\n\n@NgModule({exports: [ClrDropdownModule, ClrSignpostModule, ClrTooltipModule]})\nexport class ClrPopoverModule {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Injectable} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\n\n@Injectable()\nexport class ButtonHubService {\n    public buttonsReady: boolean = false;\n\n    private _previousBtnClicked = new Subject<any>();\n    public get previousBtnClicked(): Observable<any> {\n        return this._previousBtnClicked.asObservable();\n    }\n\n    private _nextBtnClicked = new Subject<any>();\n    public get nextBtnClicked(): Observable<any> {\n        return this._nextBtnClicked.asObservable();\n    }\n\n    private _dangerBtnClicked = new Subject<any>();\n    public get dangerBtnClicked(): Observable<any> {\n        return this._dangerBtnClicked.asObservable();\n    }\n\n    private _cancelBtnClicked = new Subject<any>();\n    public get cancelBtnClicked(): Observable<any> {\n        return this._cancelBtnClicked.asObservable();\n    }\n\n    private _finishBtnClicked = new Subject<any>();\n    public get finishBtnClicked(): Observable<any> {\n        return this._finishBtnClicked.asObservable();\n    }\n\n    private _customBtnClicked = new Subject<any>();\n    public get customBtnClicked(): Observable<any> {\n        return this._customBtnClicked.asObservable();\n    }\n\n    public buttonClicked(buttonType: string): void {\n        if (\"previous\" === buttonType) {\n            this._previousBtnClicked.next();\n        } else if (\"next\" === buttonType) {\n            this._nextBtnClicked.next();\n        } else if (\"finish\" === buttonType) {\n            this._finishBtnClicked.next();\n        } else if (\"danger\" === buttonType) {\n            this._dangerBtnClicked.next();\n        } else if (\"cancel\" === buttonType) {\n            this._cancelBtnClicked.next();\n        } else {\n            this._customBtnClicked.next(buttonType);\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Injectable, QueryList} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\n\nimport {ClrWizardPage} from \"../wizard-page\";\n\n/**\n * PageCollectionService manages the collection of pages assigned to the wizard and offers\n * a number of functions useful across the wizards providers and subcomponents -- all related\n * to essentially lookups on the collection of pages.\n *\n * The easiest way to access PageCollectionService is via the wizard. The\n * following example would allow you to access your instance of the wizard from your host\n * component and thereby access the page collection via YourHostComponent.wizard.pageCollection.\n *\n * @example\n * <clr-wizard #wizard ...>\n *\n * @example\n * export class YourHostComponent {\n *   @ViewChild(\"wizard\") wizard: Wizard;\n *   ...\n * }\n *\n * The heart of the page collection is the query list of pages, which it is assigned as a\n * reference to the Wizard.pages QueryList when the wizard is created.\n *\n */\n@Injectable()\nexport class PageCollectionService {\n    /**\n     * A reference to the Wizard.pages QueryList.\n     *\n     * Populated when the wizard is created.\n     *\n     * @memberof PageCollectionService\n     */\n    public pages: QueryList<ClrWizardPage>;\n\n    /**\n     * Converts the PageCollectionService.pages QueryList to an array and returns it.\n     *\n     * Useful for many instances when you would prefer a QueryList to act like an array.\n     *\n     * @memberof PageCollectionService\n     */\n    public get pagesAsArray(): ClrWizardPage[] {\n        return this.pages ? this.pages.toArray() : [];\n    }\n\n    /**\n     * Returns the length of the pages query list.\n     *\n     * @memberof PageCollectionService\n     */\n    public get pagesCount(): number {\n        return this.pages ? this.pages.length : 0;\n    }\n\n    /**\n     * Returns the next-to-last page in the query list of pages. Operates as a getter\n     * so that it isn't working with stale data.\n     *\n     * @memberof PageCollectionService\n     */\n    public get penultimatePage(): ClrWizardPage {\n        const pageCount = this.pagesCount;\n\n        if (pageCount < 2) {\n            return;\n        }\n\n        return this.pagesAsArray[pageCount - 2];\n    }\n\n    /**\n     * Returns the last page in the query list of pages. Operates as a getter\n     * so that it isn't working with stale data.\n     *\n     * @memberof PageCollectionService\n     */\n    public get lastPage(): ClrWizardPage {\n        const pageCount = this.pagesCount;\n\n        if (pageCount < 1) {\n            return;\n        }\n\n        return this.pagesAsArray[pageCount - 1];\n    }\n\n    /**\n     * Returns the first page in the query list of pages. Operates as a getter\n     * so that it isn't working with stale data.\n     *\n     * @memberof PageCollectionService\n     */\n    public get firstPage(): ClrWizardPage {\n        if (!this.pagesCount) {\n            return;\n        }\n\n        return this.pagesAsArray[0];\n    }\n\n    /**\n     * Used mostly internally, but accepts a string ID and returns a ClrWizardPage\n     * object that matches the ID passed. Note that IDs here should include the prefix\n     * \"clr-wizard-page-\".\n     *\n     * Returns the next-to-last page in the query list of pages. Operates as a getter\n     * so that it isn't working with stale data.\n     *\n     * @memberof PageCollectionService\n     */\n    public getPageById(id: string): ClrWizardPage {\n        const foundPages: ClrWizardPage[] = this.pages.filter((page: ClrWizardPage) => id === page.id);\n        return this.checkResults(foundPages, id);\n    }\n\n    /**\n     * Accepts s number as a parameter and treats that number as the index of the page\n     * you're looking for in the collection of pages. Returns a  wizard page object.\n     *\n     * @memberof PageCollectionService\n     */\n    public getPageByIndex(index: number): ClrWizardPage {\n        const pageCount = this.pagesCount;\n        const pagesLastIndex: number = (pageCount > 1) ? pageCount - 1 : 0;\n\n        if (index < 0) {\n            throw new Error(\"Cannot retrieve page with index of \" + index);\n        }\n\n        if (index > pagesLastIndex) {\n            throw new Error(\"Page index is greater than length of pages array.\");\n        }\n\n        return this.pagesAsArray[index];\n    }\n\n    /**\n     * Takes a wizard page object as a parameter and returns its index in the\n     * collection of pages.\n     *\n     * @memberof PageCollectionService\n     */\n    public getPageIndex(page: ClrWizardPage): number {\n        const index = this.pagesAsArray.indexOf(page);\n\n        if (index < 0) {\n            throw new Error(\"Requested page cannot be found in collection of pages.\");\n        }\n\n        return index;\n    }\n\n    /**\n     * Consolidates guard logic that prevents a couple of unfortunate edge cases with\n     * look ups on the collection of pages.\n     *\n     * @memberof PageCollectionService\n     */\n    private checkResults(results: ClrWizardPage[], requestedPageId: string) {\n        const foundPagesCount: number = results.length || 0;\n\n        if (foundPagesCount > 1) {\n            throw new Error(\"More than one page has the requested id \" + requestedPageId + \".\");\n        } else if (foundPagesCount < 1) {\n            throw new Error(\"No page can be found with the id \" + requestedPageId + \".\");\n        } else {\n            return results[0];\n        }\n    }\n\n    /**\n     * Accepts two numeric indexes and returns an array of wizard page objects that include\n     * all wizard pages in the page collection from the first index to the second.\n     *\n     * @memberof PageCollectionService\n     */\n    public pageRange(start: number, end: number): ClrWizardPage[] {\n        let pages: ClrWizardPage[] = [];\n\n        if (start < 0 || end < 0) {\n            return [];\n        }\n\n        if (start === null || typeof start === undefined || isNaN(start)) {\n            return [];\n        }\n\n        if (end === null || typeof end === undefined || isNaN(end)) {\n            return [];\n        }\n\n\n        if (end > this.pagesCount) {\n            end = this.pagesCount;\n        }\n\n        pages = this.pagesAsArray;\n\n        if ((end - start) === 0) {\n            // just return the one page they want\n            return [this.getPageByIndex(start)];\n        }\n\n        // slice end does not include item referenced by end index, which is weird for users\n        // incrementing end index here to correct that so users and other methods\n        // don't have to think about it\n        end = end + 1;\n\n        // slice does not return the last one in the range but it does include the first one\n        // does not modify original array\n        return pages.slice(start, end);\n    }\n\n    /**\n     * Accepts two wizard page objects and returns those page objects with all other page\n     * objects between them in the page collection. It doesn't care which page is ahead of the\n     * other in the parameters. It will be smart enough to figure that out  on its own.\n     *\n     * @memberof PageCollectionService\n     */\n    public getPageRangeFromPages(page: ClrWizardPage, otherPage: ClrWizardPage): ClrWizardPage[] {\n        const pageIndex = this.getPageIndex(page);\n        const otherPageIndex = this.getPageIndex(otherPage);\n        let startIndex: number;\n        let endIndex: number;\n\n        if (pageIndex <= otherPageIndex) {\n            startIndex = pageIndex;\n            endIndex = otherPageIndex;\n        } else {\n            startIndex = otherPageIndex;\n            endIndex = pageIndex;\n        }\n        return this.pageRange(startIndex, endIndex);\n    }\n\n    /**\n     * Takes a wizard page object as a parameter and returns the wizard page object of\n     * the page immediately before it in the page collection. Returns null if there is\n     * no page before the page it is passed.\n     *\n     * @memberof PageCollectionService\n     */\n    public getPreviousPage(page: ClrWizardPage) {\n        const myPageIndex = this.getPageIndex(page);\n        const previousPageIndex = myPageIndex - 1;\n        if (previousPageIndex < 0) {\n            return null;\n        }\n        return this.getPageByIndex(previousPageIndex);\n    }\n\n    /**\n     * Accepts a wizard page object as a parameter and returns a Boolean that says if\n     * the page you sent it is complete.\n     *\n     * @memberof PageCollectionService\n     */\n    public previousPageIsCompleted(page: ClrWizardPage) {\n        let previousPage: ClrWizardPage;\n\n        if (!page) {\n            return false;\n        }\n\n        previousPage = this.getPreviousPage(page);\n\n        if (null === previousPage) {\n            // page is the first page. no previous page.\n            return true;\n        }\n\n        return previousPage.completed;\n    }\n\n    /**\n     * Takes a wizard page object as a parameter and returns the wizard page object of\n     * the page immediately after it in the page collection. Returns null if there is\n     * no page after the page it is passed.\n     *\n     * @memberof PageCollectionService\n     */\n    public getNextPage(page: ClrWizardPage) {\n        const myPageIndex = this.getPageIndex(page);\n        const nextPageIndex = myPageIndex + 1;\n\n        if (nextPageIndex >= this.pagesAsArray.length) {\n            return null;\n        }\n        return this.getPageByIndex(nextPageIndex);\n    }\n\n    /**\n     * Takes a wizard page object as a parameter and generates a step item id from the\n     * page ID. Returns the generated step item ID as a string.\n     *\n     * @memberof PageCollectionService\n     */\n    public getStepItemIdForPage(page: ClrWizardPage) {\n        const pageId = page.id;\n        const pageIdParts = pageId.split(\"-\").reverse();\n\n        pageIdParts[1] = \"step\";\n        return pageIdParts.reverse().join(\"-\");\n    }\n\n    /**\n     * Generally only used internally to mark that a specific page has been \"committed\".\n     * This involves marking the page complete and firing the ClrWizardPage.onCommit\n     * (clrWizardPageOnCommit) output. Takes the wizard page object that you intend to\n     * mark completed as a parameter.\n     *\n     * @memberof PageCollectionService\n     */\n    public commitPage(page: ClrWizardPage) {\n        const pageHasOverrides = page.stopNext || page.preventDefault;\n        page.completed = true;\n\n        if (!pageHasOverrides) {\n            // prevent loop of event emission; alternate flows work off\n            // of event emitters this is how they break that cycle.\n            page.onCommit.emit(page.id);\n        }\n    }\n\n    // used by the navService to navigate back to first possible step after\n    // pages are reset\n\n    /**\n     *\n     * @memberof PageCollectionService\n     */\n    private _pagesReset = new Subject<boolean>();\n\n    /**\n     * An observable that the navigation service listens to in order to know when\n     * the page collection completed states have been reset to false so that way it\n     * can also reset the navigation to make the first page in the page collection\n     * current/active.\n     *\n     * @memberof PageCollectionService\n     */\n    public get pagesReset(): Observable<boolean> {\n        return this._pagesReset.asObservable();\n    }\n\n    /**\n     * Sets all completed states of the pages in the page collection to false and\n     * notifies the navigation service to likewise reset the navigation.\n     *\n     * @memberof PageCollectionService\n     */\n    public reset() {\n        this.pagesAsArray.forEach((page: ClrWizardPage) => {\n            page.completed = false;\n        });\n        this._pagesReset.next(true);\n    }\n\n    /**\n     * Rolls through all the pages in the page collection to make sure there are no\n     * incomplete pages sandwiched between completed pages in the workflow. Identifies\n     * the first incomplete page index and sets all pages behind it to a completed\n     * state of false.\n     *\n     * @memberof PageCollectionService\n     */\n    public updateCompletedStates(): void {\n        const firstIncompleteIndex = this.findFirstIncompletePageIndex();\n\n        if (firstIncompleteIndex === this.pagesAsArray.length - 1) {\n            // all complete no need to do anything\n            return;\n        }\n\n        this.pagesAsArray.forEach((page: ClrWizardPage, index: number) => {\n            if (index > firstIncompleteIndex) {\n                page.completed = false;\n            }\n        });\n    }\n\n    /**\n     * Retrieves the index of the first incomplete page in the page collection.\n     *\n     * @memberof PageCollectionService\n     */\n    public findFirstIncompletePageIndex(): number {\n        let returnIndex: number = null;\n        this.pagesAsArray.forEach((page: ClrWizardPage, index: number) => {\n            if (null === returnIndex && false === page.completed) {\n                returnIndex = index;\n            }\n        });\n\n        // fallthrough, all completed, return last page\n        if (null === returnIndex) {\n            returnIndex = this.pagesCount - 1;\n        }\n\n        return returnIndex;\n    }\n\n    public findFirstIncompletePage(): ClrWizardPage {\n        const myIncompleteIndex = this.findFirstIncompletePageIndex();\n        return this.pagesAsArray[myIncompleteIndex];\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Injectable, OnDestroy, TemplateRef} from \"@angular/core\";\nimport {Observable} from \"rxjs/Observable\";\nimport {Subject} from \"rxjs/Subject\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {GHOST_PAGE_ANIMATION} from \"../../modal/utils/ghost-page-animations\";\nimport {ClrWizardPage} from \"../wizard-page\";\n\nimport {ButtonHubService} from \"./button-hub.service\";\nimport {PageCollectionService} from \"./page-collection.service\";\n\n\n/**\n * Performs navigation functions for a wizard and manages the current page. Presented as a\n * separate service to encapsulate the behavior of navigating and completing the wizard so\n * that it can be shared across the wizard and its sub-components.\n *\n * The easiest way to access the navigation service is there a reference on your wizard. The\n * Following example would allow you to access your instance of the wizard from your host\n * component and thereby access the navigation service via YourHostComponent.wizard.navService.\n *\n * @example\n * <clr-wizard #wizard ...>\n *\n * @example\n * export class YourHostComponent {\n *   @ViewChild(\"wizard\") wizard: Wizard;\n *   ...\n * }\n *\n */\n@Injectable()\nexport class WizardNavigationService implements OnDestroy {\n    /**\n     * Is notified when a previous button is clicked in the wizard. Performs checks\n     * before alerting the current page of the button click. Enacts navigation to\n     * the previous page if not overridden at the page level.\n     *\n     * @memberof WizardNavigationService\n     */\n    public previousButtonSubscription: Subscription;\n\n    /**\n     * Is notified when a Next button is clicked in the wizard.\n     *\n     * @memberof WizardNavigationService\n     */\n    public nextButtonSubscription: Subscription;\n\n    /**\n     * Is notified when a danger button is clicked in the wizard.\n     *\n     * @memberof WizardNavigationService\n     */\n    public dangerButtonSubscription: Subscription;\n\n    /**\n     * Is notified when a  finish button is clicked in the wizard.\n     *\n     * @memberof WizardNavigationService\n     */\n    public finishButtonSubscription: Subscription;\n\n    /**\n     * Is notified when a Custom button is clicked in the wizard.\n     *\n     * @memberof WizardNavigationService\n     */\n    public customButtonSubscription: Subscription;\n\n    /**\n     * Is notified when a Cancel button is clicked in the wizard. Notifies the wizard,\n     * which handles all cancel functionality, if cancel is not overridden at the page\n     * level.\n     *\n     * @memberof WizardNavigationService\n     */\n    public cancelButtonSubscription: Subscription;\n\n    /**\n     * Resets navigation to make the first page current when the page collection service\n     * emits an event notifying WizardNavigationService that it has reset all pages\n     * to their pristine, incomplete state.\n     *\n     * @memberof WizardNavigationService\n     */\n    public pagesResetSubscription: Subscription;\n\n    /**\n     * Creates an instance of WizardNavigationService. Also sets up subscriptions\n     * that listen to the button service to determine when a button has been clicked\n     * in the wizard. Is also responsible for taking action when the page collection\n     * requests that navigation be reset to its pristine state.\n     *\n     * @memberof WizardNavigationService\n     */\n    constructor(public pageCollection: PageCollectionService, public buttonService: ButtonHubService) {\n        this.previousButtonSubscription = this.buttonService.previousBtnClicked.subscribe(() => {\n            const currentPage = this.currentPage;\n            if (this.currentPageIsFirst || currentPage.previousStepDisabled) {\n                return;\n            }\n            currentPage.previousButtonClicked.emit(currentPage);\n            if (!currentPage.preventDefault) {\n                this.previous();\n            }\n        });\n\n        this.nextButtonSubscription = this.buttonService.nextBtnClicked.subscribe(() => {\n            this.checkAndCommitCurrentPage(\"next\");\n        });\n\n        this.dangerButtonSubscription = this.buttonService.dangerBtnClicked.subscribe(() => {\n            this.checkAndCommitCurrentPage(\"danger\");\n        });\n\n        this.finishButtonSubscription = this.buttonService.finishBtnClicked.subscribe(() => {\n            this.checkAndCommitCurrentPage(\"finish\");\n        });\n\n        this.customButtonSubscription = this.buttonService.customBtnClicked.subscribe((type: string) => {\n            if (!this.wizardStopNavigation) {\n                this.currentPage.customButtonClicked.emit(type);\n            }\n        });\n\n        this.cancelButtonSubscription = this.buttonService.cancelBtnClicked.subscribe(() => {\n            if (this.wizardStopNavigation) {\n                return;\n            }\n\n            if (this.currentPage.preventDefault) {\n                this.currentPage.pageOnCancel.emit(this.currentPage);\n            } else {\n                this.cancel();\n            }\n        });\n\n        this.pagesResetSubscription = this.pageCollection.pagesReset.subscribe(() => {\n            this.setFirstPageCurrent();\n        });\n    }\n\n\n    /**\n     *\n     * @memberof WizardNavigationService\n     */\n    ngOnDestroy(): void {\n        this.previousButtonSubscription.unsubscribe();\n        this.nextButtonSubscription.unsubscribe();\n        this.dangerButtonSubscription.unsubscribe();\n        this.finishButtonSubscription.unsubscribe();\n        this.customButtonSubscription.unsubscribe();\n        this.cancelButtonSubscription.unsubscribe();\n        this.pagesResetSubscription.unsubscribe();\n    }\n\n\n    /**\n     *\n     * @memberof WizardNavigationService\n     */\n    private _currentChanged = new Subject<ClrWizardPage>();\n\n    /**\n     * An Observable that is predominantly used amongst the subcomponents and services\n     * of the wizard. It is recommended that users listen to the ClrWizardPage.onLoad\n     * (clrWizardPageOnLoad) output instead of this Observable.\n     *\n     * @memberof WizardNavigationService\n     */\n    public get currentPageChanged(): Observable<ClrWizardPage> {\n        // TODO: MAKE SURE EXTERNAL OUTPUTS SAY 'CHANGE' NOT 'CHANGED'\n        // A BREAKING CHANGE SO AWAITING MINOR RELEASE\n        return this._currentChanged.asObservable();\n    }\n\n    /**\n     * A Boolean flag used by the ClrWizardPage to avoid a race condition when pages are\n     * loading and there is no current page defined.\n     *\n     * @memberof WizardNavigationService\n     */\n    public navServiceLoaded = false;\n\n    /**\n     * A boolean flag shared across the Wizard subcomponents that follows the value\n     * of the Wizard.forceForward (clrWizardForceForwardNavigation) input. When true,\n     * navigating backwards in the stepnav menu will reset any skipped pages' completed\n     * state to false.\n     *\n     * This is useful when a wizard executes validation on a page-by-page basis when\n     * the next button is clicked.\n     *\n     * @memberof WizardNavigationService\n     */\n    public forceForwardNavigation = false;\n\n    /**\n     * @memberof WizardNavigationService\n     */\n    public get currentPageTitle(): TemplateRef<any> {\n        // when the querylist of pages is empty. this is the first place it fails...\n        if (!this.currentPage) {\n            return null;\n        }\n        return this.currentPage.title;\n    }\n\n    /**\n     * Returns a Boolean that tells you whether or not the current page is the first\n     * page in the Wizard.\n     *\n     * This is helpful for determining whether a page is navigable.\n     *\n     * @memberof WizardNavigationService\n     */\n    public get currentPageIsFirst(): boolean {\n        return this.pageCollection.firstPage === this.currentPage;\n    }\n\n    /**\n     * Returns a Boolean that tells you whether or not the current page is the\n     * next to last page in the Wizard.\n     *\n     * This is used to determine the animation state of ghost pages.\n     *\n     * @memberof WizardNavigationService\n     */\n    public get currentPageIsNextToLast(): boolean {\n        return this.pageCollection.penultimatePage === this.currentPage;\n    }\n\n    /**\n     * Returns a Boolean that tells you whether or not the current page is the\n     * last page in the Wizard.\n     *\n     * This is used to determine the animation state of ghost pages as well as\n     * which buttons should display in the wizard footer.\n     *\n     * @memberof WizardNavigationService\n     */\n    public get currentPageIsLast(): boolean {\n        return this.pageCollection.lastPage === this.currentPage;\n    }\n\n    /**\n     * @memberof WizardNavigationService\n     */\n    private _currentPage: ClrWizardPage;\n\n    /**\n     * Returns the ClrWizardPage object of the current page or null.\n     *\n     * @memberof WizardNavigationService\n     */\n    get currentPage(): ClrWizardPage {\n        if (!this._currentPage) {\n            return null;\n        }\n        return this._currentPage;\n    }\n\n    /**\n     * Accepts a ClrWizardPage object, since that object to be the current/active\n     * page in the wizard, and emits the ClrWizardPage.onLoad (clrWizardPageOnLoad)\n     * event for that page.\n     *\n     * Note that all of this work is bypassed if the ClrWizardPage object is already\n     * the current page.\n     *\n     * @memberof WizardNavigationService\n     */\n    set currentPage(page: ClrWizardPage) {\n        if (this._currentPage !== page && !this.wizardStopNavigation) {\n            this._currentPage = page;\n            page.onLoad.emit(page.id);\n            this._currentChanged.next(page);\n        }\n    }\n\n    /**\n     * (DEPRECATED) A legacy means of setting the current page in the wizard.\n     * Deprecated in 0.9.4. Accepts a ClrWizardPage object as a parameter and then\n     * tries to set that page to be the current page in the wizard.\n     *\n     * @memberof WizardNavigationService\n     */\n    public setCurrentPage(page: ClrWizardPage): void {\n        this.currentPage = page;\n    }\n\n    /**\n     * @memberof WizardNavigationService\n     */\n    private _movedToNextPage = new Subject<boolean>();\n\n    /**\n     * An observable used internally to alert the wizard that forward navigation\n     * has occurred. It is recommended that you use the Wizard.onMoveNext\n     * (clrWizardOnNext) output instead of this one.\n     *\n     * @memberof WizardNavigationService\n     */\n    public get movedToNextPage(): Observable<boolean> {\n        return this._movedToNextPage.asObservable();\n    }\n\n    /**\n     * @memberof WizardNavigationService\n     */\n    private _wizardFinished = new Subject<boolean>();\n\n    /**\n     * An observable used internally to alert the wizard that the nav service\n     * has approved completion of the wizard.\n     *\n     * It is recommended that you use the Wizard.wizardFinished (clrWizardOnFinish)\n     * output instead of this one.\n     *\n     * @memberof WizardNavigationService\n     */\n    public get wizardFinished(): Observable<boolean> {\n        return this._wizardFinished.asObservable();\n    }\n\n    /**\n     * This is a public function that can be used to programmatically advance\n     * the user to the next page.\n     *\n     * When invoked, this method will move the wizard to the next page after\n     * successful validation. Note that this method goes through all checks\n     * and event emissions as if Wizard.next(false) had been called.\n     *\n     * In most cases, it makes more sense to use Wizard.next(false).\n     *\n     * @memberof WizardNavigationService\n     */\n    public next(): void {\n        if (this.currentPageIsLast) {\n            this.checkAndCommitCurrentPage(\"finish\");\n            return;\n        }\n\n        this.checkAndCommitCurrentPage(\"next\");\n\n        if (!this.wizardHasAltNext && !this.wizardStopNavigation) {\n            this._movedToNextPage.next(true);\n        }\n    }\n\n    /**\n     * Bypasses checks and most event emissions to force a page to navigate forward.\n     *\n     * Comparable to calling Wizard.next() or Wizard.forceNext().\n     *\n     * @memberof WizardNavigationService\n     */\n    public forceNext(): void {\n        const currentPage: ClrWizardPage = this.currentPage;\n        const nextPage: ClrWizardPage = this.pageCollection.getNextPage(currentPage);\n\n        // catch errant null or undefineds that creep in\n        if (!nextPage) {\n            throw new Error(\"The wizard has no next page to go to.\");\n        }\n\n        if (this.wizardStopNavigation) {\n            return;\n        }\n\n        if (!currentPage.completed) {\n            // this is a state that alt next flows can get themselves in...\n            this.pageCollection.commitPage(currentPage);\n        }\n        this.currentPage = nextPage;\n    }\n\n    /**\n     * Accepts a button/action type as a parameter. Encapsulates all logic for\n     * event emissions, state of the current page, and wizard and page level overrides.\n     *\n     * Avoid calling this function directly unless you really know what you're doing.\n     *\n     * @memberof WizardNavigationService\n     */\n    public checkAndCommitCurrentPage(buttonType: string): void {\n        const currentPage: ClrWizardPage = this.currentPage;\n        let iAmTheLastPage: boolean;\n\n        let isNext: boolean;\n        let isDanger: boolean;\n        let isDangerNext: boolean;\n        let isDangerFinish: boolean;\n        let isFinish: boolean;\n\n        if (!currentPage.readyToComplete || this.wizardStopNavigation) {\n            return;\n        }\n\n        iAmTheLastPage = this.currentPageIsLast;\n\n        isNext = buttonType === \"next\";\n        isDanger = buttonType === \"danger\";\n        isDangerNext = isDanger && !iAmTheLastPage;\n        isDangerFinish = isDanger && iAmTheLastPage;\n        isFinish = buttonType === \"finish\" || isDangerFinish;\n\n        if (isFinish && !iAmTheLastPage) {\n            return;\n        }\n\n        currentPage.primaryButtonClicked.emit(buttonType);\n\n        if (isFinish) {\n            currentPage.finishButtonClicked.emit(currentPage);\n        } else if (isDanger) {\n            currentPage.dangerButtonClicked.emit();\n        } else if (isNext) {\n            currentPage.nextButtonClicked.emit();\n        }\n\n        if (currentPage.stopNext || currentPage.preventDefault) {\n            currentPage.onCommit.emit(currentPage.id);\n            return;\n        }\n\n        // order is very important with these emitters!\n        if (isFinish) {\n            // mark page as complete\n            if (!this.wizardHasAltNext) {\n                this.pageCollection.commitPage(currentPage);\n            }\n            this._wizardFinished.next();\n        }\n\n        if (this.wizardHasAltNext) {\n            this.pageCollection.commitPage(currentPage);\n\n            if (isNext || isDangerNext) {\n                this._movedToNextPage.next(true);\n            }\n            // jump out here, no matter what type we're looking at\n            return;\n        }\n\n        if (isNext || isDangerNext) {\n            this.forceNext();\n        }\n    }\n\n    /**\n     * This is a public function that can be used to programmatically conclude\n     * the wizard.\n     *\n     * When invoked, this method will  initiate the work involved with finalizing\n     * and finishing the wizard workflow. Note that this method goes through all\n     * checks and event emissions as if Wizard.finish(false) had been called.\n     *\n     * In most cases, it makes more sense to use Wizard.finish(false).\n     *\n     * @memberof WizardNavigationService\n     */\n    public finish(): void {\n        this.checkAndCommitCurrentPage(\"finish\");\n    }\n\n    /**\n     * @memberof WizardNavigationService\n     */\n    private _movedToPreviousPage = new Subject<boolean>();\n\n    /**\n     * Notifies the wizard when backwards navigation has occurred via the\n     * previous button.\n     *\n     * @memberof WizardNavigationService\n     */\n    public get movedToPreviousPage(): Observable<boolean> {\n        return this._movedToPreviousPage.asObservable();\n    }\n\n    /**\n     * Programmatically moves the wizard to the page before the current page.\n     *\n     * In most instances, it makes more sense to call Wizard.previous()\n     * which does the same thing.\n     *\n     * @memberof WizardNavigationService\n     */\n    public previous(): void {\n        let previousPage: ClrWizardPage;\n\n        if (this.currentPageIsFirst || this.wizardStopNavigation) {\n            return;\n        }\n\n        previousPage = this.pageCollection.getPreviousPage(this.currentPage);\n\n        if (!previousPage) {\n            return;\n        }\n\n        this._movedToPreviousPage.next(true);\n\n        if (this.forceForwardNavigation) {\n            this.currentPage.completed = false;\n        }\n\n        this.currentPage = previousPage;\n    }\n\n    /**\n     * @memberof WizardNavigationService\n     */\n    private _cancelWizard = new Subject<any>();\n\n    /**\n     * Notifies the wizard that a user is trying to cancel it.\n     *\n     * @memberof WizardNavigationService\n     */\n    public get notifyWizardCancel(): Observable<any> {\n        return this._cancelWizard.asObservable();\n    }\n\n    /**\n     * Allows a hook into the cancel workflow of the wizard from the nav service. Note that\n     * this route goes through all checks and event emissions as if a cancel button had\n     * been clicked.\n     *\n     * In most cases, users looking for a hook into the cancel routine are actually looking\n     * for a way to close the wizard from their host component because they have prevented\n     * the default cancel action.\n     *\n     * In this instance, it is recommended that you use Wizard.close() to avoid any event\n     * emission loop resulting from an event handler calling back into routine that will\n     * again evoke the events it handles.\n     *\n     * @memberof WizardNavigationService\n     */\n    public cancel(): void {\n        this._cancelWizard.next();\n    }\n\n    /**\n     * A boolean flag shared across the Wizard subcomponents that follows the value\n     * of the Wizard.stopCancel (clrWizardPreventDefaultCancel) input. When true, the cancel\n     * routine is subverted and must be reinstated in the host component calling Wizard.close()\n     * at some point.\n     *\n     * @memberof WizardNavigationService\n     */\n    public wizardHasAltCancel: boolean = false;\n\n    /**\n     * A boolean flag shared across the Wizard subcomponents that follows the value\n     * of the Wizard.stopNext (clrWizardPreventDefaultNext) input. When true, the next and finish\n     * routines are subverted and must be reinstated in the host component calling Wizard.next(),\n     * Wizard.forceNext(), Wizard.finish(), or Wizard.forceFinish().\n     *\n     * @memberof WizardNavigationService\n     */\n    public wizardHasAltNext: boolean = false;\n\n    /**\n     * A boolean flag shared across the Wizard subcomponents that follows the value\n     * of the Wizard.stopNavigation (clrWizardPreventNavigation) input. When true, all\n     * navigational elements in the wizard are disabled.\n     *\n     * This is intended to freeze the wizard in place. Events are not fired so this is\n     * not a way to implement alternate functionality for navigation.\n     *\n     * @memberof WizardNavigationService\n     */\n    public wizardStopNavigation: boolean = false;\n\n    /**\n     * A boolean flag shared with the stepnav items that prevents user clicks on\n     * stepnav items from navigating the wizard.\n     *\n     * @memberof WizardNavigationService\n     */\n    public wizardDisableStepnav: boolean = false;\n\n    /**\n     * Performs all required checks to determine if a user can navigate to a page. Checking at each\n     * point if a page is navigable -- completed where the page immediately after the last completed\n     * page.\n     *\n     * Takes two parameters. The first one must be either the ClrWizardPage object or the ID of the\n     * ClrWizardPage object that you want to make the current page.\n     *\n     * The second parameter is optional and is a Boolean flag for \"lazy completion\". What this means\n     * is the Wizard will mark all pages between the current page and the page you want to navigate\n     * to as completed. This is useful for informational wizards that do not require user action,\n     * allowing an easy means for users to jump ahead.\n     *\n     * To avoid checks on navigation, use ClrWizardPage.makeCurrent() instead.\n     *\n     * @memberof WizardNavigationService\n     */\n    public goTo(pageToGoToOrId: any, lazyComplete: boolean = false) {\n        let pageToGoTo: ClrWizardPage;\n        let currentPage: ClrWizardPage;\n        let myPages: PageCollectionService;\n        let pagesToCheck: ClrWizardPage[];\n        let okayToMove: boolean = true;\n        let goingForward: boolean;\n        let currentPageIndex: number;\n        let goToPageIndex: number;\n\n        myPages = this.pageCollection;\n        pageToGoTo = (typeof pageToGoToOrId === \"string\") ? myPages.getPageById(pageToGoToOrId) : pageToGoToOrId;\n        currentPage = this.currentPage;\n\n        // no point in going to the current page. you're there already!\n        // also hard block on any navigation when stopNavigation is true\n        if (pageToGoTo === currentPage || this.wizardStopNavigation) {\n            return;\n        }\n\n        currentPageIndex = myPages.getPageIndex(currentPage);\n        goToPageIndex = myPages.getPageIndex(pageToGoTo);\n        goingForward = (goToPageIndex > currentPageIndex);\n        pagesToCheck = myPages.getPageRangeFromPages(this.currentPage, pageToGoTo);\n\n        okayToMove = lazyComplete || this.canGoTo(pagesToCheck);\n\n        if (!okayToMove) {\n            return;\n        }\n\n        if (goingForward && lazyComplete) {\n            pagesToCheck.forEach((page: ClrWizardPage) => {\n                if (page !== pageToGoTo) {\n                    page.completed = true;\n                }\n            });\n        } else if (!goingForward && this.forceForwardNavigation) {\n            pagesToCheck.forEach((page: ClrWizardPage) => {\n                page.completed = false;\n            });\n        }\n\n        this.currentPage = pageToGoTo;\n    }\n\n    /**\n     * Accepts a range of ClrWizardPage objects as a parameter. Performs the work of checking\n     * those objects to determine if navigation can be accomplished.\n     *\n     * @memberof WizardNavigationService\n     */\n    public canGoTo(pagesToCheck: ClrWizardPage[]): boolean {\n        let okayToMove = true;\n        const myPages = this.pageCollection;\n\n        // previous page can be important when moving because if it's completed it\n        // allows us to move to the page even if it's incomplete...\n        let previousPagePasses: boolean;\n\n        if (!pagesToCheck || pagesToCheck.length < 1) {\n            return false;\n        }\n\n        pagesToCheck.forEach((page: ClrWizardPage) => {\n            let previousPage: ClrWizardPage;\n\n            if (!okayToMove) {\n                return;\n            }\n\n            if (page.completed) {\n                // default is true. just jump out instead of complicating it.\n                return;\n            }\n\n            // so we know our page is not completed...\n            previousPage = myPages.getPageIndex(page) > 0 ? myPages.getPreviousPage(page) : null;\n            previousPagePasses = (previousPage === null) || (previousPage.completed === true);\n\n            // we are false if not the current page AND previous page is not completed\n            // (but must have a previous page)\n            if (!page.current && !previousPagePasses) {\n                okayToMove = false;\n            }\n            // falls through to true as default\n        });\n\n        return okayToMove;\n    }\n\n\n    /**\n     * Looks through the collection of pages to find the first one that is incomplete\n     * and makes that page the current/active page.\n     *\n     * @memberof WizardNavigationService\n     */\n    public setLastEnabledPageCurrent(): void {\n        const allPages: ClrWizardPage[] = this.pageCollection.pagesAsArray;\n        let lastCompletedPageIndex: number = null;\n\n        allPages.forEach((page: ClrWizardPage, index: number) => {\n            if (page.completed) {\n                lastCompletedPageIndex = index;\n            }\n        });\n\n        if (lastCompletedPageIndex === null) {\n            // always is at least the first item...\n            lastCompletedPageIndex = 0;\n        } else if ((lastCompletedPageIndex + 1) < allPages.length) {\n            lastCompletedPageIndex = lastCompletedPageIndex + 1;\n        }\n\n        this.currentPage = allPages[lastCompletedPageIndex];\n    }\n\n    /**\n     * Finds the first page in the collection of pages and makes that page the\n     * current/active page.\n     *\n     * @memberof WizardNavigationService\n     */\n    public setFirstPageCurrent(): void {\n        this.currentPage = this.pageCollection.pagesAsArray[0];\n    }\n\n    /**\n     * @memberof WizardNavigationService\n     */\n    private _wizardGhostPageState: string = GHOST_PAGE_ANIMATION.STATES.NO_PAGES;\n\n\n    /**\n     * @memberof WizardNavigationService\n     */\n    public get wizardGhostPageState(): string {\n        return this._wizardGhostPageState;\n    }\n\n    /**\n     * @memberof WizardNavigationService\n     */\n    public set wizardGhostPageState(value: string) {\n        if (this.hideWizardGhostPages) {\n            this._wizardGhostPageState = GHOST_PAGE_ANIMATION.STATES.NO_PAGES;\n        } else {\n            this._wizardGhostPageState = value;\n        }\n    }\n\n    /**\n     * @memberof WizardNavigationService\n     */\n    private _hideWizardGhostPages: boolean = true;\n\n    /**\n     * @memberof WizardNavigationService\n     */\n    public get hideWizardGhostPages(): boolean {\n        return this._hideWizardGhostPages;\n    }\n\n    /**\n     * @memberof WizardNavigationService\n     */\n    public set hideWizardGhostPages(value: boolean) {\n        this._hideWizardGhostPages = value;\n    }\n\n    /**\n     * Updates the stepnav on the left side of the wizard when pages are dynamically\n     * added or removed from the collection of pages.\n     *\n     * @memberof WizardNavigationService\n     */\n    public updateNavigation(): void {\n        let toSetCurrent: ClrWizardPage;\n        let currentPageRemoved: boolean;\n\n        this.pageCollection.updateCompletedStates();\n\n        currentPageRemoved = this.pageCollection.pagesAsArray.indexOf(this.currentPage) < 0;\n        if (currentPageRemoved) {\n            toSetCurrent = this.pageCollection.findFirstIncompletePage();\n            this.currentPage = toSetCurrent;\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Injectable, QueryList} from \"@angular/core\";\nimport {ClrWizardHeaderAction} from \"../wizard-header-action\";\nimport {WizardNavigationService} from \"./wizard-navigation.service\";\n\n@Injectable()\nexport class HeaderActionService {\n    // this service communicates information about the presence/display of header actions\n    // across the wizard\n\n    constructor(public navService: WizardNavigationService) {}\n\n    public wizardHeaderActions: QueryList<ClrWizardHeaderAction>;\n\n    public get wizardHasHeaderActions(): boolean {\n        const wizardHdrActions = this.wizardHeaderActions;\n        if (!wizardHdrActions) {\n            return false;\n        }\n        return wizardHdrActions.toArray().length > 0;\n    }\n\n    public get currentPageHasHeaderActions(): boolean {\n        return this.navService.currentPage ? this.navService.currentPage.hasHeaderActions : false;\n    }\n\n    public get showWizardHeaderActions(): boolean {\n        return !this.currentPageHasHeaderActions && this.wizardHasHeaderActions;\n    }\n\n    public get displayHeaderActionsWrapper(): boolean {\n        return this.currentPageHasHeaderActions || this.wizardHasHeaderActions;\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\n\nlet wizardHeaderActionIndex = 0;\n\n@Component({\n    selector: \"clr-wizard-header-action\",\n    template: `\n        <button \n            type=\"button\"\n            class=\"btn clr-wizard-header-action btn-link\"\n            [id]=\"id\"\n            [class.disabled]=\"disabled\"\n            (click)=\"click()\"\n            [title]=\"title\">\n            <ng-content></ng-content>\n        </button>\n    `,\n    host: {\"class\": \"clr-wizard-header-action-wrapper\"}\n})\nexport class ClrWizardHeaderAction {\n    // title is explanatory text added to the header action\n    @Input(\"title\")\n    title: string = \"\";\n\n    // If our host has an ID attribute, we use this instead of our index.\n    @Input(\"id\")\n    _id: string = (wizardHeaderActionIndex++).toString();\n\n    public get id(): string {\n        return `clr-wizard-header-action-${this._id}`;\n    }\n\n    @Input(\"clrWizardHeaderActionDisabled\") public disabled: boolean = false;\n\n    @Output(\"actionClicked\") headerActionClicked: EventEmitter<string> = new EventEmitter(false);\n\n    click(): void {\n        if (this.disabled) {\n            return;\n        }\n\n        // passing the header action id allows users to have one method that\n        // routes to many different actions based on the type of header action\n        // clicked. this is further aided by users being able to specify ids\n        // for their header actions.\n        this.headerActionClicked.emit(this._id);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Directive, TemplateRef} from \"@angular/core\";\n\n@Directive({selector: \"[clrPageButtons]\"})\nexport class ClrWizardPageButtons {\n    constructor(public pageButtonsTemplateRef: TemplateRef<any>) {}\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Directive, TemplateRef} from \"@angular/core\";\n\n@Directive({selector: \"[clrPageHeaderActions]\"})\nexport class ClrWizardPageHeaderActions {\n    constructor(public pageHeaderActionsTemplateRef: TemplateRef<any>) {}\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Directive, TemplateRef} from \"@angular/core\";\n\n@Directive({selector: \"[clrPageNavTitle]\"})\nexport class ClrWizardPageNavTitle {\n    constructor(public pageNavTitleTemplateRef: TemplateRef<any>) {}\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Directive, TemplateRef} from \"@angular/core\";\n\n@Directive({selector: \"[clrPageTitle]\"})\nexport class ClrWizardPageTitle {\n    constructor(public pageTitleTemplateRef: TemplateRef<any>) {}\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Component, ContentChild, EventEmitter, Input, OnInit, Output, TemplateRef} from \"@angular/core\";\n\nimport {ButtonHubService} from \"./providers/button-hub.service\";\nimport {PageCollectionService} from \"./providers/page-collection.service\";\nimport {WizardNavigationService} from \"./providers/wizard-navigation.service\";\nimport {ClrWizardPageButtons} from \"./wizard-page-buttons\";\nimport {ClrWizardPageHeaderActions} from \"./wizard-page-header-actions\";\nimport {ClrWizardPageNavTitle} from \"./wizard-page-navtitle\";\nimport {ClrWizardPageTitle} from \"./wizard-page-title\";\n\nlet wizardPageIndex = 0;\n\n/**\n * The ClrWizardPage component is responsible for displaying the content of each step\n * in the wizard workflow.\n *\n * ClrWizardPage component has hooks into the navigation service (ClrWizardPage.navService),\n * page collection (ClrWizardPage.pageCollection), and button service\n * (ClrWizardPage.buttonService). These three providers are shared across the components\n * within each instance of a Wizard.\n *\n */\n@Component({\n    selector: \"clr-wizard-page\",\n    template: \"<ng-content></ng-content>\",\n    host: {\n        \"[id]\": \"id\",\n        \"role\": \"tabpanel\",\n        \"[attr.aria-hidden]\": \"!current\",\n        \"[attr.aria-labelledby]\": \"stepItemId\",\n        \"[class.active]\": \"current\",\n        \"[class.clr-wizard-page]\": \"true\"\n    }\n})\nexport class ClrWizardPage implements OnInit {\n    /**\n     * Creates an instance of ClrWizardPage.\n     *\n     * @memberof WizardPage\n     */\n    constructor(private navService: WizardNavigationService, public pageCollection: PageCollectionService,\n                public buttonService: ButtonHubService) {}\n\n    /**\n     * Contains a reference to the page title which is used for a number\n     * of different tasks for display in the wizard.\n     *\n     * @memberof WizardPage\n     *\n     */\n    @ContentChild(ClrWizardPageTitle) public pageTitle: ClrWizardPageTitle;\n\n    /**\n     * Contains a reference to the desired title for the page's step in the\n     * navigation on the left side of the wizard. Can be projected to change the\n     * navigation link's text.\n     *\n     * If not defined, then ClrWizardPage.pageTitle will be displayed in the stepnav.\n     *\n     * @memberof WizardPage\n     *\n     */\n    @ContentChild(ClrWizardPageNavTitle) public pageNavTitle: ClrWizardPageNavTitle;\n\n    /**\n     * Contains a reference to the buttons defined within the page. If not defined,\n     * the wizard defaults to the set of buttons defined as a direct child of the\n     * wizard.\n     *\n     * @memberof WizardPage\n     *\n     */\n    @ContentChild(ClrWizardPageButtons) public _buttons: ClrWizardPageButtons;\n\n    /**\n     * Contains a reference to the header actions defined within the page. If not defined,\n     * the wizard defaults to the set of header actions defined as a direct child of the\n     * wizard.\n     *\n     * @memberof WizardPage\n     *\n     */\n    @ContentChild(ClrWizardPageHeaderActions) public _headerActions: ClrWizardPageHeaderActions;\n\n    /**\n     *\n     * @memberof WizardPage\n     *\n     */\n    private _nextStepDisabled = false;\n\n    /**\n     * A getter that tells whether or not the wizard should be allowed\n     * to move to the next page.\n     *\n     * Useful for in-page validation because it prevents forward navigation\n     * and visibly disables the next button.\n     *\n     * Does not require that you re-implement navigation routines like you\n     * would if you were using ClrWizardPage.preventDefault or\n     * Wizard.preventDefault.\n     *\n     * @memberof WizardPage\n     *\n     */\n    public get nextStepDisabled(): boolean {\n        return this._nextStepDisabled;\n    }\n\n    /**\n     * Sets whether the page should allow forward navigation.\n     *\n     * @memberof WizardPage\n     *\n     */\n    @Input(\"clrWizardPageNextDisabled\")\n    public set nextStepDisabled(val: boolean) {\n        const valBool = !!val;\n        if (valBool !== this._nextStepDisabled) {\n            this._nextStepDisabled = valBool;\n            this.nextStepDisabledChange.emit(valBool);\n        }\n    }\n\n    /**\n     * Emits when the value of ClrWizardPage.nextStepDisabled changes.\n     * Should emit the new value of nextStepDisabled.\n     *\n     * @memberof WizardPage\n     *\n     */\n    @Output(\"clrWizardPageNextDisabledChange\") nextStepDisabledChange: EventEmitter<boolean> = new EventEmitter();\n\n    /**\n     *\n     * @memberof WizardPage\n     *\n     */\n    private _previousStepDisabled = false;\n\n    /**\n     * A getter that tells whether or not the wizard should be allowed\n     * to move to the previous page.\n     *\n     * Useful for in-page validation because it prevents backward navigation\n     * and visibly disables the previous button.\n     *\n     * Does not require that you re-implement navigation routines like you\n     * would if you were using ClrWizardPage.preventDefault or\n     * Wizard.preventDefault.\n     *\n     * @memberof WizardPage\n     *\n     */\n    public get previousStepDisabled(): boolean {\n        return this._previousStepDisabled;\n    }\n\n    /**\n     * Sets whether the page should allow backward navigation.\n     *\n     * @memberof WizardPage\n     *\n     */\n    @Input(\"clrWizardPagePreviousDisabled\")\n    public set previousStepDisabled(val: boolean) {\n        const valBool = !!val;\n        if (valBool !== this._previousStepDisabled) {\n            this._previousStepDisabled = valBool;\n            this.previousStepDisabledChange.emit(valBool);\n        }\n    }\n\n    /**\n     * Emits when the value of ClrWizardPage.previousStepDisabled changes.\n     * Should emit the new value of previousStepDisabled.\n     *\n     * @memberof WizardPage\n     *\n     */\n    @Output(\"clrWizardPagePreviousDisabledChange\")\n    public previousStepDisabledChange: EventEmitter<boolean> = new EventEmitter();\n\n    /**\n     * Overrides all actions from the page level, so you can use an alternate function for\n     * validation or data-munging with a ClrWizardPage.onCommit (clrWizardPageOnCommit output),\n     * ClrWizardPage.onCancel (clrWizardPageOnCancel output), or one\n     * of the granular page-level button click event emitters.\n     *\n     * @memberof WizardPage\n     *\n     */\n    @Input(\"clrWizardPagePreventDefault\") public preventDefault: boolean = false;\n\n    /**\n     *\n     * @memberof WizardPage\n     *\n     */\n    private _stopCancel = false;\n\n    /**\n     * A getter that retrieves whether the page is preventing the cancel action.\n     *\n     * @memberof WizardPage\n     *\n     */\n    public get stopCancel(): boolean {\n        return this._stopCancel;\n    }\n\n    /**\n     * Overrides the cancel action from the page level. Allows you to use an\n     * alternate function for validation or data-munging before cancelling the\n     * wizard when combined with the ClrWizardPage.onCancel\n     * (the clrWizardPageOnCancel output).\n     *\n     * Requires that you manually close the wizard from your host component,\n     * usually with a call to Wizard.forceNext() or wizard.next();\n     *\n     * @memberof ClrWizardPage\n     */\n    @Input(\"clrWizardPagePreventDefaultCancel\")\n    public set stopCancel(val: boolean) {\n        const valBool = !!val;\n        if (valBool !== this._stopCancel) {\n            this._stopCancel = valBool;\n            this.stopCancelChange.emit(valBool);\n        }\n    }\n\n    /**\n     *\n     * @memberof WizardPage\n     *\n     */\n    @Output(\"clrWizardPagePreventDefaultCancelChange\") stopCancelChange: EventEmitter<boolean> = new EventEmitter();\n\n    /**\n     *\n     * @memberof WizardPage\n     *\n     */\n    private _stopNext = false;\n\n    /**\n     * A getter that tells you whether the page is preventing the next action.\n     *\n     * @memberof WizardPage\n     *\n     */\n    public get stopNext(): boolean {\n        return this._stopNext;\n    }\n\n    /**\n     * Overrides forward navigation from the page level. Allows you to use an\n     * alternate function for validation or data-munging before moving the\n     * wizard to the next pagewhen combined with the ClrWizardPage.onCommit\n     * (clrWizardPageOnCommit) or ClrWizardPage.nextButtonClicked\n     * (clrWizardPageNext) outputs.\n     *\n     * Requires that you manually tell the wizard to navigate forward from\n     * the hostComponent, usually with a call to Wizard.forceNext() or\n     * wizard.next();\n     *\n     * @memberof ClrWizardPage\n     */\n    @Input(\"clrWizardPagePreventDefaultNext\")\n    public set stopNext(val: boolean) {\n        const valBool = !!val;\n        if (valBool !== this._stopNext) {\n            this._stopNext = valBool;\n        }\n    }\n\n    /**\n     * An event emitter carried over from a legacy version of ClrWizardPage.\n     * Fires an event on ClrWizardPage whenever the next or finish buttons\n     * are clicked and the page is the current page of the Wizard.\n     *\n     * Note that this does not automatically emit an event when a custom\n     * button is used in place of a next or finish button.\n     *\n     * @memberof WizardPage\n     *\n     */\n    @Output(\"clrWizardPageOnCommit\") onCommit: EventEmitter<string> = new EventEmitter<string>(false);\n\n    /**\n     * Emits an event when ClrWizardPage becomes the current page of the\n     * Wizard.\n     *\n     * @memberof WizardPage\n     *\n     */\n    @Output(\"clrWizardPageOnLoad\") onLoad: EventEmitter<string> = new EventEmitter();\n\n    /**\n     * Emits an event when the ClrWizardPage invokes the cancel routine for the wizard.\n     *\n     * Can be used in conjunction with the ClrWizardPage.stopCancel\n     * (clrWizardPagePreventDefaultCancel) or ClrWizardPage.preventDefault\n     * (clrWizardPagePagePreventDefault) inputs to implement custom cancel\n     * functionality at the page level. This is useful if you would like to do\n     * validation, save data, or warn users before cancelling the wizard.\n     *\n     * Note that this requires you to call Wizard.close() from the host component.\n     * This constitues a full replacement of the cancel functionality.\n     *\n     * @memberof WizardPage\n     *\n     */\n    @Output(\"clrWizardPageOnCancel\") pageOnCancel: EventEmitter<ClrWizardPage> = new EventEmitter();\n\n    /**\n     * Emits an event when the finish button is clicked and the ClrWizardPage is\n     * the wizard's current page.\n     *\n     * Can be used in conjunction with the ClrWizardPage.preventDefault\n     * (clrWizardPagePagePreventDefault) input to implement custom finish\n     * functionality at the page level. This is useful if you would like to do\n     * validation, save data, or warn users before allowing them to complete\n     * the wizard.\n     *\n     * Note that this requires you to call Wizard.finish() or Wizard.forceFinish()\n     * from the host component. This combination creates a full replacement of\n     * the finish functionality.\n     *\n     * @memberof WizardPage\n     *\n     */\n    @Output(\"clrWizardPageFinish\") finishButtonClicked: EventEmitter<ClrWizardPage> = new EventEmitter();\n\n    /**\n     * Emits an event when the previous button is clicked and the ClrWizardPage is\n     * the wizard's current page.\n     *\n     * Can be used in conjunction with the ClrWizardPage.preventDefault\n     * (clrWizardPagePagePreventDefault) input to implement custom backwards\n     * navigation at the page level. This is useful if you would like to do\n     * validation, save data, or warn users before allowing them to go\n     * backwards in the wizard.\n     *\n     * Note that this requires you to call Wizard.previous()\n     * from the host component. This combination creates a full replacement of\n     * the backwards navigation functionality.\n     *\n     * @memberof WizardPage\n     *\n     */\n    @Output(\"clrWizardPagePrevious\") previousButtonClicked: EventEmitter<ClrWizardPage> = new EventEmitter();\n\n    /**\n     * Emits an event when the next button is clicked and the ClrWizardPage is\n     * the wizard's current page.\n     *\n     * Can be used in conjunction with the ClrWizardPage.preventDefault\n     * (clrWizardPagePagePreventDefault) input to implement custom forwards\n     * navigation at the page level. This is useful if you would like to do\n     * validation, save data, or warn users before allowing them to go\n     * to the next page in the wizard.\n     *\n     * Note that this requires you to call Wizard.forceNext() or Wizard.next()\n     * from the host component. This combination creates a full replacement of\n     * the forward navigation functionality.\n     *\n     * @memberof WizardPage\n     *\n     */\n    @Output(\"clrWizardPageNext\") nextButtonClicked: EventEmitter<ClrWizardPage> = new EventEmitter();\n\n    /**\n     * Emits an event when a danger button is clicked and the ClrWizardPage is\n     * the wizard's current page. By default, a danger button will act as\n     * either a \"next\" or \"finish\" button depending on if the ClrWizardPage is the\n     * last page or not.\n     *\n     * Can be used in conjunction with the ClrWizardPage.preventDefault\n     * (clrWizardPagePagePreventDefault) input to implement custom forwards\n     * or finish navigation at the page level when the danger button is clicked.\n     * This is useful if you would like to do validation, save data, or warn\n     * users before allowing them to go to the next page in the wizard or\n     * finish the wizard.\n     *\n     * Note that this requires you to call Wizard.finish(), Wizard.forceFinish(),\n     * Wizard.forceNext() or Wizard.next() from the host component. This\n     * combination creates a full replacement of the forward navigation and\n     * finish functionality.\n     *\n     * @memberof WizardPage\n     *\n     */\n    @Output(\"clrWizardPageDanger\") dangerButtonClicked: EventEmitter<ClrWizardPage> = new EventEmitter();\n\n    /**\n     * Emits an event when a next, finish, or danger button is clicked and the\n     * ClrWizardPage is the wizard's current page.\n     *\n     * Can be used in conjunction with the ClrWizardPage.preventDefault\n     * (clrWizardPagePagePreventDefault) input to implement custom forwards\n     * or finish navigation at the page level, regardless of the type of\n     * primary button.\n     *\n     * This is useful if you would like to do validation, save data, or warn\n     * users before allowing them to go to the next page in the wizard or\n     * finish the wizard.\n     *\n     * Note that this requires you to call Wizard.finish(), Wizard.forceFinish(),\n     * Wizard.forceNext() or Wizard.next() from the host component. This\n     * combination creates a full replacement of the forward navigation and\n     * finish functionality.\n     *\n     * @memberof WizardPage\n     *\n     */\n    @Output(\"clrWizardPagePrimary\") primaryButtonClicked: EventEmitter<string> = new EventEmitter();\n\n    @Output(\"clrWizardPageCustomButton\") customButtonClicked: EventEmitter<string> = new EventEmitter();\n\n    /**\n     * An input value that is used internally to generate the ClrWizardPage ID as\n     * well as the step nav item ID.\n     *\n     * Typed as any because it should be able to accept numbers as well as\n     * strings. Passing an index for wizard whose pages are created with an\n     * ngFor loop is a common use case.\n     *\n     * @memberof WizardPage\n     *\n     */\n    @Input(\"id\")\n    _id: any = (wizardPageIndex++).toString();\n\n    /**\n     * A read-only getter that generates an ID string for the wizard page from\n     * either the value passed to the ClrWizardPage \"id\" input or a wizard page\n     * counter shared across all wizard pages in the application.\n     *\n     * Note that the value passed into the ID input Will be prefixed with\n     * \"clr-wizard-page-\".\n     *\n     * @readonly\n     *\n     * @memberof ClrWizardPage\n     */\n    public get id() {\n        // covers things like null, undefined, false, and empty string\n        // while allowing zero to pass\n        const idIsNonZeroFalsy = (!this._id && this._id !== 0);\n\n        // in addition to non-zero falsy we also want to make sure _id is not a negative\n        // number.\n        if (idIsNonZeroFalsy || this._id < 0) {\n            // guard here in the event that input becomes undefined or null by accident\n            this._id = (wizardPageIndex++).toString();\n        }\n        return `clr-wizard-page-${this._id}`;\n    }\n\n    /**\n     * A read-only getter that serves as a convenience for those who would rather\n     * not think in the terms of !ClrWizardPage.nextStepDisabled. For some use cases,\n     * ClrWizardPage.readyToComplete is more logical and declarative.\n     *\n     * @memberof WizardPage\n     *\n     */\n    public get readyToComplete(): boolean {\n        return !this.nextStepDisabled;\n    }\n\n    /**\n     *\n     * @memberof WizardPage\n     *\n     */\n    private _complete: boolean = false;\n\n    /**\n     * A page is marked as completed if it is both readyToComplete and completed,\n     * as in the next or finish action has been executed while this page was current.\n     *\n     * Note there is and open question about how to handle pages that are marked\n     * complete but who are no longer readyToComplete. This might indicate an error\n     * state for the ClrWizardPage. Currently, the wizard does not acknowledge this state\n     * and only returns that the page is incomplete.\n     *\n     * @memberof WizardPage\n     *\n     */\n    public get completed(): boolean {\n        return this._complete && this.readyToComplete;\n\n        // FOR V2: UNWIND COMPLETED, READYTOCOMPLETE, AND ERRORS\n        // SUCH THAT ERRORS IS ITS OWN INPUT. IF A STEP IS\n        // INCOMPLETE AND ERRORED, ERRORED WILL NOT SHOW.\n        // FIRST QUESTION: AM I GREY OR COLORED?\n        // SECOND QUESTION: AM I GREEN OR RED?\n    }\n\n    /**\n     * A ClrWizardPage can be manually set to completed using this boolean setter.\n     * It is recommended that users rely on the convenience functions in the wizard\n     * and navigation service instead of manually setting pages’ completion state.\n     *\n     * @memberof ClrWizardPage\n     */\n    public set completed(value: boolean) {\n        this._complete = value;\n    }\n\n    /**\n     * Checks with the navigation service to see if it is the current page.\n     *\n     * @memberof WizardPage\n     *\n     */\n    public get current(): boolean {\n        return this.navService.currentPage === this;\n    }\n\n    public get disabled(): boolean {\n        return !this.enabled;\n    }\n\n    /**\n     * A read-only getter that returns whether or not the page is navigable\n     * in the wizard. A wizard page can be navigated to if it is completed\n     * or the page before it is completed.\n     *\n     * This getter handles the logic for enabling or disabling the links in\n     * the step nav on the left Side of the wizard.\n     *\n     * @memberof WizardPage\n     *\n     */\n    public get enabled(): boolean {\n        return this.current || this.completed || this.previousCompleted;\n    }\n\n    /**\n     * A read-only getter that returns whether or not the page before this\n     * ClrWizardPage is completed. This is useful for determining whether or not\n     * a page is navigable if it is not current or already completed.\n     *\n     * @memberof WizardPage\n     *\n     */\n    public get previousCompleted(): boolean {\n        const previousPage = this.pageCollection.getPreviousPage(this);\n\n        if (!previousPage) {\n            return true;\n        }\n\n        return previousPage.completed;\n    }\n\n    /**\n     *\n     * @memberof WizardPage\n     *\n     */\n    public get title(): TemplateRef<any> {\n        return this.pageTitle.pageTitleTemplateRef;\n    }\n\n    /**\n     *\n     * @memberof WizardPage\n     *\n     */\n    public get navTitle(): TemplateRef<any> {\n        if (this.pageNavTitle) {\n            return this.pageNavTitle.pageNavTitleTemplateRef;\n        }\n        return this.pageTitle.pageTitleTemplateRef;\n    }\n\n    /**\n     *\n     * @memberof WizardPage\n     *\n     */\n    public get headerActions(): TemplateRef<any> {\n        if (!this._headerActions) {\n            return;\n        }\n        return this._headerActions.pageHeaderActionsTemplateRef;\n    }\n\n    /**\n     *\n     * @memberof WizardPage\n     *\n     */\n    public get hasHeaderActions(): boolean {\n        return !!this._headerActions;\n    }\n\n    /**\n     *\n     * @memberof WizardPage\n     *\n     */\n    public get buttons(): TemplateRef<any> {\n        if (!this._buttons) {\n            return;\n        }\n        return this._buttons.pageButtonsTemplateRef;\n    }\n\n    /**\n     * A read-only getter that returns a boolean that says whether or\n     * not the ClrWizardPage includes buttons. Used to determine if the\n     * Wizard should override the default button set defined as\n     * its direct children.\n     *\n     * @memberof WizardPage\n     *\n     */\n    public get hasButtons(): boolean {\n        return !!this._buttons;\n    }\n\n    /**\n     * Uses the nav service to make the ClrWizardPage the current page in the\n     * wizard. Bypasses all checks but still emits the ClrWizardPage.onLoad\n     * (clrWizardPageOnLoad) output.\n     *\n     * In most cases, it is better to use the default navigation functions\n     * in Wizard.\n     *\n     * @memberof WizardPage\n     *\n     */\n    public makeCurrent(): void {\n        this.navService.currentPage = this;\n    }\n\n    /**\n     * Links the nav service and establishes the current page if one is not defined.\n     *\n     * @memberof WizardPage\n     *\n     */\n    public ngOnInit(): void {\n        const navService = this.navService;\n        if (!navService.currentPage && !navService.navServiceLoaded) {\n            this.makeCurrent();\n            this.navService.navServiceLoaded = true;\n        }\n    }\n\n    /**\n     * A read-only getter that returns the id used by the step nav item associated with the page.\n     *\n     * ClrWizardPage needs this ID string for aria information.\n     *\n     * @memberof WizardPage\n     *\n     */\n    public get stepItemId(): string {\n        return this.pageCollection.getStepItemIdForPage(this);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {\n    AfterContentInit,\n    Component,\n    ContentChildren,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Input,\n    IterableDiffers,\n    OnDestroy,\n    OnInit,\n    Output,\n    QueryList\n} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {GHOST_PAGE_ANIMATION} from \"../modal/utils/ghost-page-animations\";\n\nimport {ButtonHubService} from \"./providers/button-hub.service\";\nimport {HeaderActionService} from \"./providers/header-actions.service\";\nimport {PageCollectionService} from \"./providers/page-collection.service\";\n// providers\nimport {WizardNavigationService} from \"./providers/wizard-navigation.service\";\nimport {ClrWizardHeaderAction} from \"./wizard-header-action\";\nimport {ClrWizardPage} from \"./wizard-page\";\n\n\n/**\n *\n * The Wizard component\n *\n */\n@Component({\n    selector: \"clr-wizard\",\n    providers: [WizardNavigationService, PageCollectionService, ButtonHubService, HeaderActionService],\n    template: `<!--\n  ~ Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<clr-modal\n    [clrModalOpen]=\"_open\"\n    [clrModalSize]=\"size\"\n    [clrModalClosable]=\"closable\"\n    [clrModalStaticBackdrop]=\"true\"\n    [clrModalSkipAnimation]=\"stopModalAnimations\"\n    [clrModalGhostPageState]=\"ghostPageState\"\n    [clrModalOverrideScrollService]=\"isStatic\"\n    [clrModalPreventClose]=\"true\"\n    (clrModalAlternateClose)=\"modalCancel()\">\n\n    <nav class=\"modal-nav clr-wizard-stepnav-wrapper\">\n        <h3 class=\"clr-wizard-title\"><ng-content select=\"clr-wizard-title\"></ng-content></h3>\n        <clr-wizard-stepnav></clr-wizard-stepnav>\n    </nav>\n\n    <h3 class=\"modal-title\">\n        <span class=\"modal-title-text\">\n            <ng-template [ngTemplateOutlet]=\"navService.currentPageTitle\"></ng-template>\n        </span>\n\n        <div class=\"modal-header-actions-wrapper\" *ngIf=\"headerActionService.displayHeaderActionsWrapper\">\n            <div *ngIf=\"headerActionService.showWizardHeaderActions\">\n                <ng-content select=\"clr-wizard-header-action\"></ng-content>\n            </div>\n            <div *ngIf=\"headerActionService.currentPageHasHeaderActions\">\n                <ng-template [ngTemplateOutlet]=\"navService.currentPage.headerActions\"></ng-template>\n            </div>\n        </div>\n    </h3>\n\n    <div class=\"modal-body\">\n        <main clr-wizard-pages-wrapper class=\"clr-wizard-content\">\n            <ng-content></ng-content>\n        </main>\n    </div>\n    <div class=\"modal-footer clr-wizard-footer\">\n        <div class=\"clr-wizard-footer-buttons\">\n            <div *ngIf=\"navService.currentPage && !navService.currentPage.hasButtons\"\n                class=\"clr-wizard-footer-buttons-wrapper\">\n                <ng-content select=\"clr-wizard-button\"></ng-content>\n            </div>\n            <div *ngIf=\"navService.currentPage && navService.currentPage.hasButtons\"\n                class=\"clr-wizard-footer-buttons-wrapper\">\n                <ng-template [ngTemplateOutlet]=\"navService.currentPage.buttons\"></ng-template>\n            </div>\n        </div>\n    </div>\n</clr-modal>\n`,\n    host: {\n        \"[class.clr-wizard]\": \"true\",\n        \"[class.wizard-md]\": \"size == 'md'\",\n        \"[class.wizard-lg]\": \"size == 'lg'\",\n        \"[class.wizard-xl]\": \"size == 'xl'\",\n        \"[class.lastPage]\": \"navService.currentPageIsLast\",\n        \"[class.clr-wizard--ghosted]\": \"showGhostPages\"\n    }\n})\nexport class ClrWizard implements OnInit, OnDestroy, AfterContentInit, DoCheck {\n    /**\n     * Creates an instance of Wizard.\n     *\n     * @memberof Wizard\n     *\n     */\n    constructor(public navService: WizardNavigationService, public pageCollection: PageCollectionService,\n                public buttonService: ButtonHubService, public headerActionService: HeaderActionService,\n                private elementRef: ElementRef, differs: IterableDiffers) {\n        this.goNextSubscription = this.navService.movedToNextPage.subscribe(() => {\n            this.onMoveNext.emit();\n        });\n\n        this.goPreviousSubscription = this.navService.movedToPreviousPage.subscribe(() => {\n            this.onMovePrevious.emit();\n        });\n\n        this.cancelSubscription = this.navService.notifyWizardCancel.subscribe(() => {\n            this.checkAndCancel();\n        });\n\n        this.wizardFinishedSubscription = this.navService.wizardFinished.subscribe(() => {\n            if (!this.stopNext) {\n                this.forceFinish();\n            }\n            this.wizardFinished.emit();\n        });\n\n        this.differ = differs.find([]).create(null);\n    }\n\n    /**\n     * Used for marking when the collection of wizard pages has been added to or deleted from\n     *\n     * @memberof Wizard\n     *\n     */\n    differ: any;\n\n    /**\n     * Contains the size defined by the clrWizardSize input\n     *\n     * @memberof Wizard\n     *\n     */\n    @Input(\"clrWizardSize\") size: string = \"xl\";\n\n    /**\n     * The property that reveals the ghost pages in the wizard. Set through the\n     * clrWizardShowGhostPages input.\n     *\n     * @memberof Wizard\n     *\n     */\n    @Input(\"clrWizardShowGhostPages\") showGhostPages: boolean = false;\n\n    /**\n     * Resets page completed states when navigating backwards. Can be set using\n     * the clrWizardForceForwardNavigation input.\n     *\n     * @memberof Wizard\n     *\n     */\n    @Input(\"clrWizardForceForwardNavigation\")\n    set forceForward(value: boolean) {\n        this._forceForward = !!value;\n        this.navService.forceForwardNavigation = value;\n    }\n    private _forceForward: boolean = false;\n    get forceForward(): boolean {\n        return this._forceForward;\n    }\n\n    /**\n     * Tells the modal part of the wizard whether it should have a close \"X\"\n     * in the top right corner. Set with the clrWizardClosable input.\n     *\n     * @memberof Wizard\n     *\n     */\n    @Input(\"clrWizardClosable\") closable: boolean = true;\n\n    /**\n     * Toggles open/close of the wizard component. Set using the clrWizardOpen\n     * input.\n     *\n     * @memberof Wizard\n     *\n     */\n    public _open: boolean = false;\n    @Input(\"clrWizardOpen\")\n    set clrWizardOpen(open: boolean) {\n        if (open) {\n            this.buttonService.buttonsReady = true;\n        }\n        this._open = open;\n    }\n\n    /**\n     * Emits when the wizard is opened or closed. Emits through the\n     * clrWizardOpenChange output. Works in conjunction with the\n     * clrWizardOpen binding so you can use...\n     *\n     * <clr-wizard [(clrWizardOpen)]=\"blah\"\n     * ...or...\n     * <clr-wizard [clrWizardOpen]=\"something\" (clrWizardOpenChange)=\"doSomethign($event)\">\n     *\n     * ...for two-way binding.\n     *\n     * @memberof Wizard\n     *\n     */\n    @Output(\"clrWizardOpenChange\") _openChanged: EventEmitter<boolean> = new EventEmitter<boolean>(false);\n\n    /**\n     * Emits when the wizard is canceled. Can be observed through the clrWizardOnCancel\n     * output.\n     *\n     * Can be combined with the clrWizardPreventDefaultCancel input to create\n     * wizard-level custom cancel routines.\n     *\n     * @memberof Wizard\n     *\n     */\n    @Output(\"clrWizardOnCancel\") onCancel: EventEmitter<any> = new EventEmitter<any>(false);\n\n    /**\n     * Emits when the wizard is completed. Can be observed through the clrWizardOnFinish\n     * output.\n     *\n     * Can be combined with the clrWizardPreventDefaultNext input to create\n     * wizard-level custom completion routines.\n     *\n     * @memberof Wizard\n     *\n     */\n    @Output(\"clrWizardOnFinish\") wizardFinished: EventEmitter<any> = new EventEmitter<any>(false);\n\n    /**\n     * Emits when the wizard is reset. See .reset(). Can be observed through\n     * the clrWizardOnReset output.\n     *\n     * @memberof Wizard\n     *\n     */\n    @Output(\"clrWizardOnReset\") onReset: EventEmitter<any> = new EventEmitter<any>(false);\n\n    /**\n     * A QueryList of the pages in the wizard. Note that a QueryList is sort of\n     * like an Array but not really. Note also that pages does not contain\n     * WizardPages that have been removed with an ngIf.\n     *\n     * Most interactions with a ClrWizard's pages are more easily done using the\n     * helper function in the PageCollectionService, accessible from the\n     * ClrWizard through ClrWizard.pageCollection.\n     *\n     * @memberof Wizard\n     *\n     */\n    @ContentChildren(ClrWizardPage) public pages: QueryList<ClrWizardPage>;\n\n    /**\n     * A QueryList of the header actions defined at the ClrWizard level. Does not\n     * contain header actions defined at the page level. Mostly used by other functionality\n     * that needs to either know if the ClrWizard has header actions or needs to stamp them\n     * somewhere.\n     *\n     * Could be useful if you needed to locate and programmatically activate a specific\n     * header action. But this is probably easier to do by invoking the header action's\n     * event handler in your host component.\n     *\n     * @memberof Wizard\n     *\n     */\n    @ContentChildren(ClrWizardHeaderAction) public headerActions: QueryList<ClrWizardHeaderAction>;\n\n    /**\n     * Emits when the current page has changed. Can be observed through the clrWizardCurrentPageChanged\n     * output. This can happen on .next() or .previous().\n     * Useful for non-blocking validation.\n     *\n     * @memberof Wizard\n     *\n     */\n    @Output(\"clrWizardCurrentPageChanged\") currentPageChanged: EventEmitter<any> = new EventEmitter<any>(false);\n\n    /**\n     * Emits when the wizard moves to the next page. Can be observed through the clrWizardOnNext\n     * output.\n     *\n     * Can be combined with the clrWizardPreventDefaultNext input to create\n     * wizard-level custom navigation routines, which are useful for validation.\n     *\n     * @memberof Wizard\n     *\n     */\n    @Output(\"clrWizardOnNext\") onMoveNext: EventEmitter<any> = new EventEmitter<any>(false);\n\n    /**\n     * Emits when the wizard moves to the previous page. Can be observed through the\n     * clrWizardOnPrevious output.\n     *\n     * Can be useful for validation.\n     *\n     * @memberof Wizard\n     *\n     */\n    @Output(\"clrWizardOnPrevious\") onMovePrevious: EventEmitter<any> = new EventEmitter<any>(false);\n\n    /**\n     * Prevents ClrWizard from moving to the next page or closing itself on finishing.\n     * Set using the clrWizardPreventDefaultNext input.\n     *\n     * Note that using stopNext will require you to create your own calls to\n     * .next() and .finish() in your host component to make the ClrWizard work as\n     * expected.\n     *\n     * Primarily used for validation.\n     *\n     * @memberof Wizard\n     *\n     */\n    @Input(\"clrWizardPreventDefaultNext\")\n    set stopNext(value: boolean) {\n        this._stopNext = !!value;\n        this.navService.wizardHasAltNext = value;\n    }\n    private _stopNext: boolean = false;\n    get stopNext(): boolean {\n        return this._stopNext;\n    }\n\n    /**\n     * Prevents ClrWizard from closing when the cancel button or close \"X\" is clicked.\n     * Set using the clrWizardPreventDefaultCancel input.\n     *\n     * Note that using stopCancel will require you to create your own calls to\n     * .close() in your host component to make the ClrWizard work as expected.\n     *\n     * Useful for doing checks or prompts before closing a ClrWizard.\n     *\n     * @memberof Wizard\n     *\n     */\n    @Input(\"clrWizardPreventDefaultCancel\")\n    set stopCancel(value: boolean) {\n        this._stopCancel = !!value;\n        this.navService.wizardHasAltCancel = value;\n    }\n    private _stopCancel: boolean = false;\n    get stopCancel(): boolean {\n        return this._stopCancel;\n    }\n\n    /**\n     * Prevents ClrWizard from performing any form of navigation away from the current\n     * page. Set using the clrWizardPreventNavigation input.\n     *\n     * Note that stopNavigation is meant to freeze the wizard in place, typically\n     * during a long validation or background action where you want the wizard to\n     * display loading content but not allow the user to execute navigation in\n     * the stepnav, close X, or the  back, finish, or next buttons.\n     *\n     * @memberof Wizard\n     *\n     */\n    @Input(\"clrWizardPreventNavigation\")\n    set stopNavigation(value: boolean) {\n        this._stopNavigation = !!value;\n        this.navService.wizardStopNavigation = value;\n    }\n    private _stopNavigation: boolean = false;\n    get stopNavigation(): boolean {\n        return this._stopNavigation;\n    }\n\n    /**\n     * Prevents clicks on the links in the stepnav from working.\n     *\n     * A more granular bypassing of navigation which can be useful when your\n     * ClrWizard is in a state of completion and you don't want users to be\n     * able to jump backwards and change things.\n     *\n     * @memberof Wizard\n     *\n     */\n    @Input(\"clrWizardDisableStepnav\")\n    set disableStepnav(value: boolean) {\n        this._disableStepnav = !!value;\n        this.navService.wizardDisableStepnav = value;\n    }\n    private _disableStepnav: boolean = false;\n    get disableStepnav(): boolean {\n        return this._disableStepnav;\n    }\n\n    /**\n     * Used only to communicate to the underlying modal that animations are not\n     * wanted. Primary use is for the display of static/inline wizards.\n     *\n     * Set using clrWizardPreventModalAnimation input. But you should never set it.\n     *\n     * @memberof Wizard\n     *\n     */\n    @Input(\"clrWizardPreventModalAnimation\") _stopModalAnimations: boolean = false;\n    public get stopModalAnimations(): string {\n        if (this._stopModalAnimations) {\n            return \"true\";\n        }\n        return \"false\";\n    }\n\n    public ngOnInit(): void {\n        this.currentPageSubscription = this.navService.currentPageChanged.subscribe((page: ClrWizardPage) => {\n            this.setGhostPages();\n            this.currentPageChanged.emit();\n        });\n    }\n\n    private goNextSubscription: Subscription;\n    private goPreviousSubscription: Subscription;\n    private cancelSubscription: Subscription;\n    private currentPageSubscription: Subscription;\n    private wizardFinishedSubscription: Subscription;\n\n    ngOnDestroy() {\n        if (this.goNextSubscription) {\n            this.goNextSubscription.unsubscribe();\n        }\n        if (this.goPreviousSubscription) {\n            this.goPreviousSubscription.unsubscribe();\n        }\n        if (this.cancelSubscription) {\n            this.cancelSubscription.unsubscribe();\n        }\n        if (this.currentPageSubscription) {\n            this.currentPageSubscription.unsubscribe();\n        }\n        if (this.wizardFinishedSubscription) {\n            this.wizardFinishedSubscription.unsubscribe();\n        }\n    }\n\n    /**\n     * Sets up references that are needed by the providers.\n     *\n     * @name ngAfterContentInit\n     * @memberof Wizard\n     *\n     */\n    public ngAfterContentInit() {\n        const navService = this.navService;\n\n        this.pageCollection.pages = this.pages;\n        this.headerActionService.wizardHeaderActions = this.headerActions;\n\n        if (this.showGhostPages) {\n            navService.hideWizardGhostPages = false;\n            this.deactivateGhostPages();\n        }\n\n        // Only trigger buttons ready if default is open (inlined)\n        if (this._open) {\n            this.buttonService.buttonsReady = true;\n        }\n    }\n\n    /**\n     * Used for keeping track of when pages are added or removed from this.pages\n     *\n     * @name ngDoCheck\n     * @memberof Wizard\n     *\n     */\n    public ngDoCheck() {\n        const changes = this.differ.diff(this.pages);\n        if (changes) {\n            changes.forEachAddedItem((r: any) => {\n                this.navService.updateNavigation();\n            });\n            changes.forEachRemovedItem((r: any) => {\n                this.navService.updateNavigation();\n            });\n        }\n    }\n\n    /**\n     * Convenient property for determining whether a wizard is static/in-line or not.\n     *\n     * @name isStatic\n     *\n     * @memberof Wizard\n     *\n     */\n    public get isStatic(): boolean {\n        return this.elementRef.nativeElement.classList.contains(\"clr-wizard--inline\");\n    }\n\n    /**\n     * As a getter, current page is a convenient way to retrieve the current page from\n     * the WizardNavigationService.\n     *\n     * As a setter, current page accepts a ClrWizardPage and passes it to WizardNavigationService\n     * to be made the current page. currentPage performs checks to make sure it can navigate\n     * to the designated page.\n     *\n     * @name currentPage\n     *\n     * @memberof Wizard\n     *\n     */\n    public get currentPage(): ClrWizardPage {\n        return this.navService.currentPage;\n    }\n    public set currentPage(page: ClrWizardPage) {\n        this.navService.goTo(page, true);\n    }\n\n    /**\n     * Convenient property for determining if the current page is the last page of\n     * the wizard.\n     *\n     * @name isLast\n     *\n     * @memberof Wizard\n     *\n     */\n    public get isLast(): boolean {\n        return this.navService.currentPageIsLast;\n    }\n\n    /**\n     * Convenient property for determining if the current page is the first page of\n     * the wizard.\n     *\n     * @name isFirst\n     *\n     * @memberof Wizard\n     *\n     */\n    public get isFirst(): boolean {\n        return this.navService.currentPageIsFirst;\n    }\n\n    /**\n     * Performs the actions needed to open the wizard. If there is no current\n     * page defined, sets the first page in the wizard to be current.\n     *\n     * @name open\n     * @memberof ClrWizard\n     */\n    public open(): void {\n        this._open = true;\n\n        if (!this.currentPage) {\n            this.navService.setFirstPageCurrent();\n        }\n\n        // Only render buttons when wizard is opened, to avoid chocolate errors\n        this.buttonService.buttonsReady = true;\n\n        this.setGhostPages();\n        this._openChanged.emit(true);\n    }\n\n    /**\n     * Does the work involved with closing the wizard. Call this directly instead\n     * of cancel() to implement alternative cancel functionality.\n     *\n     * @name close\n     * @memberof ClrWizard\n     */\n    public close(): void {\n        if (this.stopNavigation) {\n            return;\n        }\n\n        this._open = false;\n        this.deactivateGhostPages();\n        this._openChanged.emit(false);\n    }\n\n    /**\n     * Convenient function that can be used to open and close the wizard. It operates\n     * by checking a Boolean parameter. If true, the wizard is opened. If false,\n     * it is closed.\n     *\n     * There is no default value for this parameter, so by default the wizard will\n     * close if invoked with no parameter.\n     *\n     * @name toggle\n     *\n     * @memberof ClrWizard\n     */\n    public toggle(value: boolean): void {\n        if (value) {\n            this.open();\n        } else {\n            this.close();\n        }\n    }\n\n    /**\n     * DEPRECATED. Moves the wizard to the previous page. Carried over from legacy.\n     *\n     * It is recommended that you use previous() instead.\n     *\n     * @name prev\n     * @memberof ClrWizard\n     */\n    public prev(): void {\n        this.previous();\n    }\n\n    /**\n     * Moves the wizard to the previous page.\n     *\n     * @name previous\n     * @memberof ClrWizard\n     */\n    public previous(): void {\n        this.navService.previous();\n    }\n\n    /**\n     * Includes a Boolean parameter that will skip checks and event emissions.\n     * If true, the wizard will move to the next page regardless of the state of\n     * its current page. This is useful for alternative navigation where event\n     * emissions have already been done and firing them again may cause an event loop.\n     *\n     * Generally, with alternative navigation, users are supplying their own checks\n     * and validation. So there is no point in superseding their business logic\n     * with our default behavior.\n     *\n     * If false, the wizard will execute default checks and emit events as normal.\n     * This is useful for custom buttons or programmatic workflows that are not\n     * executing the wizards default checks and emissions. It is another way to\n     * navigate without having to rewrite the wizard’s default functionality\n     * from scratch.\n     *\n     * By default, next() does not execute event emissions or checks because the\n     * 80% case is that this method will be called as part of an alternative\n     * navigation with clrWizardPreventDefaultNext.\n     *\n     * @name next\n     * @memberof ClrWizard\n     */\n    public next(skipChecksAndEmits: boolean = true): void {\n        if (skipChecksAndEmits) {\n            this.forceNext();\n        } else {\n            this.navService.next();\n        }\n    }\n\n    /**\n     * Includes a Boolean parameter that will skip checks and event emissions.\n     * If true, the wizard will  complete and close regardless of the state of\n     * its current page. This is useful for alternative navigation where event\n     * emissions have already been done and firing them again may cause an event loop.\n     *\n     * If false, the wizard will execute default checks and emit events before\n     * completing and closing.\n     *\n     * By default, finish() does not execute event emissions or checks because the\n     * 80% case is that this method will be called as part of an alternative\n     * navigation with clrWizardPreventDefaultNext.\n     *\n     * @name finish\n     * @memberof ClrWizard\n     */\n    public finish(skipChecksAndEmits: boolean = true): void {\n        if (skipChecksAndEmits) {\n            this.forceFinish();\n        } else {\n            this.navService.finish();\n        }\n    }\n\n    /**\n     * Does the work of finishing up the wizard and closing it but doesn't do the\n     * checks and emissions that other paths do. Good for a last step in an\n     * alternate workflow.\n     *\n     * Does the same thing as calling ClrWizard.finish(true) or ClrWizard.finish()\n     * without a parameter.\n     *\n     * @name forceFinish\n     * @memberof ClrWizard\n     */\n    public forceFinish(): void {\n        if (this.stopNavigation) {\n            return;\n        }\n\n        this.deactivateGhostPages();\n        this.close();\n    }\n\n    /**\n     * Does the work of moving the wizard to the next page without the\n     * checks and emissions that other paths do. Good for a last step in an\n     * alternate workflow.\n     *\n     * Does the same thing as calling ClrWizard.next(true) or ClrWizard.next()\n     * without a parameter.\n     *\n     * @name forceNext\n     * @memberof ClrWizard\n     */\n    public forceNext(): void {\n        this.navService.forceNext();\n    }\n\n    /**\n     * Initiates the functionality that cancels and closes the wizard.\n     *\n     * Do not use this for an override of the cancel the functionality\n     * with clrWizardPreventDefaultCancel, clrWizardPreventPageDefaultCancel,\n     * or clrWizardPagePreventDefault because it will initiate the same checks\n     * and event emissions that invoked your event handler.\n     *\n     * Use ClrWizard.close() instead.\n     *\n     * @name cancel\n     * @memberof ClrWizard\n     */\n    public cancel(): void {\n        this.navService.cancel();\n    }\n\n    /**\n     * Overrides behavior of the underlying modal to avoid collisions with\n     * alternative cancel functionality.\n     *\n     * In most cases, use ClrWizard.cancel() instead.\n     *\n     * @name modalCancel\n     * @memberof ClrWizard\n     */\n    public modalCancel(): void {\n        this.checkAndCancel();\n    }\n\n    /**\n     * Checks for alternative cancel flows defined at the current page or\n     * wizard level. Performs a canceled if not. Emits events that initiate\n     * the alternative cancel outputs (clrWizardPageOnCancel and\n     * clrWizardOnCancel) if so.\n     *\n     * @name checkAndCancel\n     * @memberof ClrWizard\n     */\n    public checkAndCancel(): void {\n        const currentPage = this.currentPage;\n        const currentPageHasOverrides = currentPage.stopCancel || currentPage.preventDefault;\n\n        if (this.stopNavigation) {\n            return;\n        }\n\n        currentPage.pageOnCancel.emit();\n        if (!currentPageHasOverrides) {\n            this.onCancel.emit();\n        }\n\n        if (!this.stopCancel && !currentPageHasOverrides) {\n            this.close();\n        }\n    }\n\n    /**\n     * Accepts the wizard ID as a string parameter and calls to WizardNavigationService\n     * to navigate to the page with that ID. Navigation will invoke the wizard’s default\n     * checks and event emissions.\n     *\n     * Probably less useful than calling directly to ClrWizard.navService.goTo() because the\n     * nav service method can accept either a string ID or a page object.\n     *\n     * The format of the expected ID parameter can be found in the return of the\n     * ClrWizardPage.id getter, usually prefixed with “clr-wizard-page-“ and then either a\n     * numeric ID or the ID specified for the ClrWizardPage component’s “id” input.\n     *\n     * @name goTo\n     *\n     * @memberof ClrWizard\n     */\n    public goTo(pageId: string): void {\n        if (!pageId) {\n            return;\n        }\n\n        this.navService.goTo(pageId);\n    }\n\n    /**\n     * A convenience function that calls to PageCollectionService.reset() and emits the\n     * ClrWizard.onReset event.\n     *\n     * Reset sets all WizardPages to incomplete and sets the first page in the ClrWizard to\n     * be the current page, essentially resetting the wizard navigation.\n     *\n     * Users would then use the onReset event to reset the data or model in their\n     * host component.\n     *\n     * It could be useful to call a reset without firing the onReset event. To do this,\n     * just call ClrWizard.pageCollection.reset() directly.\n     *\n     * @name reset\n     * @memberof ClrWizard\n     */\n    public reset() {\n        this.pageCollection.reset();\n        this.onReset.next();\n    }\n\n    /**\n     * A convenience getter to retrieve the ghost Page animation state from\n     * WizardNavigationService.\n     *\n     * @name ghostPageState\n     * @memberof Wizard\n     */\n    public get ghostPageState(): string {\n        return this.navService.wizardGhostPageState;\n    }\n\n    /**\n     * Convenience method that resets the ghost page animation.\n     *\n     * @name deactivateGhostPages\n     * @memberof ClrWizard\n     */\n    public deactivateGhostPages(): void {\n        this.setGhostPages(\"deactivate\");\n    }\n\n    /**\n     * Manages the state of the ghost page animation based on the location\n     * of the current page in the workflow.\n     *\n     * Accepts an optional string parameter that can reset the ghost page\n     * animation to its closed state.\n     *\n     * @name setGhostPages\n     *\n     * @memberof ClrWizard\n     */\n    public setGhostPages(deactivateOrNot: string = \"\"): void {\n        const navService = this.navService;\n        const ghostpageStates = GHOST_PAGE_ANIMATION.STATES;\n\n        if (this.showGhostPages) {\n            if (deactivateOrNot === \"deactivate\") {\n                navService.wizardGhostPageState = ghostpageStates.NO_PAGES;\n            } else if (navService.currentPageIsLast) {\n                navService.wizardGhostPageState = ghostpageStates.LAST_PAGE;\n            } else if (navService.currentPageIsNextToLast) {\n                navService.wizardGhostPageState = ghostpageStates.NEXT_TO_LAST_PAGE;\n            } else {\n                navService.wizardGhostPageState = ghostpageStates.ALL_PAGES;\n            }\n        }\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Component, EventEmitter, Input, Output} from \"@angular/core\";\n\nimport {ButtonHubService} from \"./providers/button-hub.service\";\nimport {WizardNavigationService} from \"./providers/wizard-navigation.service\";\n\nexport const DEFAULT_BUTTON_TYPES: any = {\n    cancel: \"cancel\",\n    previous: \"previous\",\n    next: \"next\",\n    finish: \"finish\",\n    danger: \"danger\"\n};\n\nexport const CUSTOM_BUTTON_TYPES: any = {\n    cancel: \"custom-cancel\",\n    previous: \"custom-previous\",\n    next: \"custom-next\",\n    finish: \"custom-finish\",\n    danger: \"custom-danger\"\n};\n\n@Component({\n    selector: \"clr-wizard-button\",\n    template: `\n        <button\n            type=\"button\"\n            class=\"btn clr-wizard-btn\"\n            [class.btn-link]=\"isCancel\"\n            [class.clr-wizard-btn--tertiary]=\"isCancel\"\n            [class.btn-outline]=\"isPrevious\"\n            [class.clr-wizard-btn--secondary]=\"isPrevious\"\n            [class.btn-primary]=\"isPrimaryAction\"\n            [class.clr-wizard-btn--primary]=\"isPrimaryAction\"\n            [class.btn-success]=\"isFinish\"\n            [class.btn-danger]=\"isDanger\"\n            [class.disabled]=\"isDisabled\"\n            [attr.disabled]=\"_disabledAttribute\"\n            (click)=\"click()\">\n            <ng-content></ng-content>\n        </button>\n    `,\n    host: {\"class\": \"clr-wizard-btn-wrapper\", \"[attr.aria-hidden]\": \"isHidden\"},\n    styles: [\"[aria-hidden=\\\"true\\\"] { display: none; }\"]\n})\nexport class ClrWizardButton {\n    @Input(\"type\") public type: string = \"\";\n\n    @Input(\"clrWizardButtonDisabled\") public disabled: boolean = false;\n\n    @Input(\"clrWizardButtonHidden\") public hidden: boolean = false;\n\n    // EventEmitter which is emitted when a button is clicked.\n    @Output(\"clrWizardButtonClicked\") wasClicked: EventEmitter<string> = new EventEmitter<string>(false);\n\n    constructor(public navService: WizardNavigationService, public buttonService: ButtonHubService) {}\n\n    private checkDefaultAndCustomType(valueToCheck: string = \"\", typeToLookUp: string) {\n        if (DEFAULT_BUTTON_TYPES[typeToLookUp] === valueToCheck) {\n            return true;\n        }\n        if (CUSTOM_BUTTON_TYPES[typeToLookUp] === valueToCheck) {\n            return true;\n        }\n        return false;\n    }\n\n    public get isCancel(): boolean {\n        return this.checkDefaultAndCustomType(this.type, \"cancel\");\n    }\n\n    public get isNext(): boolean {\n        return this.checkDefaultAndCustomType(this.type, \"next\");\n    }\n\n    public get isPrevious(): boolean {\n        return this.checkDefaultAndCustomType(this.type, \"previous\");\n    }\n\n    public get isFinish(): boolean {\n        return this.checkDefaultAndCustomType(this.type, \"finish\");\n    }\n\n    public get isDanger(): boolean {\n        return this.checkDefaultAndCustomType(this.type, \"danger\");\n    }\n\n    public get isPrimaryAction(): boolean {\n        return this.isNext || this.isDanger || this.isFinish;\n    }\n\n    public get _disabledAttribute(): string|null {\n        if (this.isDisabled) {\n            return \"\";\n        }\n        return null;\n    }\n\n    public get isDisabled(): boolean {\n        // dealing with negatives here. cognitively easier to think of it like this...\n        const disabled = true;\n        const nav = this.navService;\n        const page = this.navService.currentPage;\n\n        // Ensure we don't change the response until buttons are ready to avoid chocolate\n        if (!this.buttonService.buttonsReady) {\n            return !disabled;\n        }\n\n        if (this.disabled || nav.wizardStopNavigation || !page) {\n            return true;\n        }\n\n        if (this.isCancel) {\n            return !disabled;\n        }\n\n        if (this.isPrevious && (nav.currentPageIsFirst || page.previousStepDisabled)) {\n            return disabled;\n        }\n\n        if (this.isDanger && !page.readyToComplete) {\n            return disabled;\n        }\n\n        if (this.isNext && (nav.currentPageIsLast || !page.readyToComplete)) {\n            return disabled;\n        }\n\n        if (this.isFinish && (!nav.currentPageIsLast || !page.readyToComplete)) {\n            return disabled;\n        }\n\n        return !disabled;\n    }\n\n    public get isHidden(): boolean {\n        // dealing with negatives here. cognitively easier to think of it like this...\n        const hidden = true;\n        const nav = this.navService;\n\n        // Ensure we don't change the response until buttons are ready to avoid chocolate\n        if (!this.buttonService.buttonsReady) {\n            return !hidden;\n        }\n\n        if (this.hidden) {\n            return true;\n        }\n\n        if (this.isCancel) {\n            return !hidden;\n        }\n\n        if (this.isPrevious && nav.currentPageIsFirst) {\n            return hidden;\n        }\n\n        if (this.isNext && nav.currentPageIsLast) {\n            return hidden;\n        }\n\n        if (this.isFinish && !nav.currentPageIsLast) {\n            return hidden;\n        }\n\n        return !hidden;\n    }\n\n    click(): void {\n        if (this.isDisabled) {\n            return;\n        }\n\n        this.wasClicked.emit(this.type);\n        this.buttonService.buttonClicked(this.type);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Directive} from \"@angular/core\";\n\n@Directive({selector: \"clr-wizard-title, clr-wizard-pagetitle\"})\nexport class ClrWizardCustomTags {\n    // No behavior\n    // The only purpose is to \"declare\" the tag in Angular\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Component} from \"@angular/core\";\nimport {PageCollectionService} from \"./providers/page-collection.service\";\n\n@Component({\n    selector: \"clr-wizard-stepnav\",\n    template: `\n        <ol class=\"clr-wizard-stepnav-list\" role=\"tablist\">\n            <li *ngFor=\"let page of pageService.pages\" clr-wizard-stepnav-item \n            [page]=\"page\" class=\"clr-wizard-stepnav-item\"></li>\n        </ol>\n    `,\n    host: {\"class\": \"clr-wizard-stepnav\"}\n})\n\nexport class ClrWizardStepnav {\n    constructor(public pageService: PageCollectionService) {}\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Component, Input} from \"@angular/core\";\n\nimport {PageCollectionService} from \"./providers/page-collection.service\";\nimport {WizardNavigationService} from \"./providers/wizard-navigation.service\";\nimport {ClrWizardPage} from \"./wizard-page\";\n\n@Component({\n    selector: \"[clr-wizard-stepnav-item]\",\n    template: `\n        <button type=\"button\" class=\"btn btn-link clr-wizard-stepnav-link\" (click)=\"click()\">\n            <ng-template [ngTemplateOutlet]=\"page.navTitle\"></ng-template>\n        </button>\n    `,\n    host: {\n        \"[id]\": \"id\",\n        \"[attr.aria-selected]\": \"isCurrent\",\n        \"[attr.aria-controls]\": \"id\",\n        \"role\": \"presentation\",\n        \"[class.clr-nav-link]\": \"true\",\n        \"[class.nav-item]\": \"true\",\n        \"[class.active]\": \"isCurrent\",\n        \"[class.disabled]\": \"isDisabled\",\n        \"[class.no-click]\": \"!canNavigate\",\n        \"[class.complete]\": \"isComplete\"\n    }\n})\n\nexport class ClrWizardStepnavItem {\n    @Input(\"page\") public page: ClrWizardPage;\n\n    constructor(public navService: WizardNavigationService, public pageCollection: PageCollectionService) {}\n\n    private pageGuard(): void {\n        if (!this.page) {\n            throw new Error(\"Wizard stepnav item is not associated with a wizard page.\");\n        }\n    }\n\n    public get id(): string {\n        this.pageGuard();\n        return this.pageCollection.getStepItemIdForPage(this.page);\n    }\n\n    public get isDisabled(): boolean {\n        this.pageGuard();\n        return this.page.disabled || this.navService.wizardStopNavigation || this.navService.wizardDisableStepnav;\n    }\n\n    public get isCurrent(): boolean {\n        this.pageGuard();\n        return this.page.current;\n    }\n\n    public get isComplete(): boolean {\n        this.pageGuard();\n        return this.page.completed;\n    }\n\n    public get canNavigate(): boolean {\n        this.pageGuard();\n        return this.pageCollection.previousPageIsCompleted(this.page);\n    }\n\n    click(): void {\n        this.pageGuard();\n\n        // if we click on our own stepnav or a disabled stepnav, we don't want to do anything\n        if (this.isDisabled || this.isCurrent) {\n            return;\n        }\n\n        this.navService.goTo(this.page);\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\n\nimport {ClrAlertModule} from \"../emphasis/alert/alert.module\";\nimport {ClrModalModule} from \"../modal/modal.module\";\n\nimport {ClrWizard} from \"./wizard\";\nimport {ClrWizardButton} from \"./wizard-button\";\nimport {ClrWizardCustomTags} from \"./wizard-custom-tags\";\nimport {ClrWizardHeaderAction} from \"./wizard-header-action\";\nimport {ClrWizardPage} from \"./wizard-page\";\nimport {ClrWizardPageButtons} from \"./wizard-page-buttons\";\nimport {ClrWizardPageHeaderActions} from \"./wizard-page-header-actions\";\nimport {ClrWizardPageNavTitle} from \"./wizard-page-navtitle\";\nimport {ClrWizardPageTitle} from \"./wizard-page-title\";\nimport {ClrWizardStepnav} from \"./wizard-stepnav\";\nimport {ClrWizardStepnavItem} from \"./wizard-stepnav-item\";\n\nexport const CLR_WIZARD_DIRECTIVES: any[] = [\n    ClrWizard, ClrWizardPage, ClrWizardStepnav, ClrWizardStepnavItem, ClrWizardButton, ClrWizardHeaderAction,\n    ClrWizardCustomTags, ClrWizardPageTitle, ClrWizardPageNavTitle, ClrWizardPageButtons, ClrWizardPageHeaderActions\n];\n\n@NgModule({\n    imports: [CommonModule, ClrModalModule, ClrAlertModule],\n    declarations: [CLR_WIZARD_DIRECTIVES],\n    exports: [CLR_WIZARD_DIRECTIVES]\n})\nexport class ClrWizardModule {}\n\n/* tslint:disable variable-name */\n/** @deprecated since 0.11 */\nexport interface Wizard extends ClrWizard {}\n/** @deprecated since 0.11 */\nexport const Wizard = ClrWizard;\n/** @deprecated since 0.11 */\nexport interface WizardPage extends ClrWizardPage {}\n/** @deprecated since 0.11 */\nexport const WizardPage = ClrWizardPage;\n/** @deprecated since 0.11 */\nexport interface WizardStepnav extends ClrWizardStepnav {}\n/** @deprecated since 0.11 */\nexport const WizardStepnav = ClrWizardStepnav;\n/** @deprecated since 0.11 */\nexport interface WizardStepnavItem extends ClrWizardStepnavItem {}\n/** @deprecated since 0.11 */\nexport const WizardStepnavItem = ClrWizardStepnavItem;\n/** @deprecated since 0.11 */\nexport interface WizardButton extends ClrWizardButton {}\n/** @deprecated since 0.11 */\nexport const WizardButton = ClrWizardButton;\n/** @deprecated since 0.11 */\nexport interface WizardHeaderAction extends ClrWizardHeaderAction {}\n/** @deprecated since 0.11 */\nexport const WizardHeaderAction = ClrWizardHeaderAction;\n/** @deprecated since 0.11 */\nexport interface WizardCustomTags extends ClrWizardCustomTags {}\n/** @deprecated since 0.11 */\nexport const WizardCustomTags = ClrWizardCustomTags;\n/** @deprecated since 0.11 */\nexport interface WizardPageTitleDirective extends ClrWizardPageTitle {}\n/** @deprecated since 0.11 */\nexport const WizardPageTitleDirective = ClrWizardPageTitle;\n/** @deprecated since 0.11 */\nexport interface WizardPageNavTitleDirective extends ClrWizardPageNavTitle {}\n/** @deprecated since 0.11 */\nexport const WizardPageNavTitleDirective = ClrWizardPageNavTitle;\n/** @deprecated since 0.11 */\nexport interface WizardPageButtonsDirective extends ClrWizardPageButtons {}\n/** @deprecated since 0.11 */\nexport const WizardPageButtonsDirective = ClrWizardPageButtons;\n/** @deprecated since 0.11 */\nexport interface WizardPageHeaderActionsDirective extends ClrWizardPageHeaderActions {}\n/** @deprecated since 0.11 */\nexport const WizardPageHeaderActionsDirective = ClrWizardPageHeaderActions;\n/* tslint:enable variable-name */\n/** @deprecated since 0.11 */\nexport const WIZARD_DIRECTIVES = CLR_WIZARD_DIRECTIVES;\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {ModuleWithProviders, NgModule} from \"@angular/core\";\n\nimport {ClrButtonModule} from \"./button/button.module\";\nimport {ClrCodeModule} from \"./code/code.module\";\nimport {ClrDataModule} from \"./data/data.module\";\nimport {ClrEmphasisModule} from \"./emphasis/emphasis.module\";\nimport {ClrFormsModule} from \"./forms-deprecated/forms.module\";\nimport {ClrIconModule} from \"./icon/icon.module\";\nimport {ClrLayoutModule} from \"./layout/layout.module\";\nimport {ClrModalModule} from \"./modal/modal.module\";\nimport {ClrPopoverModule} from \"./popover/popover.module\";\nimport {ClrConditionalModule} from \"./utils/conditional/conditional.module\";\nimport {ClrIfExpandModule} from \"./utils/expand/if-expand.module\";\nimport {ClrFocusTrapModule} from \"./utils/focus-trap/focus-trap.module\";\nimport {ClrLoadingModule} from \"./utils/loading/loading.module\";\nimport {ClrWizardModule} from \"./wizard/wizard.module\";\n\n@NgModule({\n    exports: [\n        ClrEmphasisModule, ClrDataModule, ClrIconModule, ClrModalModule, ClrLoadingModule, ClrIfExpandModule,\n        ClrConditionalModule, ClrFocusTrapModule, ClrButtonModule, ClrCodeModule, ClrFormsModule, ClrLayoutModule,\n        ClrPopoverModule, ClrWizardModule\n    ]\n})\nexport class ClarityModule {\n    /** @deprecated */\n    static forRoot(): ModuleWithProviders {\n        return {ngModule: ClarityModule, providers: []};\n    }\n\n    /** @deprecated */\n    static forChild(): ModuleWithProviders {\n        return {ngModule: ClarityModule, providers: []};\n    }\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {Directive, HostBinding, Input, OnDestroy, OnInit, Optional} from \"@angular/core\";\nimport {Subscription} from \"rxjs/Subscription\";\n\nimport {FormControlService} from \"./form-control.service\";\n\n@Directive({selector: \"label\"})\nexport class ClrLabel implements OnInit, OnDestroy {\n    constructor(@Optional() private formControlService: FormControlService) {}\n\n    @HostBinding(\"attr.for\") @Input(\"for\") forAttr: string;\n\n    private subscription: Subscription;\n\n    ngOnInit() {\n        if (!this.forAttr && this.formControlService) {\n            this.subscription = this.formControlService.idChange.subscribe(id => this.forAttr = id);\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n}\n",
    "/**\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\n\nimport {ClrLabel} from \"./label\";\n\n@NgModule({imports: [CommonModule], declarations: [ClrLabel], exports: [ClrLabel]})\nexport class ClrCommonFormsModule {}\n",
    "/**\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Component} from \"@angular/core\";\n\nimport {DynamicWrapper} from \"../../utils/host-wrapping/dynamic-wrapper\";\nimport {FormControlService} from \"../common/form-control.service\";\n\n@Component({\n    selector: \"clr-checkbox-container\",\n    template: `\n        <!-- We want the checkbox input to be before the label, always -->\n        <ng-content select=\"[clrCheckbox]\"></ng-content>\n        <ng-content></ng-content>\n        <label *ngIf=\"_dynamic\"></label>\n    `,\n    host: {\"[class.checkbox]\": \"true\"},\n    providers: [FormControlService]\n})\nexport class ClrCheckboxContainer implements DynamicWrapper {\n    // Indicates whether the container is dynamically created by the checkbox input itself\n    _dynamic = false;\n}\n",
    "/**\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Directive, ViewContainerRef} from \"@angular/core\";\n\nimport {WrappedFormControl} from \"../common/wrapped-form-control\";\n\nimport {ClrCheckboxContainer} from \"./checkbox-container\";\n\n@Directive({selector: \"[clrCheckbox]\"})\nexport class ClrCheckboxNext extends WrappedFormControl<ClrCheckboxContainer> {\n    // Once again, several more elegant solutions were foiled by severity 3+ bugs on Angular that have been opened\n    // for 6 months to a year. So that's how we do it. Inheritance and ridiculous constructors. :-(\n    constructor(vcr: ViewContainerRef) {\n        super(ClrCheckboxContainer, vcr);\n    }\n}\n",
    "/**\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\n\nimport {ClrHostWrappingModule} from \"../../utils/host-wrapping/host-wrapping.module\";\nimport {ClrCommonFormsModule} from \"../common/common.module\";\n\nimport {ClrCheckboxNext} from \"./checkbox\";\nimport {ClrCheckboxContainer} from \"./checkbox-container\";\n\n@NgModule({\n    imports: [CommonModule, ClrCommonFormsModule, ClrHostWrappingModule],\n    declarations: [ClrCheckboxNext, ClrCheckboxContainer],\n    exports: [ClrCommonFormsModule, ClrCheckboxNext, ClrCheckboxContainer],\n    entryComponents: [ClrCheckboxContainer]\n})\nexport class ClrCheckboxNextModule {}\n",
    "/**\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Component} from \"@angular/core\";\n\nimport {DynamicWrapper} from \"../../utils/host-wrapping/dynamic-wrapper\";\nimport {FormControlService} from \"../common/form-control.service\";\n\n@Component({\n    selector: \"clr-radio-container\",\n    template: `\n        <!-- We want the radio input to be before the label, always -->\n        <ng-content select=\"[clrRadio]\"></ng-content>\n        <ng-content></ng-content>\n        <label *ngIf=\"_dynamic\"></label>\n    `,\n    host: {\"[class.radio]\": \"true\"},\n    providers: [FormControlService]\n})\nexport class ClrRadioContainer implements DynamicWrapper {\n    // Indicates whether the container is dynamically created by the radio button itself\n    _dynamic = false;\n}\n",
    "/**\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {Directive, ViewContainerRef} from \"@angular/core\";\n\nimport {WrappedFormControl} from \"../common/wrapped-form-control\";\n\nimport {ClrRadioContainer} from \"./radio-container\";\n\n@Directive({selector: \"[clrRadio]\"})\nexport class ClrRadio extends WrappedFormControl<ClrRadioContainer> {\n    // Once again, several more elegant solutions were foiled by severity 3+ bugs on Angular that have been opened\n    // for 6 months to a year. So that's how we do it. Inheritance and ridiculous constructors. :-(\n    constructor(vcr: ViewContainerRef) {\n        super(ClrRadioContainer, vcr);\n    }\n}\n",
    "/**\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\n\nimport {ClrHostWrappingModule} from \"../../utils/host-wrapping/host-wrapping.module\";\nimport {ClrCommonFormsModule} from \"../common/common.module\";\n\nimport {ClrRadio} from \"./radio\";\nimport {ClrRadioContainer} from \"./radio-container\";\n\n@NgModule({\n    imports: [CommonModule, ClrCommonFormsModule, ClrHostWrappingModule],\n    declarations: [ClrRadio, ClrRadioContainer],\n    exports: [ClrCommonFormsModule, ClrRadio, ClrRadioContainer],\n    entryComponents: [ClrRadioContainer]\n})\nexport class ClrRadioModule {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport {CommonModule} from \"@angular/common\";\nimport {NgModule} from \"@angular/core\";\n\nimport {ClrCheckboxNextModule} from \"./checkbox/checkbox.module\";\nimport {ClrCommonFormsModule} from \"./common/common.module\";\nimport {ClrDatepickerModule} from \"./datepicker/datepicker.module\";\nimport {ClrRadioModule} from \"./radio/radio.module\";\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [ClrCommonFormsModule, ClrCheckboxNextModule, ClrRadioModule, ClrDatepickerModule]\n})\nexport class ClrFormsNextModule {}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {animate, AnimationMetadata, state, style, transition} from \"@angular/animations\";\n\nexport function collapse(): AnimationMetadata[] {\n    \"use strict\";\n    return [\n        state(\"true\", style({\"height\": 0, \"overflow-y\": \"hidden\"})),\n        transition(\"true => false\", [animate(\"0.2s ease-in-out\", style({\"height\": \"*\", \"overflow-y\": \"hidden\"}))]),\n        transition(\"false => true\", [style({\"height\": \"*\", \"overflow-y\": \"hidden\"}), animate(\"0.2s ease-in-out\")])\n    ];\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {animate, AnimationMetadata, style, transition} from \"@angular/animations\";\n\nexport function fade(opacity: number = 1): AnimationMetadata[] {\n    return [\n        transition(\"void => *\", [style({opacity: 0}), animate(\"0.2s ease-in-out\", style({opacity: opacity}))]),\n        transition(\"* => void\", [animate(\"0.2s ease-in-out\", style({opacity: 0}))])\n    ];\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {animate, AnimationMetadata, style, transition} from \"@angular/animations\";\n\nexport function fadeSlide(direction: string): AnimationMetadata[] {\n    let transform: string = null;\n    if (direction === \"up\") {\n        transform = \"translate(0, 25%)\";\n    } else if (direction === \"down\") {\n        transform = \"translate(0, -25%)\";\n    } else if (direction === \"left\") {\n        transform = \"translate(25%, 0)\";\n    } else if (direction === \"right\") {\n        transform = \"translate(-25%, 0)\";\n    } else {\n        throw new Error(\"Unknown direction \" + direction + \" for slide animation.\");\n    }\n    return [\n        transition(\"void => *\", [style({opacity: 0, transform: transform}), animate(\"0.2s ease-in-out\")]),\n        transition(\"* => void\", [animate(\"0.2s ease-in-out\", style({opacity: 0, transform: transform}))])\n    ];\n}\n",
    "/*\n * Copyright (c) 2016-2018 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {animate, AnimationMetadata, style, transition} from \"@angular/animations\";\n\nexport function slide(direction: string): AnimationMetadata[] {\n    let transform: string = null;\n    if (direction === \"up\") {\n        transform = \"translate(0, 25%)\";\n    } else if (direction === \"down\") {\n        transform = \"translate(0, -25%)\";\n    } else if (direction === \"left\") {\n        transform = \"translate(25%, 0)\";\n    } else if (direction === \"right\") {\n        transform = \"translate(-25%, 0)\";\n    } else {\n        throw new Error(\"Unknown direction \" + direction + \" for slide animation.\");\n    }\n    return [\n        transition(\"void => *\", [style({transform: transform}), animate(\"0.2s ease-in-out\")]),\n        transition(\"* => void\", [animate(\"0.2s ease-in-out\", style({transform: transform}))])\n    ];\n}\n"
  ],
  "names": [
    "extendStatics",
    "Object",
    "setPrototypeOf",
    "__proto__",
    "Array",
    "d",
    "b",
    "p",
    "hasOwnProperty",
    "__extends",
    "__",
    "this",
    "constructor",
    "prototype",
    "create",
    "__values",
    "o",
    "m",
    "Symbol",
    "iterator",
    "i",
    "call",
    "next",
    "length",
    "value",
    "done",
    "__read",
    "n",
    "r",
    "e",
    "ar",
    "push",
    "error",
    "__spread",
    "arguments",
    "concat",
    "ClrIconCustomTag",
    "type",
    "Directive",
    "args",
    "selector",
    "CLR_ICON_DIRECTIVES",
    "ClrIconModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports",
    "IconCustomTag",
    "ICON_DIRECTIVES",
    "POSITION_ABSOLUTE",
    "OVERFLOW_SCROLL",
    "OVERFLOW_AUTO",
    "Popover",
    "element",
    "scrollableElements",
    "boundOnScrollListener",
    "emitScrollEvent",
    "bind",
    "style",
    "position",
    "top",
    "bottom",
    "left",
    "right",
    "anchor",
    "anchorAlign",
    "popoverAlign",
    "_a",
    "_b",
    "_c",
    "offsetX",
    "_d",
    "offsetY",
    "_e",
    "useAnchorParent",
    "addScrollEventListeners",
    "parentNode",
    "anchorRect",
    "getBoundingClientRect",
    "popoverRect",
    "leftDiff",
    "topDiff",
    "Point",
    "LEFT_TOP",
    "TOP_LEFT",
    "TOP_CENTER",
    "width",
    "TOP_RIGHT",
    "RIGHT_TOP",
    "LEFT_BOTTOM",
    "BOTTOM_LEFT",
    "height",
    "BOTTOM_CENTER",
    "BOTTOM_RIGHT",
    "RIGHT_BOTTOM",
    "LEFT_CENTER",
    "RIGHT_CENTER",
    "popoverComputedStyle",
    "getComputedStyle",
    "marginLeft",
    "parseInt",
    "marginRight",
    "marginTop",
    "marginBottom",
    "transform",
    "_scroll",
    "asObservable",
    "release",
    "removeScrollEventListeners",
    "isPositioned",
    "container",
    "Subject",
    "current",
    "document",
    "scrolls",
    "addEventListener",
    "tslib_1.__values",
    "removeEventListener",
    "complete",
    "computedStyles",
    "overflowX",
    "overflowY",
    "openCount",
    "waiting",
    "PopoverDirectiveOld",
    "templateRef",
    "viewContainer",
    "popoverOptions",
    "clrPopoverOldChange",
    "EventEmitter",
    "defineProperty",
    "set",
    "open",
    "_this",
    "allowMultipleOpen",
    "createPopover",
    "clear",
    "destroyPopover",
    "shift",
    "createPopoverFn",
    "embeddedViewRef",
    "createEmbeddedView",
    "detectChanges",
    "elementNodes",
    "rootNodes",
    "filter",
    "node",
    "nodeType",
    "_popoverInstance",
    "_subscription",
    "anchorElem",
    "anchorPoint",
    "popoverPoint",
    "subscribe",
    "emit",
    "unsubscribe",
    "ngOnDestroy",
    "TemplateRef",
    "ViewContainerRef",
    "Input",
    "Output",
    "clrPopoverOld",
    "POPOVER_DIRECTIVES",
    "ClrCommonPopoverModule",
    "LoadingListener",
    "ButtonInGroupService",
    "_changes",
    "get",
    "updateButtonGroup",
    "button",
    "Injectable",
    "ClrButton",
    "buttonInGroupService",
    "_enableService",
    "_inMenu",
    "_classNames",
    "_name",
    "_type",
    "_disabled",
    "_click",
    "classNames",
    "split",
    "indexOf",
    "join",
    "startLoading",
    "loading",
    "doneLoading",
    "emitClick",
    "ngAfterViewInit",
    "Component",
    "template",
    "providers",
    "provide",
    "useExisting",
    "decorators",
    "SkipSelf",
    "Optional",
    "ViewChild",
    "inMenu",
    "name",
    "disabled",
    "CLR_MENU_POSITIONS",
    "ClrButtonGroup",
    "buttonGroupNewService",
    "elementRef",
    "inlineButtons",
    "menuButtons",
    "_openMenu",
    "_overflowMenuToggleClicked",
    "ngAfterContentInit",
    "initializeButtons",
    "changes",
    "rearrangeButton",
    "buttons",
    "fromView",
    "toView",
    "index",
    "splice",
    "moveIndex",
    "getMoveIndex",
    "buttonToMove",
    "tempInlineButtons",
    "tempInMenuButtons",
    "forEach",
    "_menuPosition",
    "pos",
    "toggleMenu",
    "openMenu",
    "onMouseClick",
    "target",
    "host",
    "nativeElement",
    "classList",
    "contains",
    "[class.btn-group]",
    "ElementRef",
    "ContentChildren",
    "menuPosition",
    "HostListener",
    "CLR_BUTTON_GROUP_DIRECTIVES",
    "ClrButtonGroupModule",
    "Button",
    "ButtonGroup",
    "BUTTON_GROUP_DIRECTIVES",
    "ClrLoading",
    "listener",
    "_loading",
    "CLR_LOADING_DIRECTIVES",
    "ClrLoadingModule",
    "Loading",
    "LOADING_DIRECTIVES",
    "ClrLoadingButton",
    "CLR_LOADING_BUTTON_DIRECTIVES",
    "ClrLoadingButtonModule",
    "LoadingButton",
    "LOADING_BUTTON_DIRECTIVES",
    "ClrButtonModule",
    "ClrCodeHighlight",
    "_el",
    "renderer",
    "platformId",
    "_highlight",
    "redraw",
    "isPlatformBrowser",
    "Prism",
    "highlightElement",
    "val",
    "trim",
    "addClass",
    "Renderer2",
    "Inject",
    "PLATFORM_ID",
    "highlight",
    "CLR_CODE_HIGHLIGHT_DIRECTIVES",
    "ClrSyntaxHighlightModule",
    "CodeHighlight",
    "CODE_HIGHLIGHT_DIRECTIVES",
    "ClrCodeModule",
    "activeCounter",
    "IF_ACTIVE_ID",
    "InjectionToken",
    "tokenFactory",
    "IF_ACTIVE_ID_PROVIDER",
    "useFactory",
    "IfActiveService",
    "_currentChange",
    "_current",
    "IfActiveDirective",
    "ifActiveService",
    "id",
    "wasActive",
    "activeChange",
    "checkAndUpdateView",
    "subscription",
    "currentChange",
    "newCurrentId",
    "currentId",
    "isNowActive",
    "updateView",
    "undefined",
    "active",
    "IfOpenService",
    "_openChange",
    "_open",
    "toggleWithEvent",
    "event",
    "originalEvent",
    "IfOpenDirective",
    "ifOpenService",
    "openChange",
    "change",
    "CONDITIONAL_DIRECTIVES",
    "ClrConditionalModule",
    "FocusTrapTracker",
    "_previousFocusTraps",
    "activatePreviousTrapper",
    "pop",
    "FocusTrapDirective",
    "injector",
    "focusTrapsTracker",
    "DOCUMENT",
    "onFocusIn",
    "focus",
    "_previousActiveElement",
    "setAttribute",
    "setPreviousFocus",
    "Injector",
    "FOCUS_TRAP_DIRECTIVES",
    "ClrFocusTrapModule",
    "EmptyAnchor",
    "ClrHostWrappingModule",
    "entryComponents",
    "DEFAULT_LOCALE_FORMAT",
    "LITTLE_ENDIAN_REGEX",
    "MIDDLE_ENDIAN_REGEX",
    "DELIMITER_REGEX",
    "USER_INPUT_REGEX",
    "MOBILE_USERAGENT_REGEX",
    "RTL_REGEX",
    "YEAR",
    "LITTLE_ENDIAN",
    "format",
    "MIDDLE_ENDIAN",
    "BIG_ENDIAN",
    "getNumberOfDaysInTheMonth",
    "year",
    "month",
    "Date",
    "getDate",
    "DayViewModel",
    "dayModel",
    "isTodaysDate",
    "isDisabled",
    "isSelected",
    "isFocusable",
    "CalendarModel",
    "initializeDaysInCalendar",
    "noOfDaysInCalendar",
    "days",
    "fill",
    "map",
    "date",
    "DayModel",
    "isEqual",
    "calendar",
    "isDayInCalendar",
    "day",
    "previousMonth",
    "nextMonth",
    "toDate",
    "incrementBy",
    "getFullYear",
    "getMonth",
    "clone",
    "CalendarViewModel",
    "selectedDay",
    "focusableDay",
    "today",
    "firstDayOfWeek",
    "currMonthDayViews",
    "initializeCalendarView",
    "_calendarView",
    "prevMonthCalendar",
    "nextMonthCalendar",
    "daysFromPrevMonthInCalView",
    "numDaysFromPrevMonthInCalView",
    "daysFromNextMonthInCalView",
    "NO_OF_DAYS_IN_A_WEEK",
    "prevMonthDayViews",
    "nextMonthDayViews",
    "generateDayViewModels",
    "slice",
    "generateCalendarView",
    "initializeSelectedDay",
    "initializeFocusableDay",
    "isCurrentCalendar",
    "dayViews",
    "currentYear",
    "currentMonth",
    "firstDayOfCurrMonth",
    "getDay",
    "isDayInCalendarView",
    "prev",
    "curr",
    "combinationArr",
    "calendarView",
    "setFocusableFlag",
    "flag",
    "updateFocusableDay",
    "DateNavigationService",
    "_todaysFullDate",
    "_selectedDayChange",
    "_displayedCalendarChange",
    "_focusOnCalendarChange",
    "_focusedDayChange",
    "_displayedCalendar",
    "setDisplayedCalendar",
    "initializeTodaysDate",
    "_today",
    "notifySelectedDayChanged",
    "initializeCalendar",
    "focusedDay",
    "changeMonth",
    "changeYear",
    "moveToNextMonth",
    "moveToPreviousMonth",
    "moveToCurrentMonth",
    "displayedCalendar",
    "incrementFocusDay",
    "DatepickerFocusService",
    "_ngZone",
    "focusCell",
    "elRef",
    "runOutsideAngular",
    "first",
    "onStable",
    "focusEl",
    "querySelector",
    "NgZone",
    "LocaleHelperService",
    "locale",
    "_firstDayOfWeek",
    "initializeLocaleData",
    "_localeDaysNarrow",
    "_localeMonthsAbbreviated",
    "_localeMonthsWide",
    "_localeDateFormat",
    "initializeFirstDayOfWeek",
    "initializeLocaleDateFormat",
    "initializeLocaleMonthsAbbreviated",
    "initializeLocaleMonthsWide",
    "initializeLocaleDaysNarrow",
    "tempArr",
    "getLocaleDayNames",
    "FormStyle",
    "Format",
    "TranslationWidth",
    "Narrow",
    "prevDays",
    "apply",
    "getLocaleMonthNames",
    "Abbreviated",
    "Wide",
    "getLocaleFirstDayOfWeek",
    "getLocaleDateFormat",
    "FormatWidth",
    "Short",
    "LOCALE_ID",
    "ClrCalendar",
    "_localeHelperService",
    "_dateNavigationService",
    "_datepickerFocusService",
    "_elRef",
    "_subs",
    "initializeSubscriptions",
    "localeDaysNarrow",
    "displayedCalendarChange",
    "focusedDayChange",
    "calendarViewModel",
    "focusOnCalendarChange",
    "onKeyDown",
    "keyCode",
    "preventDefault",
    "sub",
    "counter",
    "FormControlService",
    "_id",
    "_idChange",
    "BehaviorSubject",
    "DateFormControlService",
    "_touchedChange",
    "_dirtyChange",
    "markAsTouched",
    "markAsDirty",
    "DateIOService",
    "cldrLocaleDateFormat",
    "localeDisplayFormat",
    "delimiters",
    "localeDateFormat",
    "initializeLocaleDisplayFormat",
    "toLocaleLowerCase",
    "test",
    "extractDelimiters",
    "replace",
    "console",
    "toLocaleDisplayFormatString",
    "isNaN",
    "getTime",
    "dateNo",
    "monthNo",
    "dateStr",
    "toString",
    "monthStr",
    "isValidMonth",
    "isValidDate",
    "validateAndGetDate",
    "y",
    "result",
    "currYear",
    "Math",
    "floor",
    "parseToFourDigitYear",
    "isValidInput",
    "dateParts",
    "match",
    "firstPart",
    "secondPart",
    "thirdPart",
    "DatepickerEnabledService",
    "_document",
    "_isUserAgentMobile",
    "defaultView",
    "navigator",
    "userAgent",
    "_innerWidth",
    "innerWidth",
    "ClrDateContainer",
    "_ifOpenService",
    "_datepickerEnabledService",
    "dateFormControlService",
    "_dynamic",
    "_sub",
    "isEnabled",
    "toggleDatepicker",
    "[class.date-container]",
    "HostWrapper",
    "containerType",
    "vcr",
    "cfr",
    "ComponentFactoryResolver",
    "el",
    "createComponent",
    "resolveComponentFactory",
    "factory",
    "containerRef",
    "remove",
    "instance",
    "token",
    "notFoundValue",
    "WrappedFormControl",
    "wrapperType",
    "formControlService",
    "getProviderFromContainer",
    "_containerInjector",
    "ngOnInit",
    "HostBinding",
    "ClrDateInput",
    "_super",
    "_ngControl",
    "_dateIOService",
    "_subscriptions",
    "previousOutputInitializedFlag",
    "initialLoad",
    "_dateUpdated",
    "tslib_1.__extends",
    "initializePreviousOutput",
    "previousOutput",
    "populateContainerServices",
    "processInitialInputs",
    "processUserDateObject",
    "dateValueOnInitialLoad",
    "updateInputValue",
    "selDay",
    "writeDateStrToInputField",
    "setProperty",
    "placeholder",
    "placeholderText",
    "emitDateOutput",
    "onValueChange",
    "selectedDayChange",
    "control",
    "setValue",
    "valueChanges",
    "touchedChange",
    "dirtyChange",
    "[class.date-input]",
    "NgControl",
    "Self",
    "inputType",
    "AbstractPopover",
    "parentHost",
    "updateAnchor",
    "closeOnOutsideClick",
    "popoverInstance",
    "attachESCListener",
    "detachESCListener",
    "ignore",
    "detachOutsideClickListener",
    "ngAfterViewChecked",
    "attachOutsideClickListener",
    "documentESCListener",
    "listen",
    "hostClickListener",
    "ignoredElement",
    "ignoredElementClickListener",
    "documentClickListener",
    "isOffScreen",
    "ViewManagerService",
    "_currentView",
    "changeToMonthView",
    "changeToYearView",
    "changeToDayView",
    "ClrDatepickerViewManager",
    "parent",
    "_injector",
    "_viewManagerService",
    "configurePopover",
    "isMonthView",
    "isYearView",
    "isDayView",
    "[class.datepicker]",
    "ClrDay",
    "onDayViewFocus",
    "dayView",
    "selectDay",
    "[class.day]",
    "ClrDaypicker",
    "localeMonthsAbbreviated",
    "[class.daypicker]",
    "ClrMonthpicker",
    "_focusedMonthIndex",
    "calendarMonthIndex",
    "localeMonthsWide",
    "monthIndex",
    "getTabIndex",
    "[class.monthpicker]",
    "YearRangeModel",
    "yearRange",
    "generateYearRange",
    "remainder",
    "ceil",
    "generateRange",
    "from",
    "v",
    "k",
    "nextDecade",
    "previousDecade",
    "currentDecade",
    "inRange",
    "ClrYearpicker",
    "yearRangeModel",
    "calendarYear",
    "_focusedYear",
    "incrementFocusYearBy",
    "middleYear",
    "[class.yearpicker]",
    "CLR_DATEPICKER_DIRECTIVES",
    "ClrDatepickerModule",
    "latestId",
    "ClrCheckboxDeprecated",
    "clrAriaLabeledBy",
    "inline",
    "_checked",
    "_indeterminate",
    "indeterminateChange",
    "onChangeCallback",
    "_",
    "onTouchedCallback",
    "setIndeterminate",
    "setChecked",
    "toggle",
    "checked",
    "writeValue",
    "registerOnChange",
    "onChange",
    "registerOnTouched",
    "onTouched",
    "touch",
    "checkIndeterminateState",
    "[class.checkbox]",
    "[class.checkbox-inline]",
    "[class.disabled]",
    "NG_VALUE_ACCESSOR",
    "forwardRef",
    "multi",
    "indeterminate",
    "CLR_CHECKBOX_DIRECTIVES",
    "ClrCheckboxModule",
    "Checkbox",
    "ClrCheckbox",
    "CHECKBOX_DIRECTIVES",
    "ClrFormsModule",
    "Expand",
    "expandable",
    "_expanded",
    "_animate",
    "_expandChange",
    "IfExpanded",
    "expand",
    "expandedChange",
    "expandChange",
    "expanded",
    "EXPAND_DIRECTIVES",
    "ClrIfExpandModule",
    "OutsideClick",
    "strict",
    "outsideClick",
    "documentClick",
    "OUSTIDE_CLICK_DIRECTIVES",
    "ClrOutsideClickModule",
    "DomAdapter",
    "userDefinedWidth",
    "add",
    "getPropertyValue",
    "scrollBarWidth",
    "offsetWidth",
    "clientWidth",
    "scrollWidth",
    "computedHeight",
    "clientRectHeight",
    "clientRectRight",
    "clientRectWidth",
    "minWidth",
    "DatagridRenderOrganizer",
    "alreadySized",
    "widths",
    "_noLayout",
    "_clearWidths",
    "_detectStrictWidths",
    "_tableMode",
    "_computeWidths",
    "_alignColumns",
    "scrollbar",
    "scrollbarWidth",
    "_done",
    "resize",
    "DatagridRowExpandAnimation",
    "domAdapter",
    "renderOrganizer",
    "animate",
    "oldHeight",
    "setTimeout",
    "run",
    "running",
    "finish",
    "setStyle",
    "newHeight",
    "easing",
    "duration",
    "onfinish",
    "CustomFilter",
    "StateDebouncer",
    "_change",
    "nbChanges",
    "changeStart",
    "changeDone",
    "Page",
    "stateDebouncer",
    "_size",
    "_totalItems",
    "_sizeChange",
    "size",
    "oldSize",
    "total",
    "last",
    "_last",
    "totalItems",
    "page",
    "previous",
    "lastInPage",
    "min",
    "resetPageSize",
    "FiltersProvider",
    "_page",
    "_all",
    "hasActiveFilters",
    "isActive",
    "getActiveFilters",
    "ret",
    "resetPageAndEmitFilterChange",
    "hasUnregistered",
    "registered",
    "RegisteredFilter",
    "accepts",
    "item",
    "filters",
    "unregister",
    "DatagridFilterRegistrar",
    "setFilter",
    "deleteFilter",
    "ClrDatagridFilter",
    "_filters",
    "openChanged",
    "boolOpen",
    "customFilter",
    "DatagridStringFilterImpl",
    "filterFn",
    "_rawValue",
    "_lowerCaseValue",
    "toLowerCase",
    "lowerCaseValue",
    "DatagridStringFilter",
    "filterValueChange",
    "filterContainer",
    "input",
    "close",
    "customStringFilter",
    "OompaLoompa",
    "cdr",
    "willyWonka",
    "chocolate",
    "latestFlavor",
    "flavor",
    "ngAfterContentChecked",
    "RowActionService",
    "actionableCount",
    "register",
    "WillyWonka",
    "_chocolate",
    "DatagridWillyWonka",
    "ActionableOompaLoompa",
    "rowActions",
    "Error",
    "hasActionableRow",
    "ChangeDetectorRef",
    "ExpandableRowsCount",
    "expandableCount",
    "ExpandableOompaLoompa",
    "hasExpandableRow",
    "NestedProperty",
    "prop",
    "splitProp",
    "getPropValue",
    "nestedProp",
    "DatagridPropertyComparator",
    "compare",
    "a",
    "propA",
    "propB",
    "DatagridPropertyStringFilter",
    "exact",
    "search",
    "propValue",
    "DragDispatcher",
    "_renderer",
    "_onDragStart",
    "_onDragMove",
    "_onDragEnd",
    "addDragListener",
    "handleEl",
    "handleRef",
    "_listeners",
    "customDragEvent",
    "startOnEvent",
    "moveOnEvent",
    "endOnEvent",
    "dragMoveListener",
    "dragEndListener",
    "startEvent",
    "notifyDragStart",
    "moveEvent",
    "notifyDragMove",
    "endEvent",
    "notifyDragEnd",
    "destroy",
    "Sort",
    "_reverse",
    "_comparator",
    "emitChange",
    "sortBy",
    "forceReverse",
    "comparator",
    "reverse",
    "nbCount",
    "ClrDatagridColumn",
    "_sort",
    "_dragDispatcher",
    "_sorted",
    "sortedChange",
    "_sortOrder",
    "ClrDatagridSortOrder",
    "UNSORTED",
    "sortOrderChange",
    "_sortSubscription",
    "sort",
    "sortOrder",
    "_sortBy",
    "sorted",
    "columnId",
    "hideable",
    "hidden",
    "handleTrackerRef",
    "_field",
    "field",
    "ASC",
    "DESC",
    "sortable",
    "custom",
    "newValue",
    "updateFilterValue",
    "[class.datagrid-column]",
    "[class.datagrid-column--hidden]",
    "handleElRef",
    "handleTrackerElRef",
    "asc",
    "desc",
    "projectedFilter",
    "ContentChild",
    "Items",
    "trackBy",
    "_smart",
    "_displayed",
    "_allChanges",
    "_filtersSub",
    "_sortSub",
    "_pageSub",
    "smartenUp",
    "_filterItems",
    "_sortItems",
    "_changePage",
    "items",
    "emitAllChanges",
    "smart",
    "refresh",
    "displayed",
    "uninitialized",
    "_filtered",
    "firstItem",
    "lastItem",
    "ClrDatagridItems",
    "_differs",
    "_items",
    "_rawItems",
    "ngOnChanges",
    "currentItems",
    "currentValue",
    "_differ",
    "find",
    "ngDoCheck",
    "diff",
    "all",
    "IterableDiffers",
    "rawItems",
    "ClrDatagridPlaceholder",
    "[class.datagrid-placeholder-container]",
    "POPOVER_HOST_ANCHOR",
    "ClrSignpostTrigger",
    "subscriptions",
    "isOpen",
    "removeClass",
    "onSignpostTriggerClick",
    "class",
    "ClrSignpost",
    "useCustomTrigger",
    "trigger",
    "[class.signpost]",
    "customTrigger",
    "HideableColumnService",
    "_columnList",
    "_columnListChange",
    "hiddenColumns",
    "column",
    "some",
    "getColumns",
    "showHiddenColumns",
    "lastVisibleColumn",
    "updateColumnList",
    "columns",
    "updateForLastVisibleColumn",
    "canHideNextColumn",
    "getColumnById",
    "ClrDatagridCell",
    "hideableColumnService",
    "mapHideableColumn",
    "hideableColumn",
    "setHiddenClass",
    "hiddenStateSubscription",
    "hiddenChangeState",
    "hideableColumnValue",
    "[class.datagrid-cell]",
    "[class.datagrid-signpost-trigger]",
    "signpost",
    "nbSelection",
    "Selection",
    "selected",
    "_selectionType",
    "SelectionType",
    "None",
    "rowSelectionMode",
    "debounce",
    "_selectable",
    "clearSelection",
    "allChanges",
    "updatedItems",
    "newSingle",
    "leftOver",
    "matched",
    "ref",
    "selectedSingle",
    "selectedIndex",
    "currentSingle",
    "selectionType",
    "Multi",
    "Single",
    "_currentSingle",
    "lookup",
    "findIndex",
    "maybe",
    "selectItem",
    "deselectItem",
    "indexOfItem",
    "setSelected",
    "isAllSelected",
    "displayedItems",
    "toggleAll",
    "displayIndex",
    "currentIndex",
    "nbRow",
    "ClrDatagridRow",
    "selection",
    "rowActionService",
    "globalExpandable",
    "SELECTION_TYPE",
    "ENTER_KEY_CODE",
    "SPACE_KEY_CODE",
    "_selected",
    "selectedChanged",
    "role",
    "toggleExpand",
    "toggleSelection",
    "keypress",
    "columnsList",
    "updateCellsForColumns",
    "dgCells",
    "cellList",
    "columnList",
    "columnListChange",
    "cell",
    "currentColumn",
    "[class.datagrid-row]",
    "[class.datagrid-selected]",
    "[attr.tabindex]",
    "ColumnToggleButtonsService",
    "selectAllDisabled",
    "_okButtonClicked",
    "_selectAllButtonClicked",
    "buttonClicked",
    "StateProvider",
    "debouncer",
    "pipe",
    "state",
    "to",
    "by",
    "activeFilters",
    "activeFilters_1",
    "activeFilters_1_1",
    "stringFilter",
    "property",
    "ClrDatagrid",
    "columnService",
    "organizer",
    "expandableRows",
    "stateProvider",
    "singleSelectedChanged",
    "dataChanged",
    "rows",
    "row",
    "col",
    "s",
    "[class.datagrid-host]",
    "singleSelected",
    "rowSelectionModeDeprecated",
    "ClrDatagridActionBar",
    "[class.datagrid-action-bar]",
    "ClrDatagridActionOverflow",
    "openingEvent",
    "ClrDatagridColumnToggleButton",
    "toggleButtons",
    "getClasses",
    "classes",
    "isOk",
    "clrType",
    "click",
    "[class.action-right]",
    "[style.display]",
    "ClrDatagridColumnToggleTitle",
    "ClrDatagridColumnToggle",
    "columnToggleButtons",
    "_allColumnsVisible",
    "allColumnsVisible",
    "checkForAllColumnsVisible",
    "okButtonClicked",
    "toggleUI",
    "selectAllButtonClicked",
    "selectAll",
    "toggleColumn",
    "[class.column-switch-wrapper]",
    "[class.active]",
    "title",
    "DatagridDetailRegisterer",
    "expandableRowsCount",
    "ClrDatagridFooter",
    "activeToggler",
    "[class.datagrid-foot]",
    "DatagridHideableColumnModel",
    "_template",
    "_hidden",
    "hiddenChangesState",
    "ClrDatagridHideableColumn",
    "viewContainerRef",
    "dgColumn",
    "clrDgHideableColumn",
    "ClrDatagridItemsTrackBy",
    "ClrDatagridPagination",
    "currentChanged",
    "_pageSubscription",
    "middlePages",
    "[class.pagination]",
    "pageSize",
    "lastPage",
    "currentPage",
    "ClrDatagridRowDetail",
    "cells",
    "[class.datagrid-row-flex]",
    "[class.datagrid-row-detail]",
    "[class.datagrid-container]",
    "DatagridBodyRenderer",
    "computeScrollbarWidth",
    "NO_LAYOUT_CLASS",
    "COMPUTE_WIDTH_CLASS",
    "STRICT_WIDTH_CLASS",
    "DatagridCellRenderer",
    "clearWidths",
    "clearWidth",
    "setWidth",
    "DatagridColumnResizer",
    "dragDispatcher",
    "columnResizeBy",
    "dragWithinMinWidth",
    "resizeEmitter",
    "columnEl",
    "handleTrackerEl",
    "onDragStart",
    "dragStartHandler",
    "onDragMove",
    "$event",
    "dragMoveHandler",
    "onDragEnd",
    "dragEndHandler",
    "columnMinWidth",
    "body",
    "dragDistancePositionX",
    "columnRectWidth",
    "pageStartPositionX",
    "pageMovePosition",
    "pageX",
    "changedTouches",
    "getPositionWithinMax",
    "draggedDistance",
    "abs",
    "DatagridHeadRenderer",
    "accountForScrollbar",
    "DatagridHeaderRenderer",
    "columnResizer",
    "widthSet",
    "detectStrictWidths",
    "detectStrictWidth",
    "strictWidth",
    "computeWidth",
    "NoopDomAdapter",
    "domAdapterFactory",
    "DatagridMainRenderer",
    "_heightSet",
    "columnsSizesStable",
    "shouldStabilizeColumns",
    "computeWidths",
    "computeHeadersWidth",
    "sizeChange",
    "resetDatagridHeight",
    "headers",
    "stabilizeColumns",
    "shouldComputeHeight",
    "computeDatagridHeight",
    "nbColumns",
    "allStrict",
    "header",
    "px",
    "deps",
    "DatagridRowRenderer",
    "alignColumns",
    "setWidths",
    "DatagridTableRenderer",
    "tableMode",
    "on",
    "noLayout",
    "outsideContainer",
    "projected",
    "insideContainer",
    "insert",
    "detach",
    "read",
    "CLR_DATAGRID_DIRECTIVES",
    "ClrDatagridModule",
    "FormsModule",
    "Datagrid",
    "DatagridActionBar",
    "DatagridActionOverflow",
    "DatagridColumn",
    "DatagridColumnToggle",
    "DatagridHideableColumnDirective",
    "DatagridFilter",
    "DatagridItems",
    "DatagridRow",
    "DatagridRowDetail",
    "DatagridCell",
    "DatagridFooter",
    "DatagridPagination",
    "DatagridPlaceholder",
    "DATAGRID_DIRECTIVES",
    "ClrStackBlock",
    "_changedChildren",
    "_fullyInitialized",
    "_changed",
    "addChild",
    "styles",
    "[class.stack-block]",
    "animations",
    "transition",
    "getChangedValue",
    "setChangedValue",
    "ClrStackView",
    "editable",
    "save",
    "_editMode",
    "editingChange",
    "ClrStackHeader",
    "stackView",
    "StackControl",
    "modelChange",
    "editing",
    "model",
    "ClrStackInput",
    "inputs",
    "outputs",
    "ClrStackSelect",
    "ClrStackViewCustomTags",
    "CLR_STACK_VIEW_DIRECTIVES",
    "ClrStackViewModule",
    "StackView",
    "StackHeader",
    "StackBlock",
    "StackViewCustomTags",
    "StackInput",
    "StackSelect",
    "STACK_VIEW_DIRECTIVES",
    "NB_INSTANCES",
    "UNIQUE_ID",
    "uniqueIdFactory",
    "UNIQUE_ID_PROVIDER",
    "AbstractTreeSelection",
    "children",
    "child",
    "parentChanged",
    "childChanged",
    "indeterminateChanged",
    "oneSelectedChild",
    "previousSelectedValue",
    "previousIndeterminateValue",
    "TreeSelectionService",
    "selectable",
    "clrTreeSelectionProviderFactory",
    "existing",
    "ɵ0",
    "ClrTreeNode",
    "nodeExpand",
    "treeSelectionService",
    "nodeId",
    "_children",
    "nodeSelectedChange",
    "nodeIndeterminateChanged",
    "checkIfChildNodeRegistered",
    "activateSelection",
    "overflow-y",
    "nodeSelected",
    "nodeIndeterminate",
    "CLR_TREE_VIEW_DIRECTIVES",
    "ClrTreeViewModule",
    "TreeNode",
    "TREE_VIEW_DIRECTIVES",
    "ClrDataModule",
    "RootDropdownService",
    "closeMenus",
    "clrRootDropdownFactory",
    "ROOT_DROPDOWN_PROVIDER",
    "ClrDropdown",
    "dropdownService",
    "isMenuClosable",
    "[class.dropdown]",
    "[class.open]",
    "ClrDropdownItem",
    "dropdown",
    "_dropdownService",
    "onDropdownItemClick",
    "[class.dropdown-item]",
    "ClrDropdownMenu",
    "nested",
    "[class.dropdown-menu]",
    "ClrDropdownTrigger",
    "isRootLevelToggle",
    "onDropdownTriggerClick",
    "[class.dropdown-toggle]",
    "[class.expandable]",
    "CLR_DROPDOWN_DIRECTIVES",
    "ClrDropdownModule",
    "Dropdown",
    "DropdownMenu",
    "DropdownTrigger",
    "DropdownItem",
    "menuPositions",
    "DROPDOWN_DIRECTIVES",
    "ALERT_TYPES",
    "AlertIconAndTypesService",
    "defaultIconShape",
    "_alertIconShape",
    "_alertType",
    "iconInfoFromType",
    "shape",
    "classOrShape",
    "returnObj",
    "cssClass",
    "MultiAlertService",
    "allAlerts",
    "QueryList",
    "alert",
    "_closed",
    "activeAlerts",
    "manage",
    "alerts",
    "ClrAlert",
    "iconService",
    "multiAlertService",
    "isSmall",
    "closable",
    "isAppLevel",
    "_closedChanged",
    "previouslyHidden",
    "alertType",
    "alertIconShape",
    "detectChangesIfNeeded",
    "currentAlert",
    "ClrAlertItem",
    "ClrAlerts",
    "currentAlertIndexChange",
    "currentAlertChange",
    "Number",
    "isInteger",
    "isHidden",
    "[class.alerts]",
    "[class.alert-danger]",
    "[class.alert-info]",
    "[class.alert-success]",
    "[class.alert-warning]",
    "_inputCurrentIndex",
    "ClrAlertsPager",
    "multiAlertServiceChanges",
    "pageUp",
    "pageDown",
    "[class.alerts-pager]",
    "currentAlertIndex",
    "CLR_ALERT_DIRECTIVES",
    "ClrAlertModule",
    "Alert",
    "AlertItem",
    "Alerts",
    "AlertsPager",
    "ALERT_DIRECTIVES",
    "ClrEmphasisModule",
    "ResponsiveNavCodes",
    "NAV_LEVEL_1",
    "NAV_LEVEL_2",
    "NAV_CLOSE_ALL",
    "NAV_OPEN",
    "NAV_CLOSE",
    "NAV_TOGGLE",
    "NAV_CLASS_HAMBURGER_MENU",
    "NAV_CLASS_OVERFLOW_MENU",
    "NAV_CLASS_TRIGGER_1",
    "NAV_CLASS_TRIGGER_2",
    "NAV_CLASS_LEVEL_1",
    "NAV_CLASS_LEVEL_2",
    "ResponsiveNavControlMessage",
    "_controlCode",
    "_navLevel",
    "ResponsiveNavigationService",
    "responsiveNavList",
    "registerNavSubject",
    "controlNavSubject",
    "closeAllNavs",
    "registerNav",
    "navLevel",
    "isNavRegistered",
    "unregisterNav",
    "sendControlMessage",
    "controlCode",
    "message",
    "ClrMainContainer",
    "responsiveNavService",
    "_classList",
    "navControl",
    "processMessage",
    "navClass",
    "controlNav",
    "[class.main-container]",
    "CLR_LAYOUT_DIRECTIVES",
    "ClrMainContainerModule",
    "MainContainer",
    "LAYOUT_DIRECTIVES",
    "MainContainerWillyWonka",
    "NavDetectionOompaLoompa",
    "reduce",
    "sum",
    "ClrHeader",
    "isNavLevel1OnPage",
    "isNavLevel2OnPage",
    "registeredNavs",
    "navLevelList",
    "initializeNavTriggers",
    "resetNavTriggers",
    "navList",
    "closeOpenNav",
    "toggleNav",
    "[class.header]",
    "ClrNavLevel",
    "level",
    "addNavClass",
    "navHostClassList",
    "_level",
    "navHost",
    "ResponsiveNavigationProvider",
    "CLR_NAVIGATION_DIRECTIVES",
    "ClrNavigationModule",
    "Header",
    "NavLevelDirective",
    "NAVIGATION_DIRECTIVES",
    "TemplateRefContainer",
    "TEMPLATE_REF_DIRECTIVES",
    "ClrTemplateRefModule",
    "TabsWillyWonka",
    "ActiveOompaLoompa",
    "ifActive",
    "AriaService",
    "TabsService",
    "tab",
    "tabLink",
    "inOverflow",
    "nbTabContentComponents",
    "ClrTabContent",
    "ariaService",
    "tabContentId",
    "ariaLabelledBy",
    "ariaControls",
    "[id]",
    "[attr.aria-labelledby]",
    "[attr.aria-hidden]",
    "[attr.data-hidden]",
    "nbTabsComponent",
    "TABS_ID",
    "tokenFactory$1",
    "TABS_ID_PROVIDER",
    "nbTabLinkComponents",
    "ClrTabLink",
    "tabsId",
    "tabLinkId",
    "templateRefContainer",
    "activate",
    "[attr.aria-selected]",
    "[attr.aria-controls]",
    "[class.btn]",
    "[class.btn-link]",
    "[class.nav-link]",
    "[class.nav-item]",
    "ClrTab",
    "tabsService",
    "tabContent",
    "ClrTabOverflowContent",
    "ClrTabs",
    "overflowTabs",
    "activeTab",
    "tabLinkDirectives",
    "toggleOverflow",
    "descendants",
    "CLR_TABS_DIRECTIVES",
    "ClrTabsModule",
    "Tab",
    "Tabs",
    "TabContent",
    "TabOverflowContent",
    "TabLinkDirective",
    "TABS_DIRECTIVES",
    "VerticalNavGroupRegistrationService",
    "navGroupCount",
    "registerNavGroup",
    "unregisterNavGroup",
    "VerticalNavIconService",
    "_icons",
    "registerIcon",
    "unregisterIcon",
    "VerticalNavService",
    "_animateOnCollapsed",
    "_collapsedChanged",
    "_collapsed",
    "_collapsible",
    "collapsible",
    "updateCollapseBehavior",
    "collapsed",
    "ClrVerticalNav",
    "_navService",
    "_navIconService",
    "_navGroupRegistrationService",
    "collapsedChanged",
    "hasIcons",
    "toggleByButton",
    "[class.is-collapsed]",
    "[class.has-nav-groups]",
    "[class.has-icons]",
    "VerticalNavGroupService",
    "EXPANDED_STATE",
    "COLLAPSED_STATE",
    "ClrVerticalNavGroup",
    "_itemExpand",
    "_navGroupService",
    "wasExpanded",
    "_expandAnimationState",
    "expandAnimationState",
    "animateOnCollapsed",
    "goingToCollapse",
    "expandGroup",
    "collapseGroup",
    "expandAnimationDone",
    "toState",
    "visibility",
    "userExpandedInput",
    "ClrVerticalNavGroupChildren",
    "ClrVerticalNavIcon",
    "_verticalNavIconService",
    "ClrVerticalNavLink",
    "expandParentNavGroup",
    "CLR_VERTICAL_NAV_DIRECTIVES",
    "ClrVerticalNavModule",
    "VerticalNav",
    "VerticalNavGroup",
    "VerticalNavGroupChildren",
    "VerticalNavIcon",
    "VerticalNavLink",
    "VERTICAL_NAV_DIRECTIVES",
    "ClrLayoutModule",
    "ScrollingService",
    "stopScrolling",
    "resumeScrolling",
    "GHOST_PAGE_ANIMATION",
    "STATES",
    "NO_PAGES",
    "ALL_PAGES",
    "NEXT_TO_LAST_PAGE",
    "LAST_PAGE",
    "TRANSITIONS",
    "IN",
    "OUT",
    "ClrModal",
    "_scrollingService",
    "_openChanged",
    "staticBackdrop",
    "skipAnimation",
    "ghostPageState",
    "bypassScrollService",
    "stopClose",
    "altClose",
    "focusTrap",
    "fadeDone",
    "viewProviders",
    "opacity",
    "background",
    "CLR_MODAL_DIRECTIVES",
    "ClrModalModule",
    "Modal",
    "MODAL_DIRECTIVES",
    "SIGNPOST_POSITIONS",
    "top-left",
    "top-middle",
    "top-right",
    "right-top",
    "right-middle",
    "right-bottom",
    "bottom-right",
    "bottom-middle",
    "bottom-left",
    "left-bottom",
    "left-middle",
    "left-top",
    "default",
    "POSITIONS",
    "ClrSignpostContent",
    "_position",
    "setPosition",
    "[class.signpost-content]",
    "CLR_SIGNPOST_DIRECTIVES",
    "ClrSignpostModule",
    "Signpost",
    "SignpostContent",
    "SignpostTrigger",
    "SIGNPOST_DIRECTIVES",
    "ClrTooltip",
    "[class.tooltip]",
    "SIZES",
    "ClrTooltipContent",
    "[class.tooltip-content]",
    "[style.opacity]",
    "ClrTooltipTrigger",
    "showTooltip",
    "hideTooltip",
    "CLR_TOOLTIP_DIRECTIVES",
    "ClrTooltipModule",
    "Tooltip",
    "TooltipContent",
    "TooltipTrigger",
    "TOOLTIP_DIRECTIVES",
    "ClrPopoverModule",
    "ButtonHubService",
    "buttonsReady",
    "_previousBtnClicked",
    "_nextBtnClicked",
    "_dangerBtnClicked",
    "_cancelBtnClicked",
    "_finishBtnClicked",
    "_customBtnClicked",
    "buttonType",
    "PageCollectionService",
    "_pagesReset",
    "pages",
    "toArray",
    "pageCount",
    "pagesCount",
    "pagesAsArray",
    "getPageById",
    "foundPages",
    "checkResults",
    "getPageByIndex",
    "pagesLastIndex",
    "getPageIndex",
    "results",
    "requestedPageId",
    "foundPagesCount",
    "pageRange",
    "start",
    "end",
    "getPageRangeFromPages",
    "otherPage",
    "startIndex",
    "endIndex",
    "pageIndex",
    "otherPageIndex",
    "getPreviousPage",
    "previousPageIndex",
    "previousPageIsCompleted",
    "previousPage",
    "completed",
    "getNextPage",
    "nextPageIndex",
    "getStepItemIdForPage",
    "pageIdParts",
    "commitPage",
    "pageHasOverrides",
    "stopNext",
    "onCommit",
    "reset",
    "updateCompletedStates",
    "firstIncompleteIndex",
    "findFirstIncompletePageIndex",
    "returnIndex",
    "findFirstIncompletePage",
    "myIncompleteIndex",
    "WizardNavigationService",
    "pageCollection",
    "buttonService",
    "_currentChanged",
    "navServiceLoaded",
    "forceForwardNavigation",
    "_movedToNextPage",
    "_wizardFinished",
    "_movedToPreviousPage",
    "_cancelWizard",
    "wizardHasAltCancel",
    "wizardHasAltNext",
    "wizardStopNavigation",
    "wizardDisableStepnav",
    "_wizardGhostPageState",
    "_hideWizardGhostPages",
    "previousButtonSubscription",
    "previousBtnClicked",
    "currentPageIsFirst",
    "previousStepDisabled",
    "previousButtonClicked",
    "nextButtonSubscription",
    "nextBtnClicked",
    "checkAndCommitCurrentPage",
    "dangerButtonSubscription",
    "dangerBtnClicked",
    "finishButtonSubscription",
    "finishBtnClicked",
    "customButtonSubscription",
    "customBtnClicked",
    "customButtonClicked",
    "cancelButtonSubscription",
    "cancelBtnClicked",
    "pageOnCancel",
    "cancel",
    "pagesResetSubscription",
    "pagesReset",
    "setFirstPageCurrent",
    "firstPage",
    "penultimatePage",
    "_currentPage",
    "onLoad",
    "setCurrentPage",
    "currentPageIsLast",
    "forceNext",
    "nextPage",
    "iAmTheLastPage",
    "isNext",
    "isDanger",
    "isDangerNext",
    "isFinish",
    "readyToComplete",
    "primaryButtonClicked",
    "finishButtonClicked",
    "dangerButtonClicked",
    "nextButtonClicked",
    "goTo",
    "pageToGoToOrId",
    "lazyComplete",
    "pageToGoTo",
    "myPages",
    "pagesToCheck",
    "goingForward",
    "canGoTo",
    "previousPagePasses",
    "okayToMove",
    "setLastEnabledPageCurrent",
    "allPages",
    "lastCompletedPageIndex",
    "hideWizardGhostPages",
    "updateNavigation",
    "toSetCurrent",
    "HeaderActionService",
    "navService",
    "wizardHdrActions",
    "wizardHeaderActions",
    "hasHeaderActions",
    "currentPageHasHeaderActions",
    "wizardHasHeaderActions",
    "wizardHeaderActionIndex",
    "ClrWizardHeaderAction",
    "headerActionClicked",
    "ClrWizardPageButtons",
    "pageButtonsTemplateRef",
    "ClrWizardPageHeaderActions",
    "pageHeaderActionsTemplateRef",
    "ClrWizardPageNavTitle",
    "pageNavTitleTemplateRef",
    "ClrWizardPageTitle",
    "pageTitleTemplateRef",
    "wizardPageIndex",
    "ClrWizardPage",
    "_nextStepDisabled",
    "nextStepDisabledChange",
    "_previousStepDisabled",
    "previousStepDisabledChange",
    "_stopCancel",
    "stopCancelChange",
    "_stopNext",
    "_complete",
    "valBool",
    "nextStepDisabled",
    "enabled",
    "previousCompleted",
    "pageTitle",
    "pageNavTitle",
    "_headerActions",
    "_buttons",
    "makeCurrent",
    "[class.clr-wizard-page]",
    "stopCancel",
    "ClrWizard",
    "headerActionService",
    "differs",
    "showGhostPages",
    "_forceForward",
    "onCancel",
    "wizardFinished",
    "onReset",
    "currentPageChanged",
    "onMoveNext",
    "onMovePrevious",
    "_stopNavigation",
    "_disableStepnav",
    "_stopModalAnimations",
    "goNextSubscription",
    "movedToNextPage",
    "goPreviousSubscription",
    "movedToPreviousPage",
    "cancelSubscription",
    "notifyWizardCancel",
    "checkAndCancel",
    "wizardFinishedSubscription",
    "forceFinish",
    "differ",
    "currentPageSubscription",
    "setGhostPages",
    "headerActions",
    "deactivateGhostPages",
    "forEachAddedItem",
    "forEachRemovedItem",
    "stopNavigation",
    "skipChecksAndEmits",
    "modalCancel",
    "currentPageHasOverrides",
    "pageId",
    "wizardGhostPageState",
    "deactivateOrNot",
    "ghostpageStates",
    "currentPageIsNextToLast",
    "[class.clr-wizard]",
    "[class.wizard-md]",
    "[class.wizard-lg]",
    "[class.wizard-xl]",
    "[class.lastPage]",
    "[class.clr-wizard--ghosted]",
    "forceForward",
    "clrWizardOpen",
    "disableStepnav",
    "DEFAULT_BUTTON_TYPES",
    "danger",
    "CUSTOM_BUTTON_TYPES",
    "ClrWizardButton",
    "wasClicked",
    "checkDefaultAndCustomType",
    "valueToCheck",
    "typeToLookUp",
    "nav",
    "isCancel",
    "isPrevious",
    "ClrWizardCustomTags",
    "ClrWizardStepnav",
    "pageService",
    "ClrWizardStepnavItem",
    "pageGuard",
    "isCurrent",
    "[class.clr-nav-link]",
    "[class.no-click]",
    "[class.complete]",
    "CLR_WIZARD_DIRECTIVES",
    "ClrWizardModule",
    "Wizard",
    "WizardPage",
    "WizardStepnav",
    "WizardStepnavItem",
    "WizardButton",
    "WizardHeaderAction",
    "WizardCustomTags",
    "WizardPageTitleDirective",
    "WizardPageNavTitleDirective",
    "WizardPageButtonsDirective",
    "WizardPageHeaderActionsDirective",
    "WIZARD_DIRECTIVES",
    "ClarityModule",
    "forRoot",
    "ngModule",
    "forChild",
    "ClrLabel",
    "forAttr",
    "idChange",
    "ClrCommonFormsModule",
    "ClrCheckboxContainer",
    "ClrCheckboxNext",
    "ClrCheckboxNextModule",
    "ClrRadioContainer",
    "[class.radio]",
    "ClrRadio",
    "ClrRadioModule",
    "ClrFormsNextModule",
    "direction"
  ],
  "mappings": "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"
}
